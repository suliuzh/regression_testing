{
    "pavement.prepare_nsis_script": [
        "pavement.superpack_name",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.upper",
        "numpy.lib.tests.test_io.TextIO.write",
        "pavement.internal_wininst_name",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.core.defchararray.chararray.upper"
    ],
    "pavement.bdist_wininst_arch": [
        "numpy.lib._datasource.DataSource.exists",
        "pavement._bdist_wininst"
    ],
    "pavement.bdist_superpack": [
        "pavement.superpack_name",
        "numpy.lib._datasource.DataSource.exists",
        "pavement.bdist_superpack.copy_bdist",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "pavement.prepare_nsis_script",
        "pavement.bdist_wininst_arch"
    ],
    "pavement.bdist_superpack.copy_bdist": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.index",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.char.index",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.chararray.index",
        "numpy.core.defchararray.join",
        "numpy.f2py.auxfuncs.replace",
        "npy_tempita._looper.loop_pos.index",
        "numpy.char.join",
        "pavement.internal_wininst_name",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.replace",
        "pavement.wininst_name"
    ],
    "pavement.bdist_wininst_nosse": [
        "pavement.bdist_wininst_arch"
    ],
    "pavement.bdist_wininst_sse2": [
        "pavement.bdist_wininst_arch"
    ],
    "pavement.bdist_wininst_sse3": [
        "pavement.bdist_wininst_arch"
    ],
    "pavement.bdist_wininst_simple": [
        "pavement._bdist_wininst"
    ],
    "pavement.bootstrap": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "pavement.clean": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "pavement.clean_bootstrap": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "pavement.nuke": [
        "numpy.lib._datasource.DataSource.exists"
    ],
    "pavement.html": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "pavement.pdf": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "pavement.pdf.build_pdf",
        "numpy.char.join"
    ],
    "pavement.dmg_name": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "pavement.mpkg_name": [
        "pavement.macosx_version"
    ],
    "pavement._build_mpkg": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "pavement.simple_dmg": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "pavement.clean",
        "pavement._build_mpkg",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "pavement.mpkg_name",
        "pavement._create_dmg"
    ],
    "pavement.bdist_mpkg": [
        "pavement._build_mpkg"
    ],
    "pavement._create_dmg": [
        "numpy.lib._datasource.DataSource.exists",
        "pavement.dmg_name"
    ],
    "pavement.dmg": [
        "pavement.mpkg_name",
        "numpy.lib._datasource.DataSource.exists",
        "pavement._build_mpkg",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "pavement.dmg_name"
    ],
    "pavement.sdist": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "pavement.tarball_name",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t",
        "numpy.char.join"
    ],
    "pavement._compute_hash": [
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.append",
        "numpy.lib._datasource.Repository.listdir",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.ma.core.append"
    ],
    "pavement.compute_md5": [
        "pavement._compute_hash"
    ],
    "pavement.compute_sha256": [
        "pavement._compute_hash"
    ],
    "pavement.write_release_task": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.copy",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.tests.test_io.TextIO.writelines",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "pavement.write_log_task": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.writelines"
    ],
    "pavement.write_release": [
        "pavement.write_release_task"
    ],
    "pavement.write_log": [
        "pavement.write_log_task"
    ],
    "pavement.write_release_and_log": [
        "numpy.core.defchararray.chararray.join",
        "pavement.write_log_task",
        "numpy.core.defchararray.join",
        "pavement.write_release_task",
        "numpy.char.join"
    ],
    "runtests.main": [
        "runtests.lcov_generate",
        "numpy.insert",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "runtests.exec_",
        "numpy.testing._private.nosetester.NoseTester.test",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.lstrip",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy",
        "numpy.core.defchararray.split",
        "numpy.lib.tests.test_arrayterator.test",
        "numpy.lib._datasource.DataSource.open",
        "runtests.gcov_reset_counters",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.lstrip",
        "numpy.core.tests.test_deprecations.TestRankDeprecation.test",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.function_base.insert",
        "numpy.int",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib._datasource.open",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy._import_tools.PackageLoader.error",
        "numpy.char.join",
        "numpy.core.defchararray.decode",
        "runtests.build_project",
        "numpy.core.defchararray.chararray.decode"
    ],
    "runtests.build_project": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.fromnumeric.all",
        "numpy.core.defchararray.chararray.split",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib._datasource.open",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.all",
        "numpy.char.join"
    ],
    "runtests.gcov_reset_counters": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.char.join"
    ],
    "runtests.lcov_generate": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.char.join"
    ],
    "setup.git_version._minimal_ext_cmd": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "setup.git_version": [
        "numpy.core.defchararray.decode",
        "numpy.core.defchararray.chararray.decode",
        "setup.git_version._minimal_ext_cmd"
    ],
    "setup.get_version_info": [
        "numpy.lib._datasource.DataSource.exists",
        "setup.git_version"
    ],
    "setup.write_version_py": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "setup.get_version_info",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.set_options",
        "numpy.distutils.misc_util.Configuration.add_subpackage",
        "numpy.distutils.misc_util.Configuration.get_version",
        "numpy.distutils.misc_util.Configuration.add_extension",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "setup.check_submodules": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.chararray.strip"
    ],
    "setup.sdist_checked.run": [
        "setup.check_submodules"
    ],
    "setup.generate_cython": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "setup.parse_setuppy_commands": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "setup.setup_package": [
        "numpy.insert",
        "setup.sdist_checked",
        "setup.generate_cython",
        "setup.parse_setuppy_commands",
        "numpy.core.defchararray.join",
        "numpy.distutils.core",
        "numpy.distutils.core.setup",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.function_base.insert",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "setup.get_version_info",
        "setup.write_version_py",
        "numpy.char.join",
        "setup.configuration"
    ],
    "cythonize.process_tempita_pyx": [
        "npy_tempita.sub",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "cythonize.process_pyx",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "cythonize.process_tempita_pxi": [
        "npy_tempita.sub",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "cythonize.load_hashes": [
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib._datasource.open"
    ],
    "cythonize.save_hashes": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "cythonize.sha1_of_file": [
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read"
    ],
    "cythonize.get_hash": [
        "numpy.lib._datasource.DataSource.exists",
        "cythonize.sha1_of_file"
    ],
    "cythonize.process": [
        "cythonize.get_hash",
        "numpy.core.defchararray.chararray.join",
        "cythonize.normpath",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "cythonize.find_process_files": [
        "cythonize.load_hashes",
        "cythonize.save_hashes",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.join",
        "cythonize.process",
        "cythonize.process_tempita_pxi",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read"
    ],
    "cythonize.main": [
        "cythonize.find_process_files"
    ],
    "commitstats.get_count": [
        "numpy.unique",
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.core.defchararray.count",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.ma.core.MaskedArray.count",
        "commitstats.get_count",
        "numpy.core.defchararray.chararray.count"
    ],
    "changelog.get_authors": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.sort"
    ],
    "changelog.get_pull_requests": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.log",
        "numpy.lib.scimath.log",
        "numpy.ma.core.sort",
        "numpy._import_tools.PackageLoader.log"
    ],
    "changelog.main": [
        "numpy.core.defchararray.strip",
        "changelog.get_authors",
        "numpy.core.defchararray.chararray.strip",
        "changelog.get_pull_requests"
    ],
    "c_coverage_report.SourceFile.mark_line": [
        "clapack_scrub.LineQueue.add",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "numpy.f2py.func2subr.createsubrwrapper.add"
    ],
    "c_coverage_report.SourceFile.write_text": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "c_coverage_report.SourceFile.write_html": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "c_coverage_report.FunctionHtmlFormatter",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "c_coverage_report.FunctionHtmlFormatter.__init__"
    ],
    "c_coverage_report.SourceFiles.get_file": [
        "c_coverage_report.SourceFile.__init__",
        "c_coverage_report.SourceFile"
    ],
    "c_coverage_report.SourceFiles.write_text": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "c_coverage_report.SourceFile.write_text",
        "c_coverage_report.SourceFiles.clean_path",
        "c_coverage_report.SourceFiles.write_text",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib._datasource.open",
        "numpy.char.join"
    ],
    "c_coverage_report.SourceFiles.write_html": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.core.defchararray.join",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "c_coverage_report.SourceFile.write_html",
        "numpy.lib.tests.test_io.TextIO.write",
        "c_coverage_report.SourceFiles.clean_path",
        "numpy.distutils.command.config.GrabStdout.write",
        "c_coverage_report.SourceFiles.write_html",
        "track_allocations.AllocationTracker.write_html",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open",
        "numpy.char.join",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "c_coverage_report.collect_stats": [
        "numpy.int",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.strip"
    ],
    "track_allocations.AllocationTracker.__init__": [
        "track_allocations.AllocationTracker.hook"
    ],
    "track_allocations.AllocationTracker.__exit__": [
        "track_allocations.AllocationTracker.check_line_changed"
    ],
    "track_allocations.AllocationTracker.hook": [
        "track_allocations.AllocationTracker.free_cb",
        "track_allocations.AllocationTracker.realloc_cb",
        "track_allocations.AllocationTracker.alloc_cb"
    ],
    "track_allocations.AllocationTracker.alloc_cb": [
        "numpy.ma.append",
        "track_allocations.AllocationTracker.check_line_changed",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "track_allocations.AllocationTracker.free_cb": [
        "numpy.ma.append",
        "track_allocations.AllocationTracker.check_line_changed",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "track_allocations.AllocationTracker.realloc_cb": [
        "numpy.ma.append",
        "track_allocations.AllocationTracker.check_line_changed",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "track_allocations.AllocationTracker.check_line_changed": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.append",
        "numpy.matrixlib.defmatrix.matrix.max",
        "track_allocations.AllocationTracker.get_code_line",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "track_allocations.AllocationTracker.write_html": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "npy_tempita._looper.looper.__iter__": [
        "npy_tempita._looper.looper_iter.__init__",
        "npy_tempita._looper.looper_iter"
    ],
    "npy_tempita._looper.looper_iter": [
        "npy_tempita._looper.looper_iter.__next__"
    ],
    "npy_tempita._looper.looper_iter.__next__": [
        "npy_tempita._looper.loop_pos.__init__",
        "npy_tempita._looper.loop_pos"
    ],
    "npy_tempita._looper.loop_pos": [
        "npy_tempita._looper.loop_pos.first",
        "npy_tempita._looper.loop_pos.even",
        "npy_tempita._looper.loop_pos.__next__",
        "npy_tempita._looper.loop_pos.last",
        "npy_tempita._looper.loop_pos.previous",
        "npy_tempita._looper.loop_pos.length",
        "npy_tempita._looper.loop_pos.index",
        "npy_tempita._looper.loop_pos.odd",
        "npy_tempita._looper.loop_pos.number",
        "npy_tempita._looper.loop_pos.item"
    ],
    "npy_tempita._looper.loop_pos.first_group": [
        "npy_tempita._looper.loop_pos._compare_group"
    ],
    "npy_tempita._looper.loop_pos.last_group": [
        "npy_tempita._looper.loop_pos._compare_group"
    ],
    "npy_tempita.TemplateError.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "npy_tempita.TemplateError.__str__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "npy_tempita.get_file_template": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "npy_tempita.Template.from_filename",
        "numpy.char.join"
    ],
    "npy_tempita.Template": [
        "npy_tempita._looper.looper",
        "npy_tempita.Template.from_filename"
    ],
    "npy_tempita.Template.__init__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.all",
        "numpy.ma.copy",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "npy_tempita.compat3.is_unicode",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.all",
        "npy_tempita.parse",
        "numpy.lib.user_array.container.copy",
        "npy_tempita._looper.looper",
        "numpy.copy"
    ],
    "npy_tempita.Template.from_filename": [
        "numpy.core.defchararray.chararray.decode",
        "npy_tempita.Template.__init__",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.decode",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "npy_tempita.get_file_template"
    ],
    "npy_tempita.Template.substitute": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.lib._iotools.StringConverter.update",
        "npy_tempita.Template._interpret",
        "npy_tempita.Template._interpret_inherit"
    ],
    "npy_tempita.Template._interpret": [
        "npy_tempita.Template._interpret_codes",
        "npy_tempita.parse"
    ],
    "npy_tempita.Template._interpret_inherit": [
        "npy_tempita.compat3.iteritems",
        "npy_tempita.TemplateError",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject",
        "npy_tempita.TemplateObject.__init__"
    ],
    "npy_tempita.Template._interpret_codes": [
        "npy_tempita.Template._interpret_code"
    ],
    "npy_tempita.Template._interpret_code": [
        "numpy.core.defchararray.split",
        "npy_tempita.Template._exec",
        "npy_tempita.TemplateDef.__init__",
        "npy_tempita.Template._eval",
        "npy_tempita.Template._interpret_for",
        "numpy.core.defchararray.chararray.split",
        "npy_tempita.Template._interpret_if",
        "npy_tempita.Template._repr",
        "npy_tempita._TemplateContinue",
        "npy_tempita._TemplateBreak",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "npy_tempita.TemplateDef"
    ],
    "npy_tempita.Template._interpret_for": [
        "npy_tempita._TemplateBreak",
        "npy_tempita.Template._interpret_codes",
        "npy_tempita._TemplateContinue"
    ],
    "npy_tempita.Template._interpret_if": [
        "npy_tempita.Template._eval",
        "npy_tempita.Template._interpret_codes"
    ],
    "npy_tempita.Template._eval": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "npy_tempita.Template._add_line_info",
        "npy_tempita.compat3.coerce_text",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "npy_tempita.Template._exec": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "npy_tempita.Template._add_line_info",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "npy_tempita.Template._repr": [
        "npy_tempita.Template._add_line_info",
        "npy_tempita.compat3.is_unicode",
        "npy_tempita.compat3.coerce_text"
    ],
    "npy_tempita.sub": [
        "npy_tempita.Template.__init__",
        "npy_tempita.Template.substitute",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "npy_tempita.Template"
    ],
    "npy_tempita.paste_script_template_renderer": [
        "npy_tempita.Template.substitute",
        "npy_tempita.Template",
        "npy_tempita.Template.__init__"
    ],
    "npy_tempita.bunch.__init__": [
        "npy_tempita.compat3.iteritems"
    ],
    "npy_tempita.bunch.__getitem__": [
        "numpy.core.numerictypes._typedict.__getitem__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__",
        "numpy.lib.npyio.NpzFile.__getitem__",
        "npy_tempita.bunch.__getitem__",
        "numpy.lib.index_tricks.nd_grid.__getitem__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__",
        "numpy.matrixlib.defmatrix.matrix.__getitem__",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__",
        "numpy.ndarray.__getitem__",
        "numpy.core.records.record.__getitem__",
        "numpy.lib._datasource._FileOpeners.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__getitem__",
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__",
        "numpy.lib.polynomial.poly1d.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__",
        "numpy.ma.core.MaskedIterator.__getitem__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__getitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__",
        "numpy.core.memmap.memmap.__getitem__",
        "numpy.lib.index_tricks.IndexExpression.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__",
        "numpy.lib.user_array.container.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__",
        "numpy.core.defchararray.chararray.__getitem__"
    ],
    "npy_tempita.bunch.__repr__": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.sort"
    ],
    "npy_tempita.html_quote": [
        "npy_tempita.compat3.is_unicode",
        "npy_tempita.compat3.coerce_text"
    ],
    "npy_tempita.url": [
        "npy_tempita.compat3.is_unicode",
        "npy_tempita.compat3.coerce_text"
    ],
    "npy_tempita.attr": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.sort",
        "numpy.ma.append",
        "numpy.ma.core.sort",
        "npy_tempita.html",
        "npy_tempita.compat3.iteritems",
        "numpy.append",
        "npy_tempita.html_quote",
        "npy_tempita.html.__init__",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.core.defchararray.endswith"
    ],
    "npy_tempita.HTMLTemplate": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "npy_tempita.html",
        "npy_tempita.Template",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "npy_tempita.html_quote",
        "npy_tempita.url",
        "npy_tempita.attr",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "npy_tempita.HTMLTemplate._repr": [
        "npy_tempita.html_quote",
        "npy_tempita.Template._repr"
    ],
    "npy_tempita.sub_html": [
        "npy_tempita.Template.substitute",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "npy_tempita.HTMLTemplate"
    ],
    "npy_tempita.TemplateDef.__str__": [
        "npy_tempita.TemplateDef.__init__"
    ],
    "npy_tempita.TemplateDef.__call__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "npy_tempita.TemplateDef._parse_signature"
    ],
    "npy_tempita.TemplateDef._parse_signature": [
        "numpy.sctypeDict.values",
        "npy_tempita.compat3.iteritems",
        "numpy.typeDict.values",
        "numpy.sctypes.values"
    ],
    "npy_tempita.TemplateObject.__init__": [
        "npy_tempita.TemplateObjectGetter.__init__",
        "npy_tempita.TemplateObjectGetter"
    ],
    "npy_tempita.TemplateObjectGetter.__getattr__": [
        "npy_tempita._Empty"
    ],
    "npy_tempita._Empty": [
        "npy_tempita._Empty.__bool__"
    ],
    "npy_tempita.lex": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.append",
        "npy_tempita.TemplateError",
        "numpy.ma.copy",
        "npy_tempita.TemplateError.__init__",
        "numpy.append",
        "npy_tempita._looper.loop_pos.last",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.append",
        "npy_tempita.trim_lex",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "npy_tempita.find_position",
        "numpy.copy"
    ],
    "npy_tempita.trim_lex": [
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.strip"
    ],
    "npy_tempita.parse": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.append",
        "npy_tempita.parse_expr",
        "numpy.ma.copy",
        "numpy.append",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "npy_tempita.lex",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "npy_tempita.parse_expr": [
        "numpy.core.defchararray.lstrip",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.startswith",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.lstrip",
        "numpy.core.defchararray.chararray.replace",
        "npy_tempita.TemplateError",
        "npy_tempita.parse_cond",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.parse_for",
        "npy_tempita.parse_default",
        "npy_tempita.parse_inherit",
        "npy_tempita.parse_def",
        "numpy.lib.shape_base.split",
        "numpy.split"
    ],
    "npy_tempita.parse_cond": [
        "numpy.ma.append",
        "npy_tempita.TemplateError",
        "npy_tempita.parse_one_cond",
        "npy_tempita.TemplateError.__init__",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "npy_tempita.parse_one_cond": [
        "numpy.core.defchararray.lstrip",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.lstrip",
        "numpy.ma.append",
        "npy_tempita.parse_expr",
        "npy_tempita.TemplateError",
        "numpy.core.defchararray.chararray.startswith",
        "npy_tempita.TemplateError.__init__",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "npy_tempita.parse_for": [
        "numpy.core.defchararray.strip",
        "numpy.ma.append",
        "npy_tempita.parse_expr",
        "npy_tempita.TemplateError",
        "numpy.core.defchararray.chararray.strip",
        "npy_tempita.TemplateError.__init__",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "npy_tempita.parse_default": [
        "npy_tempita.TemplateError",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.strip",
        "npy_tempita.TemplateError.__init__"
    ],
    "npy_tempita.parse_def": [
        "numpy.ma.append",
        "npy_tempita.parse_expr",
        "npy_tempita.TemplateError",
        "npy_tempita.TemplateError.__init__",
        "numpy.append",
        "npy_tempita.parse_signature",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "npy_tempita.parse_signature": [
        "numpy.ma.append",
        "npy_tempita.TemplateError",
        "npy_tempita.TemplateError.__init__",
        "numpy.append",
        "npy_tempita.isolate_expression",
        "numpy.lib.function_base.append",
        "npy_tempita.parse_signature.get_token",
        "numpy.ma.core.append"
    ],
    "npy_tempita.parse_signature.get_token": [
        "npy_tempita.compat3.next"
    ],
    "npy_tempita.fill_command": [
        "numpy.lib._iotools.StringConverter.update",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "npy_tempita.compat3.coerce_text",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "npy_tempita.Template",
        "npy_tempita.Template.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "npy_tempita.Template.substitute",
        "numpy.lib._datasource.open",
        "npy_tempita.HTMLTemplate"
    ],
    "npy_tempita.compat3.coerce_text": [
        "npy_tempita.attr"
    ],
    "testFarray.FarrayTestCase.testAsString": [
        "numpy.distutils.command.egg_info.egg_info.run",
        "numpy.f2py.diagnose.run",
        "numpy.distutils.command.config_compiler.config_fc.run",
        "numpy.distutils.command.build_scripts.build_scripts.run",
        "numpy.distutils.command.build_ext.build_ext.run",
        "numpy.distutils.command.build.build.run",
        "numpy.distutils.command.config_compiler.config_cc.run",
        "push_docs_to_repo.run",
        "numpy.distutils.command.install_data.install_data.run",
        "setup.sdist_checked.run",
        "benchmarks.bench_app.LaplaceInplace.setup.run",
        "numpy.distutils.command.build_py.build_py.run",
        "numpy.distutils.command.install_headers.install_headers.run",
        "numpy.distutils.command.install.install.run",
        "numpy.distutils.command.build_src.build_src.run",
        "numpy.distutils.command.install_clib.install_clib.run",
        "numpy.distutils.command.build_clib.build_clib.run",
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run",
        "numpy.f2py.f2py_testing.run"
    ],
    "testFarray.FarrayTestCase.testStr": [
        "numpy.distutils.command.egg_info.egg_info.run",
        "numpy.f2py.diagnose.run",
        "numpy.distutils.command.config_compiler.config_fc.run",
        "numpy.distutils.command.build_scripts.build_scripts.run",
        "numpy.distutils.command.build_ext.build_ext.run",
        "numpy.distutils.command.build.build.run",
        "numpy.distutils.command.config_compiler.config_cc.run",
        "push_docs_to_repo.run",
        "numpy.distutils.command.install_data.install_data.run",
        "setup.sdist_checked.run",
        "benchmarks.bench_app.LaplaceInplace.setup.run",
        "numpy.distutils.command.build_py.build_py.run",
        "numpy.distutils.command.install_headers.install_headers.run",
        "numpy.distutils.command.install.install.run",
        "numpy.distutils.command.build_src.build_src.run",
        "numpy.distutils.command.install_clib.install_clib.run",
        "numpy.distutils.command.build_clib.build_clib.run",
        "numpy.f2py.f2py_testing.run",
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run"
    ],
    "testFarray.FarrayTestCase.testView": [
        "numpy.ndarray"
    ],
    "testFortran.FortranTestCase.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testFortran.FortranTestCase.testSecondElementFortran": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.asfortranarray",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testFortran.FortranTestCase.testSecondElementObject": [
        "numpy.asfortranarray"
    ],
    "testFortran.scharTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.scharTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.ucharTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.ucharTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.shortTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.shortTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.ushortTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.ushortTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.intTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.intTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.uintTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.uintTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.longTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.longTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.ulongTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.ulongTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.longLongTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.longLongTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.ulongLongTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.ulongLongTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.floatTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.floatTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testFortran.doubleTestCase": [
        "testFortran.FortranTestCase"
    ],
    "testFortran.doubleTestCase.__init__": [
        "testFortran.FortranTestCase.__init__"
    ],
    "testArray.Array1TestCase.setUp": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.Array1TestCase.testConstructor2": [
        "npy_tempita._looper.loop_pos.length",
        "numpy.arange"
    ],
    "testArray.Array1TestCase.testLength": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.Array1TestCase.testLen": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.Array1TestCase.testResize0": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.Array1TestCase.testResize1": [
        "numpy.zeros",
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.Array1TestCase.testSetGet": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.Array1TestCase.testSetBad2": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.Array1TestCase.testGetBad2": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.Array1TestCase.testView": [
        "numpy.core.fromnumeric.all",
        "npy_tempita._looper.loop_pos.length",
        "numpy.ndarray",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testArray.Array2TestCase.testConstructor2": [
        "numpy.zeros"
    ],
    "testArray.Array2TestCase.testResize1": [
        "numpy.zeros"
    ],
    "testArray.Array2TestCase.testSetGet1": [
        "numpy.arange",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "testArray.Array2TestCase.testAsString": [
        "numpy.distutils.command.egg_info.egg_info.run",
        "numpy.f2py.diagnose.run",
        "numpy.distutils.command.config_compiler.config_fc.run",
        "numpy.distutils.command.build_scripts.build_scripts.run",
        "numpy.distutils.command.build_ext.build_ext.run",
        "numpy.f2py.f2py_testing.run",
        "numpy.distutils.command.build.build.run",
        "numpy.distutils.command.config_compiler.config_cc.run",
        "push_docs_to_repo.run",
        "numpy.distutils.command.install_data.install_data.run",
        "setup.sdist_checked.run",
        "benchmarks.bench_app.LaplaceInplace.setup.run",
        "numpy.distutils.command.build_py.build_py.run",
        "numpy.distutils.command.install_headers.install_headers.run",
        "numpy.distutils.command.install.install.run",
        "numpy.distutils.command.build_src.build_src.run",
        "numpy.distutils.command.install_clib.install_clib.run",
        "numpy.distutils.command.build_clib.build_clib.run",
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run"
    ],
    "testArray.Array2TestCase.testStr": [
        "numpy.distutils.command.egg_info.egg_info.run",
        "numpy.f2py.diagnose.run",
        "numpy.distutils.command.config_compiler.config_fc.run",
        "numpy.distutils.command.build_scripts.build_scripts.run",
        "numpy.distutils.command.build_ext.build_ext.run",
        "numpy.distutils.command.build.build.run",
        "numpy.distutils.command.config_compiler.config_cc.run",
        "push_docs_to_repo.run",
        "numpy.distutils.command.install_data.install_data.run",
        "setup.sdist_checked.run",
        "benchmarks.bench_app.LaplaceInplace.setup.run",
        "numpy.distutils.command.build_py.build_py.run",
        "numpy.distutils.command.install_headers.install_headers.run",
        "numpy.distutils.command.install.install.run",
        "numpy.distutils.command.build_src.build_src.run",
        "numpy.distutils.command.install_clib.install_clib.run",
        "numpy.distutils.command.build_clib.build_clib.run",
        "numpy.f2py.f2py_testing.run",
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run"
    ],
    "testArray.Array2TestCase.testView": [
        "numpy.ndarray"
    ],
    "testArray.ArrayZTestCase.setUp": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.ArrayZTestCase.testConstructor2": [
        "npy_tempita._looper.loop_pos.length",
        "numpy.arange",
        "numpy.complex128"
    ],
    "testArray.ArrayZTestCase.testLength": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.ArrayZTestCase.testLen": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.ArrayZTestCase.testResize0": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.ArrayZTestCase.testResize1": [
        "numpy.zeros",
        "npy_tempita._looper.loop_pos.length",
        "numpy.complex128"
    ],
    "testArray.ArrayZTestCase.testSetGet": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.ArrayZTestCase.testSetBad2": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.ArrayZTestCase.testGetBad2": [
        "npy_tempita._looper.loop_pos.length"
    ],
    "testArray.ArrayZTestCase.testView": [
        "numpy.core.fromnumeric.all",
        "npy_tempita._looper.loop_pos.length",
        "numpy.ndarray",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testVector.VectorTestCase.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testVector.VectorTestCase.testReverse": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.array",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testVector.VectorTestCase.testReverseWrongDim": [
        "numpy.array"
    ],
    "testVector.VectorTestCase.testReverseWrongSize": [
        "numpy.array"
    ],
    "testVector.VectorTestCase.testReverseWrongType": [
        "numpy.array"
    ],
    "testVector.VectorTestCase.testOnes": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.testing.assert_array_equal",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.zeros",
        "numpy.array",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal"
    ],
    "testVector.VectorTestCase.testOnesWrongDim": [
        "numpy.zeros"
    ],
    "testVector.VectorTestCase.testOnesWrongType": [
        "numpy.zeros"
    ],
    "testVector.VectorTestCase.testZeros": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.testing.assert_array_equal",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.array",
        "numpy.ones",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal"
    ],
    "testVector.VectorTestCase.testZerosWrongDim": [
        "numpy.ones"
    ],
    "testVector.VectorTestCase.testZerosWrongType": [
        "numpy.ones"
    ],
    "testVector.VectorTestCase.testEOSplit": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testVector.VectorTestCase.testTwos": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testVector.VectorTestCase.testThrees": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testVector.scharTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.scharTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.ucharTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.ucharTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.shortTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.shortTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.ushortTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.ushortTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.intTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.intTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.uintTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.uintTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.longTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.longTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.ulongTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.ulongTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.longLongTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.longLongTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.ulongLongTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.ulongLongTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.floatTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.floatTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testVector.doubleTestCase": [
        "testVector.VectorTestCase"
    ],
    "testVector.doubleTestCase.__init__": [
        "testVector.VectorTestCase.__init__"
    ],
    "testFlat.FlatTestCase.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testFlat.FlatTestCase.testProcess1D": [
        "numpy.frombuffer",
        "numpy.all"
    ],
    "testFlat.FlatTestCase.testProcess3D": [
        "numpy.frombuffer",
        "numpy.all"
    ],
    "testFlat.FlatTestCase.testProcess3DTranspose": [
        "numpy.frombuffer",
        "numpy.all"
    ],
    "testFlat.FlatTestCase.testProcessNoncontiguous": [
        "numpy.frombuffer"
    ],
    "testFlat.scharTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.scharTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.ucharTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.ucharTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.shortTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.shortTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.ushortTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.ushortTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.intTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.intTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.uintTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.uintTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.longTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.longTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.ulongTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.ulongTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.longLongTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.longLongTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.ulongLongTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.ulongLongTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.floatTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.floatTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testFlat.doubleTestCase": [
        "testFlat.FlatTestCase"
    ],
    "testFlat.doubleTestCase.__init__": [
        "testFlat.FlatTestCase.__init__"
    ],
    "testSuperTensor.SuperTensorTestCase.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testSuperTensor.SuperTensorTestCase.testNorm": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.fromnumeric.reshape",
        "numpy.array",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testNormWrongDim": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testNormWrongSize": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testScale": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.all",
        "numpy.ma.copy",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testScaleWrongType": [
        "numpy.array"
    ],
    "testSuperTensor.SuperTensorTestCase.testScaleWrongDim": [
        "numpy.array"
    ],
    "testSuperTensor.SuperTensorTestCase.testScaleWrongSize": [
        "numpy.array"
    ],
    "testSuperTensor.SuperTensorTestCase.testFloor": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testFloorWrongType": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testFloorWrongDim": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testCeil": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testCeilWrongType": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testCeilWrongDim": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.SuperTensorTestCase.testCeilNonArray": [
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "testSuperTensor.SuperTensorTestCase.testLUSplit": [
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "testSuperTensor.scharTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.scharTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.ucharTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.ucharTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.shortTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.shortTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.ushortTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.ushortTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.intTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.intTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.uintTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.uintTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.longTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.longTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.ulongTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.ulongTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.longLongTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.longLongTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.ulongLongTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.ulongLongTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.floatTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.floatTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testSuperTensor.doubleTestCase": [
        "testSuperTensor.SuperTensorTestCase"
    ],
    "testSuperTensor.doubleTestCase.__init__": [
        "testSuperTensor.SuperTensorTestCase.__init__"
    ],
    "testTensor.TensorTestCase.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testTensor.TensorTestCase.testNorm": [
        "numpy.int"
    ],
    "testTensor.TensorTestCase.testScale": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testScaleWrongType": [
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testScaleWrongDim": [
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testScaleWrongSize": [
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testFloor": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.testing.assert_array_equal",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal",
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testFloorWrongType": [
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testFloorWrongDim": [
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testCeil": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.testing.assert_array_equal",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal",
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testCeilWrongType": [
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testCeilWrongDim": [
        "numpy.array"
    ],
    "testTensor.TensorTestCase.testLUSplit": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testTensor.scharTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.scharTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.ucharTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.ucharTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.shortTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.shortTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.ushortTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.ushortTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.intTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.intTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.uintTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.uintTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.longTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.longTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.ulongTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.ulongTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.longLongTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.longLongTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.ulongLongTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.ulongLongTestCase.__init__": [
        "numpy.int",
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.floatTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.floatTestCase.__init__": [
        "testTensor.TensorTestCase.__init__"
    ],
    "testTensor.doubleTestCase": [
        "testTensor.TensorTestCase"
    ],
    "testTensor.doubleTestCase.__init__": [
        "testTensor.TensorTestCase.__init__"
    ],
    "testMatrix.MatrixTestCase.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.MatrixTestCase.testDet": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testDetBadList": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testDetWrongDim": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testDetWrongSize": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testMax": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testMaxBadList": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testMin": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testMinBadList": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testScale": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.array",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testMatrix.MatrixTestCase.testScaleWrongDim": [
        "numpy.array"
    ],
    "testMatrix.MatrixTestCase.testScaleWrongSize": [
        "numpy.array"
    ],
    "testMatrix.MatrixTestCase.testScaleWrongType": [
        "numpy.array"
    ],
    "testMatrix.MatrixTestCase.testScaleNonArray": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testFloor": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.testing.assert_array_equal",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.array",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal"
    ],
    "testMatrix.MatrixTestCase.testFloorWrongDim": [
        "numpy.array"
    ],
    "testMatrix.MatrixTestCase.testFloorWrongType": [
        "numpy.array"
    ],
    "testMatrix.MatrixTestCase.testFloorNonArray": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testCeil": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.testing.assert_array_equal",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.array",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal"
    ],
    "testMatrix.MatrixTestCase.testCeilWrongDim": [
        "numpy.array"
    ],
    "testMatrix.MatrixTestCase.testCeilWrongType": [
        "numpy.array"
    ],
    "testMatrix.MatrixTestCase.testCeilNonArray": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "testMatrix.MatrixTestCase.testLUSplit": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "testMatrix.scharTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.scharTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.ucharTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.ucharTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.shortTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.shortTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.ushortTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.ushortTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.intTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.intTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.uintTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.uintTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.longTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.longTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.ulongTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.ulongTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.longLongTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.longLongTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.ulongLongTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.ulongLongTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.floatTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.floatTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "testMatrix.doubleTestCase": [
        "testMatrix.MatrixTestCase"
    ],
    "testMatrix.doubleTestCase.__init__": [
        "testMatrix.MatrixTestCase.__init__"
    ],
    "benchmarks.bench_app.LaplaceInplace": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_app.LaplaceInplace.setup": [
        "benchmarks.bench_app.LaplaceInplace.setup.num_update",
        "benchmarks.bench_app.LaplaceInplace.setup.run",
        "benchmarks.bench_app.LaplaceInplace.setup.num_inplace"
    ],
    "benchmarks.bench_app.LaplaceInplace.setup.num_inplace": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.add",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.multiply",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "benchmarks.bench_app.LaplaceInplace.setup.laplace": [
        "benchmarks.bench_app.LaplaceInplace.setup.num_update",
        "numpy.zeros"
    ],
    "benchmarks.bench_app.LaplaceInplace.setup.run": [
        "benchmarks.bench_app.LaplaceInplace.setup.laplace"
    ],
    "benchmarks.bench_app.LaplaceInplace.time_it": [
        "benchmarks.bench_app.LaplaceInplace.setup.run"
    ],
    "benchmarks.bench_app.MaxesOfDots": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_app.MaxesOfDots.setup": [
        "numpy.random.seed"
    ],
    "benchmarks.bench_app.MaxesOfDots.maxes_of_dots": [
        "numpy.max",
        "numpy.dot"
    ],
    "benchmarks.bench_app.MaxesOfDots.time_it": [
        "benchmarks.bench_app.MaxesOfDots.maxes_of_dots"
    ],
    "benchmarks.bench_function_base.Histogram1D": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_function_base.Histogram1D.setup": [
        "numpy.linspace"
    ],
    "benchmarks.bench_function_base.Histogram1D.time_full_coverage": [
        "numpy.linspace",
        "numpy.histogram"
    ],
    "benchmarks.bench_function_base.Histogram1D.time_small_coverage": [
        "numpy.linspace",
        "numpy.histogram"
    ],
    "benchmarks.bench_function_base.Histogram1D.time_fine_binning": [
        "numpy.linspace",
        "numpy.histogram"
    ],
    "benchmarks.bench_function_base.Histogram2D": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_function_base.Histogram2D.setup": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_function_base.Histogram2D.time_full_coverage": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.histogramdd",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_function_base.Histogram2D.time_small_coverage": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.histogramdd",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_function_base.Histogram2D.time_fine_binning": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.histogramdd",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_function_base.Bincount": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_function_base.Bincount.setup": [
        "numpy.intp",
        "numpy.float64",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Bincount.time_bincount": [
        "numpy.bincount",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Bincount.time_weights": [
        "numpy.bincount",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Median": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_function_base.Median.setup": [
        "numpy.float32",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Median.time_even": [
        "numpy.median",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Median.time_odd": [
        "numpy.median",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Median.time_even_inplace": [
        "numpy.median",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Median.time_odd_inplace": [
        "numpy.median",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Median.time_even_small": [
        "numpy.median",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Median.time_odd_small": [
        "numpy.median",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Percentile": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_function_base.Percentile.setup": [
        "numpy.float32",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Percentile.time_quartile": [
        "numpy.percentile",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Percentile.time_percentile": [
        "numpy.percentile",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Select": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_function_base.Select.setup": [
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Select.time_select": [
        "numpy.arange",
        "numpy.select"
    ],
    "benchmarks.bench_function_base.Select.time_select_larger": [
        "numpy.arange",
        "numpy.select"
    ],
    "benchmarks.bench_function_base.Sort": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_function_base.Sort.setup": [
        "numpy.float32",
        "numpy.sort",
        "numpy.ones",
        "numpy.arange",
        "numpy.random.shuffle",
        "numpy.random.seed"
    ],
    "benchmarks.bench_function_base.Sort.time_sort": [
        "numpy.sort",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Sort.time_sort_random": [
        "numpy.sort",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Sort.time_sort_worst": [
        "numpy.sort",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Where": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_function_base.Where.setup": [
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Where.time_1": [
        "numpy.where",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Where.time_2": [
        "numpy.where",
        "numpy.arange"
    ],
    "benchmarks.bench_function_base.Where.time_2_broadcast": [
        "numpy.where",
        "numpy.arange"
    ],
    "benchmarks.bench_reduce.AddReduce": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_reduce.AddReduce.setup": [
        "numpy.sctypes.values",
        "numpy.sctypeDict.values",
        "numpy.typeDict.values"
    ],
    "benchmarks.bench_reduce.AddReduceSeparate": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_reduce.AddReduceSeparate.setup": [
        "benchmarks.common.get_squares"
    ],
    "benchmarks.bench_reduce.AddReduceSeparate.time_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "benchmarks.bench_reduce.AnyAll": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_reduce.AnyAll.setup": [
        "numpy.zeros",
        "numpy.ones"
    ],
    "benchmarks.bench_reduce.MinMax": [
        "benchmarks.common.Benchmark",
        "numpy.intp",
        "numpy.float64",
        "numpy.float32"
    ],
    "benchmarks.bench_reduce.MinMax.setup": [
        "numpy.ones"
    ],
    "benchmarks.bench_reduce.MinMax.time_min": [
        "numpy.min",
        "numpy.ones"
    ],
    "benchmarks.bench_reduce.MinMax.time_max": [
        "numpy.ones",
        "numpy.max"
    ],
    "benchmarks.bench_reduce.SmallReduction": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_reduce.SmallReduction.setup": [
        "numpy.ones",
        "numpy.float32"
    ],
    "benchmarks.bench_reduce.SmallReduction.time_small": [
        "numpy.sum",
        "numpy.ones"
    ],
    "benchmarks.bench_shape_base.Block": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_shape_base.Block.setup": [
        "numpy.int",
        "numpy.zeros",
        "numpy.ones"
    ],
    "benchmarks.bench_shape_base.Block.time_block_simple_row_wise": [
        "numpy.block",
        "numpy.ones"
    ],
    "benchmarks.bench_shape_base.Block.time_block_simple_column_wise": [
        "numpy.block",
        "numpy.ones"
    ],
    "benchmarks.bench_shape_base.Block.time_block_complicated": [
        "numpy.block",
        "numpy.zeros",
        "numpy.ones"
    ],
    "benchmarks.bench_shape_base.Block.time_nested": [
        "numpy.block",
        "numpy.zeros",
        "numpy.ones"
    ],
    "benchmarks.bench_shape_base.Block.time_3d": [
        "numpy.block",
        "numpy.ones"
    ],
    "benchmarks.bench_shape_base.Block.time_no_lists": [
        "numpy.block",
        "numpy.eye"
    ],
    "benchmarks.bench_random.Random": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_random.Random.setup": [
        "numpy.random.random"
    ],
    "benchmarks.bench_random.Shuffle": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_random.Shuffle.setup": [
        "numpy.arange"
    ],
    "benchmarks.bench_random.Shuffle.time_100000": [
        "numpy.arange",
        "numpy.random.shuffle"
    ],
    "benchmarks.bench_random.Randint": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_random.Randint.time_randint_fast": [
        "numpy.random.randint"
    ],
    "benchmarks.bench_random.Randint.time_randint_slow": [
        "numpy.random.randint"
    ],
    "benchmarks.bench_random.Randint_dtype": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_random.Randint_dtype.time_randint_fast": [
        "numpy.random.randint"
    ],
    "benchmarks.bench_random.Randint_dtype.time_randint_slow": [
        "numpy.random.randint"
    ],
    "benchmarks.bench_random.Permutation": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_random.Permutation.setup": [
        "numpy.random.random_sample"
    ],
    "benchmarks.bench_random.Permutation.time_permutation_1d": [
        "numpy.random.random_sample",
        "numpy.random.permutation"
    ],
    "benchmarks.bench_random.Permutation.time_permutation_2d": [
        "numpy.random.random_sample",
        "numpy.random.permutation"
    ],
    "benchmarks.bench_random.Permutation.time_permutation_int": [
        "numpy.random.permutation"
    ],
    "benchmarks.bench_indexing.Indexing": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_indexing.Indexing.setup": [
        "benchmarks.common.get_squares_",
        "benchmarks.common.get_indexes_",
        "benchmarks.common.get_indexes_rand_",
        "numpy"
    ],
    "benchmarks.bench_indexing.Indexing.time_op": [
        "benchmarks.common.get_indexes_rand_"
    ],
    "benchmarks.bench_indexing.IndexingSeparate": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_indexing.IndexingSeparate.setup": [
        "numpy.memmap",
        "numpy.float32",
        "numpy.array"
    ],
    "benchmarks.bench_indexing.IndexingSeparate.time_mmap_slicing": [
        "numpy.memmap"
    ],
    "benchmarks.bench_indexing.IndexingSeparate.time_mmap_fancy_indexing": [
        "numpy.array",
        "numpy.memmap"
    ],
    "benchmarks.bench_indexing.IndexingStructured0D": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_indexing.IndexingStructured0D.setup": [
        "numpy.zeros",
        "numpy.dtype"
    ],
    "benchmarks.bench_indexing.IndexingStructured0D.time_array_slice": [
        "numpy.zeros"
    ],
    "benchmarks.bench_indexing.IndexingStructured0D.time_array_all": [
        "numpy.zeros"
    ],
    "benchmarks.bench_indexing.IndexingStructured0D.time_scalar_slice": [
        "numpy.zeros"
    ],
    "benchmarks.bench_indexing.IndexingStructured0D.time_scalar_all": [
        "numpy.zeros"
    ],
    "benchmarks.bench_ufunc.Broadcast": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ufunc.Broadcast.setup": [
        "numpy.float64",
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.Broadcast.time_broadcast": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.UFunc": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ufunc.UFunc.setup": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy",
        "numpy.seterr",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "benchmarks.bench_ufunc.Custom": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ufunc.Custom.setup": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.Custom.time_nonzero": [
        "numpy.ones",
        "numpy.nonzero"
    ],
    "benchmarks.bench_ufunc.Custom.time_not_bool": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.Custom.time_and_bool": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.Custom.time_or_bool": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.CustomInplace": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ufunc.CustomInplace.setup": [
        "numpy.int8",
        "numpy.zeros",
        "numpy.int32",
        "numpy.float32",
        "numpy.ones",
        "numpy.float64"
    ],
    "benchmarks.bench_ufunc.CustomInplace.time_char_or": [
        "numpy.ones",
        "numpy.bitwise_or"
    ],
    "benchmarks.bench_ufunc.CustomInplace.time_char_or_temp": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.CustomInplace.time_int_or": [
        "numpy.ones",
        "numpy.bitwise_or"
    ],
    "benchmarks.bench_ufunc.CustomInplace.time_int_or_temp": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.CustomInplace.time_float_add": [
        "numpy.zeros",
        "numpy.add"
    ],
    "benchmarks.bench_ufunc.CustomInplace.time_float_add_temp": [
        "numpy.zeros"
    ],
    "benchmarks.bench_ufunc.CustomInplace.time_double_add": [
        "numpy.zeros",
        "numpy.add"
    ],
    "benchmarks.bench_ufunc.CustomInplace.time_double_add_temp": [
        "numpy.zeros"
    ],
    "benchmarks.bench_ufunc.CustomScalar": [
        "benchmarks.common.Benchmark",
        "numpy.float64",
        "numpy.float32"
    ],
    "benchmarks.bench_ufunc.CustomScalar.setup": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.CustomScalar.time_add_scalar2": [
        "numpy.ones",
        "numpy.add"
    ],
    "benchmarks.bench_ufunc.CustomScalar.time_divide_scalar2": [
        "numpy.ones",
        "numpy.divide"
    ],
    "benchmarks.bench_ufunc.CustomScalar.time_divide_scalar2_inplace": [
        "numpy.ones",
        "numpy.divide"
    ],
    "benchmarks.bench_ufunc.CustomScalar.time_less_than_scalar2": [
        "numpy.ones"
    ],
    "benchmarks.bench_ufunc.Scalar": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ufunc.Scalar.setup": [
        "numpy.asarray"
    ],
    "benchmarks.bench_ufunc.Scalar.time_add_scalar": [
        "numpy.asarray"
    ],
    "benchmarks.bench_ufunc.Scalar.time_add_scalar_conv": [
        "numpy.asarray"
    ],
    "benchmarks.bench_ufunc.Scalar.time_add_scalar_conv_complex": [
        "numpy.asarray"
    ],
    "benchmarks.bench_linalg.Eindot": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_linalg.Eindot.setup": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "benchmarks.bench_linalg.Eindot.time_dot_a_b": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dot",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_dot_d_dot_b_c": [
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dot",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_dot_trans_a_at": [
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dot"
    ],
    "benchmarks.bench_linalg.Eindot.time_dot_trans_a_atc": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.dot",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_dot_trans_at_a": [
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dot"
    ],
    "benchmarks.bench_linalg.Eindot.time_dot_trans_atc_a": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.dot",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_einsum_i_ij_j": [
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.einsum",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_einsum_ij_jk_a_b": [
        "numpy.ma.core.reshape",
        "numpy.einsum",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_einsum_ijk_jil_kl": [
        "numpy.ma.core.reshape",
        "numpy.einsum",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_inner_trans_a_a": [
        "numpy.inner",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_inner_trans_a_ac": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.inner",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_matmul_a_b": [
        "numpy.matmul",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_matmul_d_matmul_b_c": [
        "numpy.matmul",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_matmul_trans_a_at": [
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.matmul",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_matmul_trans_a_atc": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.matmul",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_matmul_trans_at_a": [
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.matmul",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_matmul_trans_atc_a": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.matmul",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.tensordot",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_linalg.Linalg": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_linalg.Linalg.setup": [
        "benchmarks.common.get_squares_",
        "numpy.seterr",
        "numpy.dot"
    ],
    "benchmarks.bench_linalg.Lstsq": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_linalg.Lstsq.setup": [
        "numpy.lib.user_array.container.astype",
        "benchmarks.common.get_squares_",
        "numpy.float64"
    ],
    "benchmarks.bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64": [
        "numpy.lib.user_array.container.astype",
        "benchmarks.common.get_squares_",
        "numpy.linalg.lstsq",
        "numpy.linalg.linalg.lstsq"
    ],
    "benchmarks.bench_ma.MA": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ma.MA.time_masked_array": [
        "numpy.ma.masked_array"
    ],
    "benchmarks.bench_ma.MA.time_masked_array_l100": [
        "numpy.ma.masked_array"
    ],
    "benchmarks.bench_ma.MA.time_masked_array_l100_t100": [
        "numpy.ma.masked_array"
    ],
    "benchmarks.bench_ma.Indexing": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ma.Indexing.setup": [
        "numpy.ma.core.array",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.rec.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.reshape",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_ma.Indexing.time_scalar": [
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "benchmarks.bench_ma.Indexing.time_0d": [
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "benchmarks.bench_ma.Indexing.time_1d": [
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "benchmarks.bench_ma.UFunc": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ma.UFunc.setup": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.uint8",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_ma.UFunc.time_scalar": [
        "clapack_scrub.LineQueue.add",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "numpy.f2py.func2subr.createsubrwrapper.add"
    ],
    "benchmarks.bench_ma.UFunc.time_scalar_1d": [
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.ma.core.array",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "clapack_scrub.LineQueue.add",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "benchmarks.bench_ma.UFunc.time_1d": [
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.ma.core.array",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "clapack_scrub.LineQueue.add",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "benchmarks.bench_ma.UFunc.time_2d": [
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.ma.core.reshape",
        "numpy.core.defchararray.add",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "clapack_scrub.LineQueue.add",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_ma.Concatenate": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_ma.Concatenate.setup": [
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.zeros",
        "numpy.ma.zeros",
        "numpy.matlib.zeros",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "benchmarks.bench_ma.Concatenate.time_it": [
        "numpy.ma.core.array",
        "numpy.ma.core.concatenate",
        "numpy.ma.concatenate",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.concatenate",
        "numpy.array"
    ],
    "benchmarks.bench_core.Core": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_core.Core.setup": [
        "numpy.ones",
        "numpy.arange"
    ],
    "benchmarks.bench_core.Core.time_array_1": [
        "numpy.array"
    ],
    "benchmarks.bench_core.Core.time_array_empty": [
        "numpy.array"
    ],
    "benchmarks.bench_core.Core.time_array_l1": [
        "numpy.array"
    ],
    "benchmarks.bench_core.Core.time_array_l100": [
        "numpy.array"
    ],
    "benchmarks.bench_core.Core.time_array_l": [
        "numpy.array",
        "numpy.arange"
    ],
    "benchmarks.bench_core.Core.time_vstack_l": [
        "numpy.vstack",
        "numpy.arange"
    ],
    "benchmarks.bench_core.Core.time_hstack_l": [
        "numpy.hstack",
        "numpy.arange"
    ],
    "benchmarks.bench_core.Core.time_dstack_l": [
        "numpy.dstack",
        "numpy.arange"
    ],
    "benchmarks.bench_core.Core.time_arange_100": [
        "numpy.arange"
    ],
    "benchmarks.bench_core.Core.time_zeros_100": [
        "numpy.zeros"
    ],
    "benchmarks.bench_core.Core.time_ones_100": [
        "numpy.ones"
    ],
    "benchmarks.bench_core.Core.time_empty_100": [
        "numpy.empty"
    ],
    "benchmarks.bench_core.Core.time_eye_100": [
        "numpy.eye"
    ],
    "benchmarks.bench_core.Core.time_identity_100": [
        "numpy.identity"
    ],
    "benchmarks.bench_core.Core.time_eye_3000": [
        "numpy.eye"
    ],
    "benchmarks.bench_core.Core.time_identity_3000": [
        "numpy.identity"
    ],
    "benchmarks.bench_core.Core.time_diag_l100": [
        "numpy.diag"
    ],
    "benchmarks.bench_core.Core.time_diagflat_l100": [
        "numpy.diagflat"
    ],
    "benchmarks.bench_core.Core.time_diagflat_l50_l50": [
        "numpy.diagflat"
    ],
    "benchmarks.bench_core.Core.time_triu_l10x10": [
        "numpy.triu",
        "numpy.ones"
    ],
    "benchmarks.bench_core.Core.time_tril_l10x10": [
        "numpy.ones",
        "numpy.tril"
    ],
    "benchmarks.bench_core.Temporaries": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_core.Temporaries.setup": [
        "numpy.ones"
    ],
    "benchmarks.bench_core.Temporaries.time_mid": [
        "numpy.ones"
    ],
    "benchmarks.bench_core.Temporaries.time_mid2": [
        "numpy.ones"
    ],
    "benchmarks.bench_core.Temporaries.time_large": [
        "numpy.ones"
    ],
    "benchmarks.bench_core.Temporaries.time_large2": [
        "numpy.ones"
    ],
    "benchmarks.bench_core.CorrConv": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_core.CorrConv.setup": [
        "numpy.linspace",
        "numpy.cos"
    ],
    "benchmarks.bench_core.CorrConv.time_correlate": [
        "numpy.correlate",
        "numpy.linspace",
        "numpy.cos"
    ],
    "benchmarks.bench_core.CorrConv.time_convolve": [
        "numpy.linspace",
        "numpy.cos",
        "numpy.convolve"
    ],
    "benchmarks.bench_core.CountNonzero": [
        "numpy.int",
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_core.CountNonzero.setup": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_core.CountNonzero.time_count_nonzero": [
        "numpy.lib.user_array.container.astype",
        "numpy.count_nonzero"
    ],
    "benchmarks.bench_core.CountNonzero.time_count_nonzero_axis": [
        "numpy.lib.user_array.container.astype",
        "numpy.count_nonzero",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "benchmarks.bench_core.CountNonzero.time_count_nonzero_multi_axis": [
        "numpy.lib.user_array.container.astype",
        "numpy.count_nonzero",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "benchmarks.bench_core.PackBits": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_core.PackBits.setup": [
        "numpy.ones"
    ],
    "benchmarks.bench_core.PackBits.time_packbits": [
        "numpy.ones",
        "numpy.packbits"
    ],
    "benchmarks.bench_core.PackBits.time_packbits_axis0": [
        "numpy.ones",
        "numpy.packbits"
    ],
    "benchmarks.bench_core.PackBits.time_packbits_axis1": [
        "numpy.ones",
        "numpy.packbits"
    ],
    "benchmarks.bench_core.UnpackBits": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_core.UnpackBits.setup": [
        "numpy.ones",
        "numpy.uint8"
    ],
    "benchmarks.bench_core.UnpackBits.time_unpackbits": [
        "numpy.unpackbits",
        "numpy.ones"
    ],
    "benchmarks.bench_core.UnpackBits.time_unpackbits_axis0": [
        "numpy.unpackbits",
        "numpy.ones"
    ],
    "benchmarks.bench_core.UnpackBits.time_unpackbits_axis1": [
        "numpy.unpackbits",
        "numpy.ones"
    ],
    "benchmarks.bench_core.Indices": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_core.Indices.time_indices": [
        "numpy.indices"
    ],
    "benchmarks.common.memoize.wrapper": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "benchmarks.common.memoize": [
        "benchmarks.common.memoize.wrapper"
    ],
    "benchmarks.common.get_values": [
        "numpy.tile",
        "numpy.random.uniform",
        "numpy.random.RandomState"
    ],
    "benchmarks.common.get_squares": [
        "benchmarks.common.get_values"
    ],
    "benchmarks.common.get_indexes": [
        "numpy.array"
    ],
    "benchmarks.common.get_indexes_rand": [
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.array"
    ],
    "benchmarks.common.get_indexes_": [
        "benchmarks.common.get_indexes"
    ],
    "benchmarks.common.get_indexes_rand_": [
        "benchmarks.common.get_indexes_rand"
    ],
    "benchmarks.bench_lib.Pad": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_lib.Pad.setup": [
        "numpy.empty"
    ],
    "benchmarks.bench_lib.Pad.time_pad": [
        "numpy.pad",
        "numpy.empty"
    ],
    "benchmarks.bench_io.Copy": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_io.Copy.setup": [
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.dtype",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_io.Copy.time_memcpy": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_io.Copy.time_cont_assign": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "benchmarks.bench_io.Copy.time_strided_copy": [
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape"
    ],
    "benchmarks.bench_io.Copy.time_strided_assign": [
        "numpy.arange"
    ],
    "benchmarks.bench_io.CopyTo": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_io.CopyTo.setup": [
        "numpy.ones"
    ],
    "benchmarks.bench_io.CopyTo.time_copyto": [
        "numpy.ones",
        "numpy.copyto"
    ],
    "benchmarks.bench_io.CopyTo.time_copyto_sparse": [
        "numpy.ones",
        "numpy.copyto"
    ],
    "benchmarks.bench_io.CopyTo.time_copyto_dense": [
        "numpy.ones",
        "numpy.copyto"
    ],
    "benchmarks.bench_io.CopyTo.time_copyto_8_sparse": [
        "numpy.ones",
        "numpy.copyto"
    ],
    "benchmarks.bench_io.CopyTo.time_copyto_8_dense": [
        "numpy.ones",
        "numpy.copyto"
    ],
    "benchmarks.bench_io.Savez": [
        "benchmarks.common.Benchmark"
    ],
    "benchmarks.bench_io.Savez.setup": [
        "benchmarks.common.get_squares"
    ],
    "benchmarks.bench_io.Savez.time_vb_savez_squares": [
        "benchmarks.common.get_squares",
        "numpy.savez"
    ],
    "numpy.ctypeslib.load_library": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.get_shared_lib_extension",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.misc_util",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.ctypeslib._flags_fromnum": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ctypeslib._ndptr._check_retval_": [
        "numpy.array"
    ],
    "numpy.ctypeslib._ndptr.from_param": [
        "numpy.ndarray",
        "numpy.ctypeslib._flags_fromnum"
    ],
    "numpy.ctypeslib.ndpointer": [
        "numpy.int",
        "numpy.ctypeslib._num_fromflags",
        "numpy.ctypeslib._flags_fromnum",
        "numpy.ctypeslib._ndptr",
        "numpy.dtype"
    ],
    "numpy.ctypeslib.prep_simple": [
        "numpy.ctypeslib.prep_simple.__array_interface__"
    ],
    "numpy.ctypeslib.prep_array": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__array_interface__",
        "numpy.ctypeslib._ndptr.__array_interface__",
        "numpy.ctypeslib.prep_simple.__array_interface__",
        "numpy.ctypeslib.prep_array.__array_interface__",
        "numpy.shape",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__array_interface__",
        "numpy.ma.append",
        "numpy.lib.function_base.append",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__array_interface__",
        "numpy.ma.core.shape",
        "numpy.append",
        "numpy.ma.core.append"
    ],
    "numpy.ctypeslib.prep_array.__array_interface__": [
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__array_interface__",
        "numpy.ctypeslib.prep_simple.__array_interface__",
        "numpy.ctypeslib.prep_array.__array_interface__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__array_interface__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__array_interface__",
        "numpy.ctypeslib._ndptr.__array_interface__"
    ],
    "numpy.ctypeslib.prep_pointer": [
        "numpy.dtype"
    ],
    "numpy.ctypeslib.as_array": [
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__array_interface__",
        "numpy.ctypeslib.prep_array",
        "numpy.ctypeslib.prep_simple.__array_interface__",
        "numpy.ctypeslib.prep_pointer",
        "numpy.ctypeslib.prep_array.__array_interface__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__array_interface__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__array_interface__",
        "numpy.ctypeslib._ndptr.__array_interface__",
        "numpy.array"
    ],
    "numpy.matlib.empty": [
        "numpy._globals._NoValueType.__new__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.matrixlib.defmatrix.matrix",
        "numpy.ma.MaskedArray.__new__",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.core.memmap.memmap.__new__"
    ],
    "numpy.matlib.ones": [
        "numpy._globals._NoValueType.__new__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.matrixlib.defmatrix.matrix",
        "numpy.ma.MaskedArray.__new__",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.core.memmap.memmap.__new__"
    ],
    "numpy.matlib.zeros": [
        "numpy._globals._NoValueType.__new__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.matrixlib.defmatrix.matrix",
        "numpy.ma.MaskedArray.__new__",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.core.memmap.memmap.__new__"
    ],
    "numpy.matlib.identity": [
        "numpy.matlib.empty",
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "numpy.matlib.eye": [
        "numpy.matrixlib.defmatrix.asmatrix",
        "numpy.eye"
    ],
    "numpy.matlib.rand": [
        "numpy.matlib.rand",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.utils.rand",
        "numpy.matrixlib.defmatrix.asmatrix",
        "numpy.random.rand"
    ],
    "numpy.matlib.randn": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.matlib.randn",
        "numpy.matrixlib.defmatrix.asmatrix",
        "numpy.random.randn"
    ],
    "numpy.matlib.repmat": [
        "numpy.core.numeric.asanyarray",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.repeat",
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.repeat",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.asanyarray",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.asanyarray",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.conftest.check_fpu_mode": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.conftest.add_np": [
        "numpy"
    ],
    "numpy._globals._NoValueType.__new__": [
        "numpy._globals._NoValueType"
    ],
    "numpy.pkgload": [
        "numpy.testing._private.noseclasses.Unplugger.options",
        "numpy.testing._private.noseclasses.NumpyDoctest.options",
        "numpy.testing._private.noseclasses.KnownFailurePlugin.options",
        "numpy._import_tools.PackageLoader",
        "numpy._import_tools.PackageLoader.__init__"
    ],
    "numpy._import_tools.PackageLoader._get_info_files": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.append",
        "numpy._import_tools.PackageLoader._get_info_files",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy._import_tools.PackageLoader._init_info_modules": [
        "numpy.info",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy._import_tools.PackageLoader._get_info_files",
        "numpy._import_tools.PackageLoader._init_info_modules",
        "numpy.lib.utils.info",
        "numpy._import_tools.PackageLoader.error",
        "numpy._import_tools.PackageLoader.warn"
    ],
    "numpy._import_tools.PackageLoader._get_sorted_names": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy._import_tools.PackageLoader.__call__": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.append",
        "numpy._import_tools.PackageLoader._obj2repr",
        "numpy.append",
        "numpy._import_tools.PackageLoader._init_info_modules",
        "numpy._import_tools.PackageLoader._get_sorted_names",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy._import_tools.PackageLoader.warn",
        "numpy.ma.core.append",
        "numpy._import_tools.PackageLoader.log",
        "numpy._import_tools.PackageLoader._execcmd"
    ],
    "numpy._import_tools.PackageLoader._execcmd": [
        "numpy._import_tools.PackageLoader.log",
        "numpy._import_tools.PackageLoader.error"
    ],
    "numpy._import_tools.PackageLoader.log": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy._import_tools.PackageLoader.warn": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy._import_tools.PackageLoader.error": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy._import_tools.PackageLoader._get_doc_title": [
        "numpy.core.defchararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.core.defchararray.chararray.split"
    ],
    "numpy._import_tools.PackageLoader._format_titles": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.append",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy._import_tools.PackageLoader.get_pkgdocs": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.ma.append",
        "numpy._import_tools.PackageLoader._format_titles",
        "numpy.append",
        "numpy._import_tools.PackageLoader._init_info_modules",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy._import_tools.PackageLoader._get_doc_title"
    ],
    "numpy._import_tools.PackageLoaderDebug": [
        "numpy._import_tools.PackageLoader"
    ],
    "numpy._import_tools.PackageLoaderDebug._execcmd": [
        "numpy.distutils.command.config.GrabStdout.flush",
        "numpy.core.memmap.memmap.flush"
    ],
    "numpy.dual.restore_all": [
        "numpy.dual.restore_func",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util.Configuration.make_config_py",
        "numpy.distutils.misc_util.Configuration.add_subpackage",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.fft.fftpack._raw_fft": [
        "numpy.fft.helper._FFTCache"
    ],
    "numpy.fft.fftpack.fft": [
        "numpy.core.fromnumeric.shape",
        "numpy.fft.fftpack._raw_fft",
        "numpy.fft.helper._FFTCache",
        "numpy.fft.fftpack._unitary",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype"
    ],
    "numpy.fft.fftpack.ifft": [
        "numpy.fft.fftpack._raw_fft",
        "numpy.fft.helper._FFTCache",
        "numpy.fft.fftpack._unitary"
    ],
    "numpy.fft.fftpack.rfft": [
        "numpy.fft.fftpack._raw_fft",
        "numpy.fft.helper._FFTCache",
        "numpy.fft.fftpack._unitary"
    ],
    "numpy.fft.fftpack.irfft": [
        "numpy.fft.fftpack._raw_fft",
        "numpy.fft.helper._FFTCache",
        "numpy.fft.fftpack._unitary"
    ],
    "numpy.fft.fftpack.hfft": [
        "numpy.fft.fftpack.irfft",
        "numpy.fft.fftpack._unitary"
    ],
    "numpy.fft.fftpack.ihfft": [
        "numpy.fft.fftpack._unitary",
        "numpy.fft.fftpack.rfft"
    ],
    "numpy.fft.fftpack._raw_fftnd": [
        "numpy.fft.fftpack.fft",
        "numpy.fft.fftpack._cook_nd_args"
    ],
    "numpy.fft.fftpack.fftn": [
        "numpy.fft.fftpack.fft",
        "numpy.fft.fftpack._raw_fftnd"
    ],
    "numpy.fft.fftpack.ifftn": [
        "numpy.fft.fftpack._raw_fftnd",
        "numpy.fft.fftpack.ifft"
    ],
    "numpy.fft.fftpack.fft2": [
        "numpy.fft.fftpack.fft",
        "numpy.fft.fftpack._raw_fftnd"
    ],
    "numpy.fft.fftpack.ifft2": [
        "numpy.fft.fftpack._raw_fftnd",
        "numpy.fft.fftpack.ifft"
    ],
    "numpy.fft.fftpack.rfftn": [
        "numpy.fft.fftpack.fft",
        "numpy.fft.fftpack._cook_nd_args",
        "numpy.fft.fftpack.rfft"
    ],
    "numpy.fft.fftpack.rfft2": [
        "numpy.fft.fftpack.rfftn"
    ],
    "numpy.fft.fftpack.irfftn": [
        "numpy.fft.fftpack.irfft",
        "numpy.fft.fftpack.ifft",
        "numpy.fft.fftpack._cook_nd_args"
    ],
    "numpy.fft.fftpack.irfft2": [
        "numpy.fft.fftpack.irfftn"
    ],
    "numpy.fft.helper.fftfreq": [
        "numpy.int"
    ],
    "numpy.fft.helper.rfftfreq": [
        "numpy.int"
    ],
    "numpy.fft.helper._FFTCache.put_twiddle_factors": [
        "numpy.fft.helper._FFTCache._prune_cache"
    ],
    "numpy.fft.helper._FFTCache._prune_cache": [
        "numpy.fft.helper._FFTCache._check_size"
    ],
    "numpy.fft.helper._FFTCache._check_size": [
        "numpy.ndarray.sum",
        "numpy.ma.core.MaskedArray.max",
        "numpy.sum",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.sum",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.fft.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util.Configuration.add_extension",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.fft.tests.test_fftpack.fft1": [
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.exp",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.fft.tests.test_fftpack.TestFFTShift.test_fft_n": [
        "numpy.fft.fftpack.fft",
        "numpy.fft.fft"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_fft": [
        "numpy.fft.fftpack.fft",
        "numpy.sqrt",
        "numpy.fft.fft",
        "numpy.random.random",
        "numpy.fft.tests.test_fftpack.fft1"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_ifft": [
        "numpy.fft.fftpack.fft",
        "numpy.fft.fftpack.ifft",
        "numpy.fft.ifft",
        "numpy.fft.fft",
        "numpy.random.random"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_fft2": [
        "numpy.fft.fftpack.fft",
        "numpy.sqrt",
        "numpy.fft.fft",
        "numpy.random.random",
        "numpy.fft.fftpack.fft2",
        "numpy.fft.fft2"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_ifft2": [
        "numpy.sqrt",
        "numpy.fft.fftpack.ifft",
        "numpy.fft.ifft",
        "numpy.fft.ifft2",
        "numpy.fft.fftpack.ifft2",
        "numpy.random.random"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_fftn": [
        "numpy.fft.fftpack.fft",
        "numpy.sqrt",
        "numpy.fft.fftpack.fftn",
        "numpy.fft.fft",
        "numpy.random.random",
        "numpy.fft.fftn"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_ifftn": [
        "numpy.fft.fftpack.ifftn",
        "numpy.sqrt",
        "numpy.fft.fftpack.ifft",
        "numpy.fft.ifft",
        "numpy.random.random",
        "numpy.fft.ifftn"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_rfft": [
        "numpy.fft.fftpack.fft",
        "numpy.sqrt",
        "numpy.linalg.norm",
        "numpy.linalg.linalg.norm",
        "numpy.fft.fft",
        "numpy.random.random",
        "numpy.fft.fftpack.rfft",
        "numpy.fft.rfft"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_irfft": [
        "numpy.fft.fftpack.irfft",
        "numpy.fft.irfft",
        "numpy.random.random",
        "numpy.fft.fftpack.rfft",
        "numpy.fft.rfft"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_rfft2": [
        "numpy.sqrt",
        "numpy.fft.fftpack.rfft2",
        "numpy.fft.rfft2",
        "numpy.random.random",
        "numpy.fft.fftpack.fft2",
        "numpy.fft.fft2"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_irfft2": [
        "numpy.fft.irfft2",
        "numpy.fft.fftpack.rfft2",
        "numpy.fft.rfft2",
        "numpy.random.random",
        "numpy.fft.fftpack.irfft2"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_rfftn": [
        "numpy.fft.fftpack.rfftn",
        "numpy.sqrt",
        "numpy.fft.fftpack.fftn",
        "numpy.random.random",
        "numpy.fft.rfftn",
        "numpy.fft.fftn"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_irfftn": [
        "numpy.fft.fftpack.rfftn",
        "numpy.fft.irfftn",
        "numpy.fft.fftpack.irfftn",
        "numpy.random.random",
        "numpy.fft.rfftn"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_hfft": [
        "numpy.fft.fftpack.fft",
        "numpy.sqrt",
        "numpy.fft.hfft",
        "numpy.fft.fftpack.hfft",
        "numpy.conj",
        "numpy.fft.fft",
        "numpy.random.random",
        "numpy.concatenate"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_ihttf": [
        "numpy.fft.ihfft",
        "numpy.fft.hfft",
        "numpy.fft.fftpack.hfft",
        "numpy.conj",
        "numpy.random.random",
        "numpy.concatenate",
        "numpy.fft.fftpack.ihfft"
    ],
    "numpy.fft.tests.test_fftpack.TestFFT1D.test_all_1d_norm_preserving": [
        "numpy.linalg.norm",
        "numpy.fft.ihfft",
        "numpy.fft.hfft",
        "numpy.random.random",
        "numpy.fft.rfft",
        "numpy.fft.irfft",
        "numpy.fft.fftpack.fft",
        "numpy.fft.fftpack.ifft",
        "numpy.fft.fftpack.rfft",
        "numpy.fft.fftpack.irfft",
        "numpy.fft.fftpack.hfft",
        "numpy.linalg.linalg.norm",
        "numpy.fft.ifft",
        "numpy.fft.fft",
        "numpy.fft.fftpack.ihfft"
    ],
    "numpy.fft.tests.test_fftpack.TestFFTThreadSafe._test_mtsame": [
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_fft": [
        "numpy.fft.fftpack.fft",
        "numpy.ones",
        "numpy.fft.tests.test_fftpack.TestFFTThreadSafe._test_mtsame",
        "numpy.fft.fft"
    ],
    "numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_ifft": [
        "numpy.fft.fftpack.ifft",
        "numpy.ones",
        "numpy.fft.tests.test_fftpack.TestFFTThreadSafe._test_mtsame",
        "numpy.fft.ifft"
    ],
    "numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_rfft": [
        "numpy.ones",
        "numpy.fft.tests.test_fftpack.TestFFTThreadSafe._test_mtsame",
        "numpy.fft.fftpack.rfft",
        "numpy.fft.rfft"
    ],
    "numpy.fft.tests.test_fftpack.TestFFTThreadSafe.test_irfft": [
        "numpy.fft.fftpack.irfft",
        "numpy.ones",
        "numpy.fft.tests.test_fftpack.TestFFTThreadSafe._test_mtsame",
        "numpy.fft.irfft"
    ],
    "numpy.fft.tests.test_helper.TestFFTShift.test_definition": [
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.fft.tests.test_helper.TestFFTShift.test_inverse": [
        "numpy.random.random"
    ],
    "numpy.fft.tests.test_helper.TestFFTShift.test_equal_to_original": [
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.testing._private.utils.rand",
        "numpy.fft.tests.test_helper.TestFFTShift.test_equal_to_original.original_fftshift",
        "numpy.core",
        "numpy.fft.tests.test_helper.TestFFTShift.test_equal_to_original.original_ifftshift"
    ],
    "numpy.fft.tests.test_helper.TestFFTFreq.test_definition": [
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.fft.tests.test_helper.TestRFFTFreq.test_definition": [
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.fft.tests.test_helper.TestIRFFTN.test_not_last_axis_success": [
        "numpy.fft.irfftn",
        "numpy.random.random"
    ],
    "numpy.fft.tests.test_helper.TestFFTCache.test_basic_behaviour": [
        "numpy.zeros",
        "numpy.fft.helper._FFTCache.put_twiddle_factors",
        "numpy.float32",
        "numpy.fft.helper._FFTCache",
        "numpy.fft.helper._FFTCache.pop_twiddle_factors",
        "numpy.ones",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.testing.assert_equal"
    ],
    "numpy.fft.tests.test_helper.TestFFTCache.test_automatic_pruning": [
        "numpy.fft.helper._FFTCache.put_twiddle_factors",
        "numpy.float32",
        "numpy.fft.helper._FFTCache",
        "numpy.ones",
        "numpy.testing.assert_equal",
        "numpy.empty",
        "numpy.fft.helper._FFTCache.__init__"
    ],
    "numpy.distutils.lib2def.getnm": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read"
    ],
    "numpy.distutils.lib2def.parse_nm": [
        "numpy.distutils.lib2def.parse_nm"
    ],
    "numpy.distutils.misc_util.get_num_build_jobs": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.distutils.core",
        "numpy.distutils.core.get_distribution",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.core.fromnumeric.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.core.MaskedArray.all",
        "numpy.core.getlimits.iinfo.max",
        "numpy.int",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.all"
    ],
    "numpy.distutils.misc_util.allpath": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.distutils.misc_util.rel_path": [
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.distutils.misc_util.get_path_from_frame": [
        "numpy.distutils.misc_util.rel_path",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.distutils.misc_util.njoin": [
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.distutils.misc_util.is_string",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.misc_util.minrelpath",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.get_mathlibs": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.distutils.misc_util.get_numpy_include_dirs",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib._datasource.open",
        "numpy.char.join"
    ],
    "numpy.distutils.misc_util.minrelpath": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.is_string",
        "numpy.char.join"
    ],
    "numpy.distutils.misc_util._fix_paths": [
        "numpy.distutils.misc_util.is_string",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.misc_util._fix_paths",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.gpaths": [
        "numpy.distutils.misc_util._fix_paths",
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.misc_util.make_temp_file": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.colour_text": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.default_text": [
        "numpy.distutils.misc_util.colour_text"
    ],
    "numpy.distutils.misc_util.red_text": [
        "numpy.distutils.misc_util.colour_text"
    ],
    "numpy.distutils.misc_util.green_text": [
        "numpy.distutils.misc_util.colour_text"
    ],
    "numpy.distutils.misc_util.yellow_text": [
        "numpy.distutils.misc_util.colour_text"
    ],
    "numpy.distutils.misc_util.cyan_text": [
        "numpy.distutils.misc_util.colour_text"
    ],
    "numpy.distutils.misc_util.blue_text": [
        "numpy.distutils.misc_util.colour_text"
    ],
    "numpy.distutils.misc_util.mingw32": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.misc_util.msvc_runtime_version": [
        "numpy.int",
        "numpy.core.defchararray.chararray.find",
        "numpy.core.defchararray.find"
    ],
    "numpy.distutils.misc_util.msvc_runtime_library": [
        "numpy.distutils.misc_util.msvc_runtime_major"
    ],
    "numpy.distutils.misc_util.msvc_runtime_major": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.distutils.misc_util.msvc_runtime_version"
    ],
    "numpy.distutils.misc_util._get_f90_modules": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.all_strings": [
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.misc_util.is_sequence": [
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.misc_util.is_glob_pattern": [
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.misc_util.as_list": [
        "numpy.distutils.misc_util.is_sequence"
    ],
    "numpy.distutils.misc_util.filter_sources": [
        "numpy.distutils.misc_util._get_f90_modules",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util._get_headers": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.distutils.misc_util._get_directories": [
        "numpy.core.defchararray.split",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.get_dependencies": [
        "numpy.distutils.misc_util._get_headers",
        "numpy.distutils.misc_util._get_directories"
    ],
    "numpy.distutils.misc_util.is_local_src_dir": [
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.distutils.misc_util.is_string",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.char.join"
    ],
    "numpy.distutils.misc_util.general_source_files": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.distutils.misc_util.general_source_directories_files": [
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.rel_path",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.get_ext_source_files": [
        "numpy.distutils.misc_util.get_dependencies",
        "numpy.distutils.misc_util.is_local_src_dir",
        "numpy.distutils.misc_util.general_source_files",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.get_lib_source_files": [
        "numpy.distutils.misc_util.get_dependencies",
        "numpy.distutils.misc_util.is_local_src_dir",
        "numpy.distutils.misc_util.general_source_files",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.get_shared_lib_extension": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.startswith",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.misc_util.get_data_files": [
        "numpy.distutils.misc_util.is_local_src_dir",
        "numpy.distutils.misc_util.general_source_files",
        "numpy.distutils.misc_util.is_string",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.Configuration.__init__": [
        "numpy.distutils.misc_util.Configuration.set_options",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.distutils.misc_util.dot_join",
        "numpy.distutils.misc_util.get_frame",
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.as_list",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.testing._private.noseclasses.NumpyDoctest.options",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.testing._private.noseclasses.Unplugger.options",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.testing._private.noseclasses.KnownFailurePlugin.options",
        "numpy.char.join",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.misc_util.Configuration.todict": [
        "numpy.distutils.misc_util.Configuration._optimize_data_files"
    ],
    "numpy.distutils.misc_util.Configuration.warn": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.misc_util.Configuration.set_options": [
        "numpy.lib.npyio.NpzFile.items"
    ],
    "numpy.distutils.misc_util.Configuration.get_distribution": [
        "numpy.distutils.core",
        "numpy.distutils.core.get_distribution"
    ],
    "numpy.distutils.misc_util.Configuration._wildcard_get_subpackage": [
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.Configuration.get_subpackage",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split"
    ],
    "numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py": [
        "numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py.fix_args_py2",
        "numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py.fix_args_py3",
        "numpy.lib.function_base.insert",
        "numpy.insert",
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.distutils.misc_util.Configuration.warn",
        "numpy.distutils.misc_util.dot_join",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py.fix_args_py2": [
        "numpy.distutils.misc_util.get_path_from_frame"
    ],
    "numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py.fix_args_py3": [
        "numpy.distutils.misc_util.get_path_from_frame"
    ],
    "numpy.distutils.misc_util.Configuration.get_subpackage": [
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.Configuration.warn",
        "numpy.distutils.misc_util.Configuration._wildcard_get_subpackage",
        "numpy.distutils.misc_util.Configuration._get_configuration_from_setup_py",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split"
    ],
    "numpy.distutils.misc_util.Configuration.add_subpackage": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.misc_util.Configuration.dict_append",
        "numpy.distutils.misc_util.Configuration.warn",
        "numpy.distutils.misc_util.Configuration.get_distribution",
        "numpy.distutils.misc_util.dot_join",
        "numpy.distutils.misc_util.Configuration.get_subpackage"
    ],
    "numpy.distutils.misc_util.Configuration.add_data_dir": [
        "numpy.distutils.misc_util.general_source_directories_files",
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.rel_path",
        "numpy.distutils.misc_util.is_string",
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.misc_util.Configuration.warn",
        "numpy.distutils.misc_util.is_glob_pattern",
        "numpy.distutils.misc_util.Configuration.get_distribution",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.Configuration._optimize_data_files": [
        "clapack_scrub.LineQueue.add",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.add",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.core.defchararray.add"
    ],
    "numpy.distutils.misc_util.Configuration.add_data_files": [
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.is_string",
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.misc_util.is_glob_pattern",
        "numpy.distutils.misc_util.Configuration.get_distribution",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.Configuration.add_define_macros": [
        "numpy.distutils.misc_util.Configuration.get_distribution"
    ],
    "numpy.distutils.misc_util.Configuration.add_include_dirs": [
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.distutils.misc_util.Configuration.get_distribution"
    ],
    "numpy.distutils.misc_util.Configuration.add_headers": [
        "numpy.distutils.misc_util.is_string",
        "numpy.distutils.misc_util.Configuration.get_distribution"
    ],
    "numpy.distutils.misc_util.Configuration.paths": [
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.distutils.misc_util.gpaths"
    ],
    "numpy.distutils.misc_util.Configuration._fix_paths_dict": [
        "numpy.distutils.misc_util.Configuration.paths"
    ],
    "numpy.distutils.misc_util.Configuration.add_extension": [
        "numpy.distutils.misc_util.Configuration.dict_append",
        "numpy.distutils.misc_util.Configuration._fix_paths_dict",
        "numpy.distutils.misc_util.dot_join",
        "numpy.distutils.core",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.Configuration.warn",
        "numpy.distutils.misc_util.Configuration.get_distribution",
        "numpy.distutils.misc_util.Configuration.get_subpackage",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.Configuration.add_library": [
        "numpy.distutils.misc_util.Configuration._add_library",
        "numpy.distutils.misc_util.Configuration.get_distribution",
        "numpy.distutils.misc_util.Configuration.warn"
    ],
    "numpy.distutils.misc_util.Configuration._add_library": [
        "numpy.distutils.misc_util.Configuration._fix_paths_dict",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.Configuration.add_installed_library": [
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.InstallableLib",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.distutils.misc_util.Configuration._add_library",
        "numpy.distutils.misc_util.njoin",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config": [
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.dot_join",
        "numpy.distutils.misc_util.njoin",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.misc_util.Configuration.add_scripts": [
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.distutils.misc_util.Configuration.get_distribution"
    ],
    "numpy.distutils.misc_util.Configuration.dict_append": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.misc_util.Configuration.warn",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.misc_util.Configuration.__str__": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.sort",
        "numpy.distutils.misc_util.dot_join"
    ],
    "numpy.distutils.misc_util.Configuration.get_config_cmd": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.misc_util.get_cmd"
    ],
    "numpy.distutils.misc_util.Configuration.get_build_temp_dir": [
        "numpy.distutils.misc_util.get_cmd"
    ],
    "numpy.distutils.misc_util.Configuration.have_f77c": [
        "numpy.distutils.misc_util.Configuration.get_config_cmd"
    ],
    "numpy.distutils.misc_util.Configuration.have_f90c": [
        "numpy.distutils.misc_util.Configuration.get_config_cmd"
    ],
    "numpy.distutils.misc_util.Configuration.append_to": [
        "numpy.distutils.misc_util.Configuration.dict_append",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.core"
    ],
    "numpy.distutils.misc_util.Configuration._get_svn_revision": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.distutils.misc_util.njoin",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.int",
        "numpy.lib._datasource.open",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.misc_util.Configuration._get_hg_revision": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.njoin",
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.int",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib._datasource.open",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.misc_util.Configuration.get_version": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.distutils.misc_util.Configuration._get_svn_revision",
        "numpy.distutils.misc_util.Configuration._get_hg_revision",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.Configuration.warn",
        "numpy.distutils.compat.get_exception",
        "numpy.distutils.misc_util.dot_join"
    ],
    "numpy.distutils.misc_util.Configuration.make_svn_version_py": [
        "numpy.distutils.misc_util.Configuration._get_svn_revision",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.distutils.misc_util.Configuration.make_svn_version_py.generate_svn_version_py",
        "numpy.distutils.misc_util.get_path_from_frame"
    ],
    "numpy.distutils.misc_util.Configuration.make_svn_version_py.generate_svn_version_py": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.distutils.misc_util.Configuration._get_svn_revision",
        "numpy.distutils.misc_util.njoin",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.misc_util.Configuration.make_svn_version_py.generate_svn_version_py.rm_file",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.misc_util.Configuration.make_svn_version_py.generate_svn_version_py.rm_file": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.misc_util.njoin"
    ],
    "numpy.distutils.misc_util.Configuration.make_hg_version_py": [
        "numpy.distutils.misc_util.Configuration._get_hg_revision",
        "numpy.distutils.misc_util.njoin",
        "numpy.distutils.misc_util.Configuration.make_hg_version_py.generate_hg_version_py",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.distutils.misc_util.get_path_from_frame"
    ],
    "numpy.distutils.misc_util.Configuration.make_hg_version_py.generate_hg_version_py": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.distutils.misc_util.Configuration._get_hg_revision",
        "numpy.distutils.misc_util.njoin",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.misc_util.Configuration.make_hg_version_py.generate_hg_version_py.rm_file",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.misc_util.Configuration.make_hg_version_py.generate_hg_version_py.rm_file": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.misc_util.njoin"
    ],
    "numpy.distutils.misc_util.Configuration.make_config_py": [
        "numpy.distutils.misc_util.dot_join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.distutils.misc_util.generate_config_py"
    ],
    "numpy.distutils.misc_util.Configuration.get_info": [
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.system_info.dict_append"
    ],
    "numpy.distutils.misc_util.get_numpy_include_dirs": [
        "numpy.get_include",
        "numpy"
    ],
    "numpy.distutils.misc_util.get_npy_pkg_dir": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy"
    ],
    "numpy.distutils.misc_util.get_pkg_info": [
        "numpy.distutils.npy_pkg_config.read_config",
        "numpy.distutils.misc_util.get_npy_pkg_dir",
        "numpy.distutils.npy_pkg_config"
    ],
    "numpy.distutils.misc_util.get_info": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.distutils.misc_util.get_pkg_info",
        "numpy.distutils.npy_pkg_config",
        "numpy.distutils.npy_pkg_config.parse_flags"
    ],
    "numpy.distutils.misc_util.default_config_dict": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.misc_util.Configuration.todict"
    ],
    "numpy.distutils.misc_util.dict_append": [
        "numpy.lib.npyio.NpzFile.items"
    ],
    "numpy.distutils.misc_util.appendpath": [
        "cythonize.normpath",
        "numpy.distutils.misc_util.njoin",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.distutils.misc_util.generate_config_py": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.distutils.system_info",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpy.distutils.intelccompiler.IntelCCompiler.__init__": [
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.distutils.misc_util.Configuration.get_version"
    ],
    "numpy.distutils.intelccompiler.IntelItaniumCCompiler": [
        "numpy.distutils.exec_command.find_executable",
        "numpy.distutils.intelccompiler.IntelCCompiler"
    ],
    "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__": [
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.distutils.misc_util.Configuration.get_version"
    ],
    "numpy.distutils.intelccompiler.IntelCCompilerW": [
        "numpy.distutils.msvc9compiler.MSVCCompiler"
    ],
    "numpy.distutils.intelccompiler.IntelCCompilerW.__init__": [
        "numpy.distutils.ccompiler.simple_version_match",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__"
    ],
    "numpy.distutils.intelccompiler.IntelCCompilerW.initialize": [
        "numpy.distutils.msvc9compiler.MSVCCompiler.initialize"
    ],
    "numpy.distutils.intelccompiler.IntelEM64TCCompilerW": [
        "numpy.distutils.intelccompiler.IntelCCompilerW"
    ],
    "numpy.distutils.intelccompiler.IntelEM64TCCompilerW.__init__": [
        "numpy.distutils.ccompiler.simple_version_match",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__"
    ],
    "numpy.distutils.exec_command.temp_file_name": [
        "numpy.distutils.misc_util.make_temp_file"
    ],
    "numpy.distutils.exec_command.get_pythonexe": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.split",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.char.join"
    ],
    "numpy.distutils.exec_command.find_executable": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.lower",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.lower",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.char.join"
    ],
    "numpy.distutils.exec_command._preserve_environment": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.exec_command._update_environment": [
        "numpy.lib.npyio.NpzFile.items"
    ],
    "numpy.distutils.exec_command.exec_command": [
        "numpy.distutils.exec_command._preserve_environment",
        "numpy.distutils.exec_command._update_environment",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.distutils.exec_command._exec_command",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.exec_command._exec_command": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.from_template.parse_structure": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.from_template.find_repl_patterns": [
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.strip",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.strip",
        "numpy.distutils.from_template.conv",
        "numpy.distutils.from_template.unique_key"
    ],
    "numpy.distutils.from_template.find_and_remove_repl_patterns": [
        "numpy.distutils.from_template.find_repl_patterns"
    ],
    "numpy.distutils.from_template.conv": [
        "numpy.int"
    ],
    "numpy.distutils.from_template.expand_sub": [
        "numpy.distutils.from_template.expand_sub.listrepl",
        "numpy.distutils.from_template.expand_sub.namerepl",
        "*.rules",
        "numpy.distutils.from_template.find_repl_patterns"
    ],
    "numpy.distutils.from_template.expand_sub.listrepl": [
        "numpy.distutils.from_template.unique_key",
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.replace",
        "numpy.distutils.from_template.find_repl_patterns",
        "numpy.distutils.from_template.conv",
        "numpy.core.defchararray.replace"
    ],
    "numpy.distutils.from_template.expand_sub.namerepl": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.from_template.process_str": [
        "numpy.distutils.from_template.expand_sub",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.distutils.from_template.parse_structure",
        "numpy.distutils.from_template.find_repl_patterns",
        "numpy.distutils.from_template.find_and_remove_repl_patterns"
    ],
    "numpy.distutils.from_template.resolve_includes": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.distutils.from_template.resolve_includes",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.from_template.process_file": [
        "numpy.distutils.from_template.process_str",
        "numpy.distutils.from_template.resolve_includes"
    ],
    "numpy.distutils.from_template.main": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.distutils.from_template.process_str",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.system_info.add_system_root": [
        "cythonize.normpath"
    ],
    "numpy.distutils.system_info.get_standard_file": [
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.get_info": [
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.system_info.system_info",
        "numpy.distutils.system_info.system_info.get_info",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.misc_util.get_info",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.distutils.misc_util.Configuration.get_info"
    ],
    "numpy.distutils.system_info.AtlasNotFoundError": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.LapackNotFoundError": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.LapackSrcNotFoundError": [
        "numpy.distutils.system_info.LapackNotFoundError"
    ],
    "numpy.distutils.system_info.BlasNotFoundError": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.BlasSrcNotFoundError": [
        "numpy.distutils.system_info.BlasNotFoundError"
    ],
    "numpy.distutils.system_info.FFTWNotFoundError": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.DJBFFTNotFoundError": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.NumericNotFoundError": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.X11NotFoundError": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.UmfpackNotFoundError": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.system_info": [
        "numpy.distutils.system_info.NotFoundError"
    ],
    "numpy.distutils.system_info.system_info.__init__": [
        "numpy.int",
        "numpy.distutils.system_info.get_standard_file",
        "numpy.core.defchararray.join",
        "numpy.distutils.system_info.system_info.parse_config_files",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.distutils.system_info.system_info.calc_libraries_info": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.system_info.system_info.get_runtime_lib_dirs",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.check_libs",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.system_info.system_info.get_libraries",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.system_info.set_info": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.calc_extra_info",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.system_info.system_info.calc_libraries_info"
    ],
    "numpy.distutils.system_info.system_info.calc_extra_info": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.system_info.dict_append",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.system_info.system_info.get_info": [
        "numpy.distutils.system_info.umfpack_info.calc_info",
        "numpy.distutils.system_info.system_info.has_info",
        "numpy.distutils.system_info.atlas_3_10_blas_info.calc_info",
        "numpy.distutils.system_info.numerix_info.calc_info",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.distutils.system_info.djbfft_info.calc_info",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.system_info.f2py_info.calc_info",
        "numpy.distutils.system_info.lapack_info.calc_info",
        "numpy.distutils.system_info.boost_python_info.calc_info",
        "numpy.distutils.system_info.mkl_info.calc_info",
        "numpy.distutils.system_info.agg2_info.calc_info",
        "numpy.distutils.system_info.lapack_src_info.calc_info",
        "numpy.distutils.system_info.NotFoundError",
        "numpy.distutils.system_info.atlas_info.calc_info",
        "numpy.distutils.system_info.lapack_opt_info.calc_info",
        "numpy.distutils.system_info._pkg_config_info.calc_info",
        "numpy.distutils.system_info.blas_opt_info.calc_info",
        "numpy.distutils.system_info.fft_opt_info.calc_info",
        "numpy.distutils.system_info.blas_info.calc_info",
        "numpy.distutils.system_info.fftw_info.calc_info",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.amd_info.calc_info",
        "numpy.distutils.system_info.accelerate_info.calc_info",
        "numpy.distutils.system_info.blas_src_info.calc_info",
        "numpy.distutils.system_info.x11_info.calc_info",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.distutils.system_info._numpy_info.calc_info"
    ],
    "numpy.distutils.system_info.system_info.get_paths": [
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.system_info.get_lib_dirs": [
        "numpy.distutils.system_info.system_info.get_paths"
    ],
    "numpy.distutils.system_info.system_info.get_runtime_lib_dirs": [
        "numpy.distutils.system_info.system_info.get_paths"
    ],
    "numpy.distutils.system_info.system_info.get_include_dirs": [
        "numpy.distutils.system_info.system_info.get_paths"
    ],
    "numpy.distutils.system_info.system_info.get_src_dirs": [
        "numpy.distutils.system_info.system_info.get_paths"
    ],
    "numpy.distutils.system_info.system_info.get_libs": [
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.system_info.system_info.get_libraries": [
        "numpy.distutils.system_info.system_info.get_libs"
    ],
    "numpy.distutils.system_info.system_info.library_extensions": [
        "numpy.distutils.customized_ccompiler",
        "numpy.ma.append",
        "numpy.distutils.misc_util.get_shared_lib_extension",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.system_info.check_libs": [
        "numpy.distutils.system_info.system_info.library_extensions",
        "numpy.distutils.system_info.system_info._check_libs"
    ],
    "numpy.distutils.system_info.system_info.check_libs2": [
        "numpy.distutils.system_info.system_info.library_extensions",
        "numpy.distutils.system_info.system_info._check_libs"
    ],
    "numpy.distutils.system_info.system_info._find_lib": [
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.system_info.system_info._find_libs": [
        "numpy.distutils.system_info.system_info._find_lib",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.system_info._check_libs": [
        "numpy.distutils.system_info.system_info._find_libs",
        "numpy.distutils.misc_util.is_sequence"
    ],
    "numpy.distutils.system_info.system_info.combine_paths": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.distutils.system_info.system_info.combine_paths"
    ],
    "numpy.distutils.system_info.fft_opt_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.fft_opt_info.calc_info": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.system_info.dict_append",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.system_info.system_info.set_info"
    ],
    "numpy.distutils.system_info.fftw_info": [
        "numpy.distutils.system_info.FFTWNotFoundError",
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.fftw_info.calc_ver_info": [
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.check_libs",
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.fftw_info.calc_info": [
        "numpy.distutils.system_info.fftw_info.calc_ver_info"
    ],
    "numpy.distutils.system_info.fftw2_info": [
        "numpy.distutils.system_info.FFTWNotFoundError",
        "numpy.distutils.system_info.fftw_info"
    ],
    "numpy.distutils.system_info.fftw3_info": [
        "numpy.distutils.system_info.FFTWNotFoundError",
        "numpy.distutils.system_info.fftw_info"
    ],
    "numpy.distutils.system_info.dfftw_info": [
        "numpy.distutils.system_info.fftw_info"
    ],
    "numpy.distutils.system_info.sfftw_info": [
        "numpy.distutils.system_info.fftw_info"
    ],
    "numpy.distutils.system_info.fftw_threads_info": [
        "numpy.distutils.system_info.fftw_info"
    ],
    "numpy.distutils.system_info.dfftw_threads_info": [
        "numpy.distutils.system_info.fftw_info"
    ],
    "numpy.distutils.system_info.sfftw_threads_info": [
        "numpy.distutils.system_info.fftw_info"
    ],
    "numpy.distutils.system_info.djbfft_info": [
        "numpy.distutils.system_info.system_info",
        "numpy.distutils.system_info.DJBFFTNotFoundError"
    ],
    "numpy.distutils.system_info.djbfft_info.get_paths": [
        "numpy.distutils.system_info.system_info.get_paths",
        "numpy.distutils.system_info.system_info.combine_paths"
    ],
    "numpy.distutils.system_info.djbfft_info.calc_info": [
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.misc_util.get_shared_lib_extension",
        "numpy.distutils.system_info.system_info.get_lib_dirs",
        "numpy.distutils.system_info.system_info.combine_paths"
    ],
    "numpy.distutils.system_info.mkl_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.mkl_info.get_mkl_rootdir": [
        "npy_tempita._looper.loop_pos.index",
        "numpy.split",
        "numpy.lib._datasource.open",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.core.defchararray.chararray.index",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib.function_base.append",
        "numpy.core.defchararray.index",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.char.index",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.mkl_info.__init__": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.distutils.system_info.mkl_info.get_mkl_rootdir",
        "numpy.char.join",
        "numpy.distutils.system_info.system_info.__init__"
    ],
    "numpy.distutils.system_info.mkl_info.calc_info": [
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.check_libs2",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.get_lib_dirs",
        "numpy.distutils.system_info.system_info.get_libs"
    ],
    "numpy.distutils.system_info.lapack_mkl_info": [
        "numpy.distutils.system_info.mkl_info"
    ],
    "numpy.distutils.system_info.blas_mkl_info": [
        "numpy.distutils.system_info.mkl_info"
    ],
    "numpy.distutils.system_info.atlas_info": [
        "numpy.distutils.system_info.system_info",
        "numpy.distutils.system_info.AtlasNotFoundError"
    ],
    "numpy.distutils.system_info.atlas_info.get_paths": [
        "numpy.distutils.system_info.system_info.get_paths",
        "numpy.distutils.system_info.system_info.combine_paths"
    ],
    "numpy.distutils.system_info.atlas_info.calc_info": [
        "numpy.info",
        "numpy.core.defchararray.join",
        "numpy.distutils.system_info.get_atlas_version",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.library_extensions",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.system_info.system_info.check_libs2",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.ma.append",
        "numpy.distutils.system_info.system_info.get_lib_dirs",
        "numpy.append",
        "numpy.distutils.system_info.dict_append",
        "numpy.lib.utils.info",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.atlas_blas_info": [
        "numpy.distutils.system_info.atlas_info"
    ],
    "numpy.distutils.system_info.atlas_blas_info.calc_info": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.system_info.system_info.check_libs2",
        "numpy.distutils.system_info.dict_append",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.distutils.system_info.get_atlas_version",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.atlas_threads_info": [
        "numpy.distutils.system_info.atlas_info"
    ],
    "numpy.distutils.system_info.atlas_blas_threads_info": [
        "numpy.distutils.system_info.atlas_blas_info"
    ],
    "numpy.distutils.system_info.lapack_atlas_info": [
        "numpy.distutils.system_info.atlas_info"
    ],
    "numpy.distutils.system_info.lapack_atlas_threads_info": [
        "numpy.distutils.system_info.atlas_threads_info"
    ],
    "numpy.distutils.system_info.atlas_3_10_info": [
        "numpy.distutils.system_info.atlas_info"
    ],
    "numpy.distutils.system_info.atlas_3_10_blas_info": [
        "numpy.distutils.system_info.atlas_3_10_info"
    ],
    "numpy.distutils.system_info.atlas_3_10_blas_info.calc_info": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.system_info.system_info.check_libs2",
        "numpy.distutils.system_info.dict_append",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.distutils.system_info.get_atlas_version",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.atlas_3_10_threads_info": [
        "numpy.distutils.system_info.atlas_3_10_info"
    ],
    "numpy.distutils.system_info.atlas_3_10_blas_threads_info": [
        "numpy.distutils.system_info.atlas_3_10_blas_info"
    ],
    "numpy.distutils.system_info.lapack_atlas_3_10_info": [
        "numpy.distutils.system_info.atlas_3_10_info"
    ],
    "numpy.distutils.system_info.lapack_atlas_3_10_threads_info": [
        "numpy.distutils.system_info.atlas_3_10_threads_info"
    ],
    "numpy.distutils.system_info.lapack_info": [
        "numpy.distutils.system_info.LapackNotFoundError",
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.lapack_info.calc_info": [
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.check_libs",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.lapack_src_info": [
        "numpy.distutils.system_info.system_info",
        "numpy.distutils.system_info.LapackSrcNotFoundError"
    ],
    "numpy.distutils.system_info.lapack_src_info.get_paths": [
        "numpy.distutils.system_info.system_info.get_paths",
        "numpy.distutils.system_info.system_info.combine_paths"
    ],
    "numpy.distutils.system_info.lapack_src_info.calc_info": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_src_dirs"
    ],
    "numpy.distutils.system_info.get_atlas_version": [
        "numpy.info",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.command.config.config",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.command.config.config.get_output",
        "numpy.distutils.system_info.dict_append",
        "numpy.lib.utils.info",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.system_info.lapack_opt_info": [
        "numpy.distutils.system_info.LapackNotFoundError",
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.lapack_opt_info.calc_info": [
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.set_info"
    ],
    "numpy.distutils.system_info.blas_opt_info": [
        "numpy.distutils.system_info.BlasNotFoundError",
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.blas_opt_info.calc_info": [
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.set_info"
    ],
    "numpy.distutils.system_info.blas_info": [
        "numpy.distutils.system_info.BlasNotFoundError",
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.blas_info.calc_info": [
        "numpy.distutils.system_info.blas_info.has_cblas",
        "numpy.distutils.system_info.system_info.check_libs",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.blas_info.has_cblas": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.distutils.customized_ccompiler",
        "numpy.lib._datasource.open",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.join",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.system_info.openblas_info": [
        "numpy.distutils.system_info.BlasNotFoundError",
        "numpy.distutils.system_info.blas_info"
    ],
    "numpy.distutils.system_info.openblas_info.calc_info": [
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.check_libs",
        "numpy.distutils.system_info.system_info.calc_extra_info",
        "numpy.distutils.fcompiler",
        "numpy.distutils.customized_ccompiler",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.system_info.openblas_info.check_msvc_gfortran_libs",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.openblas_info.check_embedded_lapack",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.openblas_info.check_msvc_gfortran_libs": [
        "numpy.core.defchararray.join",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.openblas_lapack_info": [
        "numpy.distutils.system_info.openblas_info",
        "numpy.distutils.system_info.BlasNotFoundError"
    ],
    "numpy.distutils.system_info.openblas_lapack_info.check_embedded_lapack": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.distutils.customized_ccompiler",
        "numpy.lib._datasource.open",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.join",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.system_info.openblas_clapack_info": [
        "numpy.distutils.system_info.openblas_lapack_info"
    ],
    "numpy.distutils.system_info.blis_info": [
        "numpy.distutils.system_info.BlasNotFoundError",
        "numpy.distutils.system_info.blas_info"
    ],
    "numpy.distutils.system_info.blis_info.calc_info": [
        "numpy.distutils.system_info.system_info.check_libs2",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.accelerate_info": [
        "numpy.distutils.system_info.BlasNotFoundError",
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.accelerate_info.calc_info": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.system_info.blas_src_info": [
        "numpy.distutils.system_info.system_info",
        "numpy.distutils.system_info.BlasSrcNotFoundError"
    ],
    "numpy.distutils.system_info.blas_src_info.get_paths": [
        "numpy.distutils.system_info.system_info.get_paths",
        "numpy.distutils.system_info.system_info.combine_paths"
    ],
    "numpy.distutils.system_info.blas_src_info.calc_info": [
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.core.defchararray.join",
        "numpy.distutils.system_info.system_info.get_src_dirs",
        "numpy.char.join"
    ],
    "numpy.distutils.system_info.x11_info": [
        "numpy.distutils.system_info.system_info",
        "numpy.distutils.system_info.X11NotFoundError"
    ],
    "numpy.distutils.system_info.x11_info.__init__": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.char.join"
    ],
    "numpy.distutils.system_info.x11_info.calc_info": [
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.check_libs",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info._numpy_info": [
        "numpy.distutils.system_info.NumericNotFoundError",
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info._numpy_info.__init__": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.split",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info._numpy_info.calc_info": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.system_info.dict_append",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.upper",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.core.defchararray.chararray.upper"
    ],
    "numpy.distutils.system_info.numarray_info": [
        "numpy.distutils.system_info._numpy_info"
    ],
    "numpy.distutils.system_info.Numeric_info": [
        "numpy.distutils.system_info._numpy_info"
    ],
    "numpy.distutils.system_info.numpy_info": [
        "numpy.distutils.system_info._numpy_info"
    ],
    "numpy.distutils.system_info.numerix_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.numerix_info.calc_info": [
        "numpy.distutils.system_info.get_info",
        "numpy.core.defchararray.lower",
        "numpy.distutils.compat.get_exception",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.core.defchararray.chararray.lower",
        "numpy"
    ],
    "numpy.distutils.system_info.f2py_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.f2py_info.calc_info": [
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.distutils.system_info.boost_python_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.boost_python_info.get_paths": [
        "numpy.distutils.system_info.system_info.get_paths",
        "numpy.distutils.system_info.system_info.combine_paths"
    ],
    "numpy.distutils.system_info.boost_python_info.calc_info": [
        "numpy.core.defchararray.join",
        "numpy.distutils.system_info.system_info.get_src_dirs",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.agg2_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.agg2_info.get_paths": [
        "numpy.distutils.system_info.system_info.get_paths",
        "numpy.distutils.system_info.system_info.combine_paths"
    ],
    "numpy.distutils.system_info.agg2_info.calc_info": [
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.core.defchararray.join",
        "numpy.distutils.system_info.system_info.get_src_dirs",
        "numpy.char.join"
    ],
    "numpy.distutils.system_info._pkg_config_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info._pkg_config_info.get_config_output": [
        "numpy.distutils.exec_command.exec_command"
    ],
    "numpy.distutils.system_info._pkg_config_info.calc_info": [
        "numpy.info",
        "numpy.distutils.system_info._pkg_config_info.get_config_exe",
        "numpy.distutils.system_info._pkg_config_info.get_config_output",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.upper",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.exec_command.find_executable",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.upper",
        "numpy.append",
        "numpy.distutils.system_info.dict_append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.utils.info",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.wx_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.gdk_pixbuf_xlib_2_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.gdk_pixbuf_2_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.gdk_x11_2_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.gdk_2_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.gdk_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.gtkp_x11_2_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.gtkp_2_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.xft_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.freetype2_info": [
        "numpy.distutils.system_info._pkg_config_info"
    ],
    "numpy.distutils.system_info.amd_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.system_info.amd_info.calc_info": [
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.check_libs",
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.umfpack_info": [
        "numpy.distutils.system_info.system_info",
        "numpy.distutils.system_info.UmfpackNotFoundError"
    ],
    "numpy.distutils.system_info.umfpack_info.calc_info": [
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.system_info.dict_append",
        "numpy.distutils.system_info.system_info.check_libs",
        "numpy.distutils.system_info.system_info.combine_paths",
        "numpy.distutils.system_info.system_info.get_include_dirs",
        "numpy.distutils.system_info.system_info.set_info",
        "numpy.distutils.system_info.system_info.get_libs",
        "numpy.distutils.system_info.system_info.get_lib_dirs"
    ],
    "numpy.distutils.system_info.combine_paths": [
        "numpy.distutils.system_info.combine_paths",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.distutils.misc_util.is_string",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.dict_append": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.append",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.system_info.show_all": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.core.defchararray.index",
        "numpy.distutils.system_info.system_info",
        "numpy.distutils.system_info.system_info.get_info",
        "numpy.lib.function_base.copy",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.distutils.system_info.parseCmdLine",
        "numpy.distutils.log.set_threshold",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.core.defchararray.chararray.index",
        "numpy.ma.append",
        "numpy.ma.copy",
        "numpy.char.index",
        "npy_tempita._looper.loop_pos.index",
        "numpy.distutils.misc_util.Configuration.get_info",
        "numpy.append",
        "numpy.distutils.system_info.get_info",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.append",
        "numpy.distutils.misc_util.get_info",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.distutils.log._fix_args": [
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.log.Log._log": [
        "numpy.distutils.command.config.GrabStdout.flush",
        "numpy.distutils.misc_util.red_text",
        "numpy.core.memmap.memmap.flush",
        "numpy.distutils.log._fix_args"
    ],
    "numpy.distutils.log.Log.good": [
        "numpy.distutils.command.config.GrabStdout.flush",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.distutils.misc_util.green_text",
        "numpy.core.memmap.memmap.flush",
        "numpy.distutils.log._fix_args"
    ],
    "numpy.distutils.log.set_threshold": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.log.set_verbosity": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.distutils.log.set_threshold"
    ],
    "numpy.distutils.environment.EnvironmentConfig.dump_variable": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.environment.EnvironmentConfig.dump_variables": [
        "numpy.distutils.environment.EnvironmentConfig.dump_variable"
    ],
    "numpy.distutils.environment.EnvironmentConfig.__getattr__": [
        "numpy.distutils.environment.EnvironmentConfig._get_var"
    ],
    "numpy.distutils.environment.EnvironmentConfig.get": [
        "numpy.distutils.environment.EnvironmentConfig._get_var"
    ],
    "numpy.distutils.environment.EnvironmentConfig._get_var": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.msvc9compiler.MSVCCompiler.initialize": [
        "numpy.distutils.msvc9compiler._merge"
    ],
    "numpy.distutils.customized_fcompiler": [
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.fcompiler"
    ],
    "numpy.distutils.customized_ccompiler": [
        "numpy.distutils.fcompiler.FCompiler.customize",
        "numpy.distutils.ccompiler.new_compiler"
    ],
    "numpy.distutils.cpuinfo.getoutput": [
        "numpy.distutils.compat.get_exception"
    ],
    "numpy.distutils.cpuinfo.command_info": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.cpuinfo.getoutput"
    ],
    "numpy.distutils.cpuinfo.command_by_line": [
        "numpy.distutils.cpuinfo.getoutput"
    ],
    "numpy.distutils.cpuinfo.key_value_from_command": [
        "numpy.distutils.cpuinfo.command_by_line"
    ],
    "numpy.distutils.cpuinfo.CPUInfoBase._is_32bit": [
        "numpy.distutils.cpuinfo.CPUInfoBase.__get_nbits"
    ],
    "numpy.distutils.cpuinfo.CPUInfoBase._is_64bit": [
        "numpy.distutils.cpuinfo.CPUInfoBase.__get_nbits"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo": [
        "numpy.distutils.cpuinfo.LinuxCPUInfo._not_impl",
        "numpy.distutils.cpuinfo.CPUInfoBase",
        "numpy.distutils.cpuinfo.LinuxCPUInfo._is_XEON"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.info",
        "numpy.distutils.compat.get_exception",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.utils.info",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.ma.core.append",
        "numpy.distutils.cpuinfo.getoutput"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_2": [
        "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6_3": [
        "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK6": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonK7": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonMP": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AMD64": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Athlon64": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_AthlonHX": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Opteron": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Hammer": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Alpha": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV4": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV5": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_EV56": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PCA56": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Intel": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_i486": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_i586": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_i686": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Celeron": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Pentium": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumII": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumPro": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumMMX": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIII": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumIV": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_PentiumM": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Nocona": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Core2": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_Itanium": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_XEON": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._is_singleCPU": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._getNCPUs": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_fdiv_bug": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_f00f_bug": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_mmx": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse2": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_sse3": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_ssse3": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnow": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.LinuxCPUInfo._has_3dnowext": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo": [
        "numpy.distutils.cpuinfo.CPUInfoBase"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.cpuinfo.key_value_from_command"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_singleCPU": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._getNCPUs": [
        "numpy.int",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype": [
        "numpy.core.defchararray.chararray.lower",
        "numpy.core.defchararray.lower"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r2000": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3000": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r3900": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4000": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4100": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4300": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4400": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4600": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4650": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r5000": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r6000": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r8000": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r10000": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r12000": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_rorion": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__cputype"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo.get_ip": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine": [
        "numpy.core.defchararray.chararray.lower",
        "numpy.core.defchararray.lower"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP19": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP20": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP21": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_4k": [
        "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r4000",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP22_5k": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r5000",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP24": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP25": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP26": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP27": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP28": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP30": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_5k": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r5000",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.IRIXCPUInfo._is_IP32_10k": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo._is_r10000"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo": [
        "numpy.distutils.cpuinfo.CPUInfoBase"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.cpuinfo.command_info",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.cpuinfo.key_value_from_command"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._getNCPUs": [
        "numpy.int",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_Power_Macintosh": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_i386": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc601": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc602": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc603e": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc604e": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc620": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc630": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc740": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7400": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc7450": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc750": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc403": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc505": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc801": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc821": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc823": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.DarwinCPUInfo._is_ppc860": [
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__machine",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__machine"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo": [
        "numpy.distutils.cpuinfo.CPUInfoBase"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.distutils.cpuinfo.command_info",
        "numpy.distutils.cpuinfo.command_by_line",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.distutils.cpuinfo.key_value_from_command"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_i386": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparc": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcv9": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._getNCPUs": [
        "numpy.int",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sun4": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_SUNW": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sparcstation5": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra1": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra250": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra2": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra30": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra4": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5_10": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra5": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra60": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra80": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultraenterprice10k": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_sunfire": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_ultra": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv7": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv8": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.SunOSCPUInfo._is_cpusparcv9": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo": [
        "numpy.distutils.cpuinfo.CPUInfoBase"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo.__init__": [
        "numpy.info",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.ma.append",
        "numpy.append",
        "numpy.int",
        "numpy.lib.utils.info",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_Am486": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_Am5x86": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK5": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_2": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK6_3": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMDK7": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_AMD64": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_Intel": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_i386": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_i486": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_i586": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_i686": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_Pentium": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumMMX": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumPro": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumII": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIII": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumIV": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_PentiumM": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_Core2": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._is_singleCPU": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._getNCPUs": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._has_mmx": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._has_sse": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnow": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.cpuinfo.Win32CPUInfo._has_3dnowext": [
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.utils.info",
        "numpy.info"
    ],
    "numpy.distutils.core._dict_append": [
        "numpy.distutils.core._dict_append",
        "numpy.distutils.misc_util.is_string",
        "numpy.lib.npyio.NpzFile.items"
    ],
    "numpy.distutils.core._command_line_ok": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.ok",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.core.get_distribution": [
        "numpy.distutils.numpy_distribution.NumpyDistribution",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__"
    ],
    "numpy.distutils.core.setup": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.distutils.core.setup",
        "numpy.ma.masked.copy",
        "numpy.distutils.misc_util.Configuration.todict",
        "numpy.True_.copy",
        "numpy.distutils.misc_util.is_string",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.numpy_distribution.NumpyDistribution",
        "numpy.ma.append",
        "numpy.ma.copy",
        "numpy.distutils.core._check_append_library",
        "numpy.distutils.core._check_append_ext_library",
        "numpy.append",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.distutils.core._dict_append",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.distutils.core._command_line_ok",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.distutils.core._check_append_library": [
        "numpy.distutils.misc_util.is_sequence"
    ],
    "numpy.distutils.core._check_append_ext_library": [
        "numpy.distutils.misc_util.is_sequence"
    ],
    "numpy.distutils.msvccompiler.MSVCCompiler.initialize": [
        "numpy.distutils.msvccompiler._merge"
    ],
    "numpy.distutils.conv_template.parse_structure": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.ma.append",
        "numpy.ma.core.sort",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.conv_template.paren_repl": [
        "numpy.int"
    ],
    "numpy.distutils.conv_template.parse_values": [
        "numpy.distutils.conv_template.paren_repl"
    ],
    "numpy.distutils.conv_template.parse_loop_header": [
        "numpy.distutils.conv_template.parse_values",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.conv_template.parse_string": [
        "numpy.distutils.compat.get_exception",
        "numpy.distutils.conv_template.parse_string",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.distutils.conv_template.parse_loop_header",
        "numpy.distutils.conv_template.parse_structure"
    ],
    "numpy.distutils.conv_template.process_str": [
        "numpy.distutils.conv_template.parse_string"
    ],
    "numpy.distutils.conv_template.resolve_includes": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.join",
        "numpy.distutils.conv_template.resolve_includes",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.conv_template.process_file": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.distutils.conv_template.process_str",
        "numpy.distutils.conv_template.resolve_includes",
        "numpy.f2py.auxfuncs.replace",
        "numpy.distutils.compat.get_exception",
        "numpy.core.defchararray.replace"
    ],
    "numpy.distutils.conv_template.main": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.distutils.conv_template.process_str",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.compat.get_exception",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.npy_pkg_config.parse_flags": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.strip",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.split",
        "numpy.lib.shape_base.split",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.npy_pkg_config.LibraryInfo.cflags": [
        "numpy.distutils.npy_pkg_config._escape_backslash"
    ],
    "numpy.distutils.npy_pkg_config.LibraryInfo.libs": [
        "numpy.distutils.npy_pkg_config._escape_backslash"
    ],
    "numpy.distutils.npy_pkg_config.VariableSet.__init__": [
        "numpy.distutils.npy_pkg_config.VariableSet._init_parse"
    ],
    "numpy.distutils.npy_pkg_config.VariableSet._init_parse": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.distutils.npy_pkg_config.VariableSet._init_parse_var"
    ],
    "numpy.distutils.npy_pkg_config.VariableSet.interpolate._interpolate": [
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_subclass.sub",
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass.sub",
        "npy_tempita.sub",
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.sub",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.npy_pkg_config.VariableSet.interpolate": [
        "numpy.distutils.npy_pkg_config.VariableSet.interpolate._interpolate"
    ],
    "numpy.distutils.npy_pkg_config.VariableSet.variables": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.npy_pkg_config.VariableSet.__setitem__": [
        "numpy.distutils.npy_pkg_config.VariableSet._init_parse_var"
    ],
    "numpy.distutils.npy_pkg_config.parse_meta": [
        "numpy.distutils.npy_pkg_config.FormatError",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.npy_pkg_config.parse_variables": [
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.distutils.npy_pkg_config.FormatError",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.distutils.npy_pkg_config.VariableSet"
    ],
    "numpy.distutils.npy_pkg_config.parse_config": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.npy_pkg_config.PkgNotFound",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.npy_pkg_config._escape_backslash",
        "numpy.distutils.npy_pkg_config.LibraryInfo.sections",
        "numpy.distutils.npy_pkg_config.parse_meta",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.npy_pkg_config._read_config_imp._read_config": [
        "numpy.distutils.npy_pkg_config._read_config_imp._read_config",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.distutils.npy_pkg_config.pkg_to_filename",
        "numpy.distutils.npy_pkg_config.parse_config"
    ],
    "numpy.distutils.npy_pkg_config._read_config_imp": [
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.npy_pkg_config._read_config_imp._read_config",
        "numpy.distutils.npy_pkg_config._escape_backslash",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo",
        "numpy.distutils.npy_pkg_config.VariableSet"
    ],
    "numpy.distutils.npy_pkg_config.read_config": [
        "numpy.distutils.npy_pkg_config._read_config_imp",
        "numpy.distutils.npy_pkg_config.pkg_to_filename"
    ],
    "numpy.distutils.ccompiler._needs_build": [
        "numpy.distutils.misc_util._commandline_dep_string",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.distutils.ccompiler.CCompiler_spawn": [
        "numpy.distutils.exec_command.exec_command",
        "numpy.distutils.misc_util.is_sequence"
    ],
    "numpy.distutils.ccompiler.CCompiler_object_filenames": [
        "cythonize.normpath",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.rfind",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.rfind",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.ccompiler.CCompiler_compile": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.distutils.misc_util.cyg2win32",
        "numpy.distutils.misc_util.get_num_build_jobs",
        "numpy.distutils.ccompiler.CCompiler_compile.single_compile",
        "numpy.ma.append",
        "numpy.distutils.fcompiler.FCompiler",
        "numpy.distutils.fcompiler.has_f90_header",
        "numpy.distutils.fcompiler",
        "numpy.ma.core._MaskedPrintOption.display",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.ccompiler.CCompiler_compile.single_compile": [
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.distutils.ccompiler._needs_build",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "clapack_scrub.LineQueue.add"
    ],
    "numpy.distutils.ccompiler.CCompiler_customize_cmd": [
        "numpy.distutils.ccompiler.CCompiler_customize_cmd.allow"
    ],
    "numpy.distutils.ccompiler._compiler_to_string": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.append",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.ccompiler.CCompiler_show_customization": [
        "numpy.distutils.ccompiler._compiler_to_string"
    ],
    "numpy.distutils.ccompiler.CCompiler_customize": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "npy_tempita.compat3.b",
        "numpy.core.defchararray.startswith",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open",
        "numpy.char.join"
    ],
    "numpy.distutils.ccompiler.simple_version_match": [
        "numpy.distutils.ccompiler.simple_version_match.matcher"
    ],
    "numpy.distutils.ccompiler.CCompiler_get_version": [
        "numpy.distutils.exec_command.exec_command",
        "numpy.distutils.ccompiler.CCompiler_get_version.matcher"
    ],
    "numpy.distutils.ccompiler.CCompiler_cxx_compiler": [
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith"
    ],
    "numpy.distutils.ccompiler.new_compiler": [
        "numpy.distutils.compat.get_exception"
    ],
    "numpy.distutils.ccompiler.gen_lib_options": [
        "numpy.distutils.misc_util.quote_args",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.distutils.ccompiler.gen_lib_options"
    ],
    "numpy.distutils.ccompiler.gen_preprocess_options": [
        "numpy.distutils.misc_util.quote_args",
        "numpy.distutils.ccompiler.gen_preprocess_options"
    ],
    "numpy.distutils.ccompiler.split_quoted": [
        "numpy.core.defchararray.lstrip",
        "numpy.core.defchararray.chararray.lstrip",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.unixccompiler.UnixCCompiler__compile": [
        "numpy.distutils.misc_util._commandline_dep_string",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.compat.get_exception",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.unixccompiler.UnixCCompiler_create_static_lib": [
        "numpy.distutils.compat.get_exception"
    ],
    "numpy.distutils.line_endings.dos2unix": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpy.distutils.line_endings.dos2unix_one_dir": [
        "numpy.distutils.line_endings.dos2unix",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.distutils.line_endings.dos2unix_dir": [
        "numpy.distutils.line_endings.dos2unix_one_dir"
    ],
    "numpy.distutils.line_endings.unix2dos": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpy.distutils.line_endings.unix2dos_one_dir": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.distutils.line_endings.unix2dos",
        "numpy.char.join"
    ],
    "numpy.distutils.line_endings.unix2dos_dir": [
        "numpy.distutils.line_endings.unix2dos_one_dir"
    ],
    "numpy.distutils.mingw32ccompiler.get_msvcr_replacement": [
        "numpy.distutils.misc_util.msvc_runtime_library"
    ],
    "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "track_allocations.AllocationTracker.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.msvc_runtime_version",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.distutils.mingw32ccompiler.build_msvcr_library",
        "numpy.distutils.mingw32ccompiler.build_import_library",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.link": [
        "numpy.distutils.misc_util.msvc_runtime_library"
    ],
    "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.object_filenames": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.mingw32ccompiler.find_python_dll": [
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.mingw32ccompiler.generate_def": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.chararray.decode",
        "numpy.core.defchararray.strip",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.append",
        "numpy.distutils.mingw32ccompiler.dump_table",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.decode",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.mingw32ccompiler.find_dll": [
        "numpy.distutils.mingw32ccompiler.find_dll._find_dll_in_path",
        "numpy.distutils.mingw32ccompiler.find_dll._find_dll_in_winsxs"
    ],
    "numpy.distutils.mingw32ccompiler.find_dll._find_dll_in_winsxs": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.char.join"
    ],
    "numpy.distutils.mingw32ccompiler.find_dll._find_dll_in_path": [
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.char.join"
    ],
    "numpy.distutils.mingw32ccompiler.build_msvcr_library": [
        "numpy.distutils.misc_util.msvc_runtime_major",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.mingw32ccompiler.generate_def",
        "numpy.distutils.mingw32ccompiler.find_dll",
        "numpy.distutils.misc_util.msvc_runtime_library"
    ],
    "numpy.distutils.mingw32ccompiler.build_import_library": [
        "numpy.distutils.mingw32ccompiler._build_import_library_amd64",
        "numpy.distutils.mingw32ccompiler._build_import_library_x86"
    ],
    "numpy.distutils.mingw32ccompiler._check_for_import_lib": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.mingw32ccompiler._build_import_library_amd64": [
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.mingw32ccompiler.generate_def",
        "numpy.core.defchararray.join",
        "numpy.distutils.mingw32ccompiler.find_python_dll",
        "numpy.char.join",
        "numpy.distutils.mingw32ccompiler._check_for_import_lib"
    ],
    "numpy.distutils.mingw32ccompiler._build_import_library_x86": [
        "numpy.distutils.mingw32ccompiler.find_python_dll",
        "numpy.distutils.mingw32ccompiler._check_for_import_lib",
        "numpy.distutils.lib2def.getnm",
        "numpy.distutils",
        "numpy.distutils.lib2def.parse_nm",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.distutils.lib2def.output_def",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.distutils.mingw32ccompiler.check_embedded_msvcr_match_linked": [
        "numpy.int",
        "numpy.distutils.misc_util.msvc_runtime_major"
    ],
    "numpy.distutils.mingw32ccompiler.manifest_name": [
        "numpy.distutils.mingw32ccompiler.configtest_name"
    ],
    "numpy.distutils.mingw32ccompiler.rc_name": [
        "numpy.distutils.mingw32ccompiler.configtest_name"
    ],
    "numpy.distutils.mingw32ccompiler.generate_manifest": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.append",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.distutils.mingw32ccompiler.msvc_manifest_xml",
        "numpy.lib._datasource.open",
        "numpy.distutils.mingw32ccompiler.check_embedded_msvcr_match_linked",
        "numpy.ma.core.append",
        "numpy.distutils.mingw32ccompiler.manifest_name"
    ],
    "numpy.distutils.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util.Configuration.make_config_py",
        "numpy.distutils.misc_util.Configuration.add_subpackage",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.distutils.command.build_py.build_py.run": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.command.build_py.build_py.find_package_modules": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.command.build_scripts.build_scripts.generate_scripts": [
        "numpy.distutils.misc_util.is_string",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_scripts.build_scripts.run": [
        "numpy.distutils.command.build_scripts.build_scripts.generate_scripts"
    ],
    "numpy.distutils.command.build_scripts.build_scripts.get_source_files": [
        "numpy.distutils.command.build_scripts.build_scripts.generate_scripts",
        "numpy.distutils.misc_util.get_script_files",
        "numpy.distutils.misc_util"
    ],
    "numpy.distutils.command.build_src.subst_vars": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.replace",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpy.distutils.command.build_src.build_src.finalize_options": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.replace",
        "numpy.char.join"
    ],
    "numpy.distutils.command.build_src.build_src.run": [
        "numpy.distutils.command.build_src.build_src.build_sources"
    ],
    "numpy.distutils.command.build_src.build_src.build_sources": [
        "numpy.distutils.command.build_src.build_src.build_py_modules_sources",
        "numpy.distutils.command.build_src.build_src.build_data_files_sources",
        "numpy.distutils.command.build_src.build_src.build_library_sources",
        "numpy.distutils.command.build_src.build_src.build_npy_pkg_config",
        "numpy.distutils.command.build_src.build_src.build_extension_sources"
    ],
    "numpy.distutils.command.build_src.build_src.build_data_files_sources": [
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.get_data_files",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append",
        "numpy.distutils.misc_util"
    ],
    "numpy.distutils.command.build_src.build_src._build_npy_pkg_config": [
        "numpy.distutils.command.build_src.subst_vars",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.distutils.command.build_src.build_src.build_npy_pkg_config": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.get_cmd",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.distutils.command.build_src.build_src._build_npy_pkg_config",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_src.build_src.build_py_modules_sources": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_src.build_src.build_library_sources": [
        "numpy.distutils.command.build_src.build_src.generate_sources",
        "numpy.distutils.command.build_src.build_src.template_sources",
        "numpy.distutils.command.build_src.build_src.filter_h_files"
    ],
    "numpy.distutils.command.build_src.build_src.build_extension_sources": [
        "numpy.core.defchararray.split",
        "numpy.ma.append",
        "numpy.distutils.command.build_src.build_src.swig_sources",
        "numpy.distutils.command.build_src.build_src.f2py_sources",
        "numpy.distutils.command.build_src.build_src.pyrex_sources",
        "numpy.distutils.command.build_src.build_src.filter_py_files",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.distutils.command.build_src.build_src.generate_sources",
        "numpy.distutils.command.build_src.build_src.template_sources",
        "numpy.distutils.command.build_src.build_src.filter_h_files"
    ],
    "numpy.distutils.command.build_src.build_src.generate_sources": [
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.is_string",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_src.build_src.filter_py_files": [
        "numpy.distutils.command.build_src.build_src.filter_files"
    ],
    "numpy.distutils.command.build_src.build_src.filter_h_files": [
        "numpy.distutils.command.build_src.build_src.filter_files"
    ],
    "numpy.distutils.command.build_src.build_src.filter_files": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_src.build_src.template_sources": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.conv_template.process_file",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.char.join",
        "numpy.ma.core.append",
        "numpy.distutils.from_template.process_file",
        "numpy.distutils.misc_util.appendpath"
    ],
    "numpy.distutils.command.build_src.build_src.pyrex_sources": [
        "numpy.core.defchararray.split",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.distutils.command.build_src.build_src.generate_a_pyrex_source",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_src.build_src.f2py_sources": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.f2py",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.distutils.command.build_src.build_src.f2py_sources",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.f2py.run_main",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.f2py.f2py2e.run_main",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.char.join",
        "numpy.ma.core.append",
        "numpy.distutils.command.build_src.get_f2py_modulename",
        "numpy.distutils.misc_util.appendpath"
    ],
    "numpy.distutils.command.build_src.build_src.swig_sources": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.distutils.command.build_src.build_src.swig_sources",
        "numpy.distutils.command.build_src.get_swig_target",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.distutils.command.build_src.get_swig_modulename",
        "numpy.lib.function_base.append",
        "numpy.distutils.command.build_src._find_swig_target",
        "numpy.char.join",
        "numpy.ma.core.append",
        "numpy.distutils.misc_util.appendpath"
    ],
    "numpy.distutils.command.build_src.get_swig_target": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.distutils.command.build_src.get_swig_modulename": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.distutils.command.build_src._find_swig_target": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.distutils.command.build_src.get_f2py_modulename": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.distutils.command.install_headers.install_headers.run": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build.build": [
        "numpy.distutils.command.config_compiler.show_fortran_compilers"
    ],
    "numpy.distutils.command.build.build.finalize_options": [
        "numpy.int",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.distutils.command.sdist.sdist.add_defaults": [
        "numpy.distutils.misc_util.get_data_files",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_ext.build_ext": [
        "numpy.distutils.command.config_compiler.show_fortran_compilers"
    ],
    "numpy.distutils.command.build_ext.build_ext.finalize_options": [
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.int",
        "numpy.lib.shape_base.split",
        "numpy.split"
    ],
    "numpy.distutils.command.build_ext.build_ext.run": [
        "setup.sdist_checked.run",
        "numpy.distutils.command.build_clib.build_clib.run",
        "numpy.distutils.fcompiler",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.f2py.diagnose.run_command",
        "numpy.f2py.diagnose.run",
        "numpy.distutils.command.install_headers.install_headers.run",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.testing.tests.test_utils.test_suppress_warnings_module.warn_other_module.warn",
        "numpy.distutils.command.config_compiler.config_fc.run",
        "numpy.testing.tests.test_utils.test_suppress_warnings_decorate_no_record.warn",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.distutils.command.config_compiler.config_cc.run",
        "numpy.testing.tests.test_utils.test_suppress_warnings_forwarding.warn_other_module.warn",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.distutils.command.install_data.install_data.run",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.distutils.command.build_ext.build_ext.run",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.lib.function_base.append",
        "numpy.distutils.command.install.install.run",
        "numpy._import_tools.PackageLoader.warn",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.tests.test_scripts.run_command",
        "numpy.distutils.command.egg_info.egg_info.run",
        "numpy.add",
        "benchmarks.bench_app.LaplaceInplace.setup.run",
        "numpy.distutils.command.build_scripts.build_scripts.run",
        "push_docs_to_repo.run",
        "numpy.distutils.command.build_clib.build_clib",
        "numpy.core.defchararray.add",
        "numpy.distutils.command.install_clib.install_clib.run",
        "clapack_scrub.LineQueue.add",
        "numpy.core.defchararray.endswith",
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.f2py.f2py_testing.run",
        "numpy.distutils.misc_util.Configuration.warn",
        "numpy.distutils.misc_util.has_f_sources",
        "numpy.distutils.misc_util.has_cxx_sources",
        "numpy.ma.add",
        "numpy.distutils.command.build.build.run",
        "numpy.distutils.command.build_src.build_src.run",
        "numpy.append",
        "numpy.distutils.command.build_py.build_py.run",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_ext.build_ext.build_extension": [
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.split",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.misc_util.filter_sources",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.fcompiler.FCompiler.get_libraries",
        "numpy.distutils.system_info.system_info.get_libraries",
        "numpy.core.defchararray.chararray.split",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.misc_util.get_numpy_include_dirs",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.distutils.command.build_ext.build_ext._libs_with_msvc_and_fortran",
        "numpy.distutils.command.build_ext.build_ext._process_unlinkable_fobjects",
        "numpy.char.join"
    ],
    "numpy.distutils.command.build_ext.build_ext._add_dummy_mingwex_sym": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.command.build_src.build_src",
        "numpy.distutils.command.build_clib.build_clib"
    ],
    "numpy.distutils.command.build_ext.build_ext._process_unlinkable_fobjects": [
        "numpy.core.defchararray.splitlines",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.splitlines",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.distutils.command.build_ext.build_ext._libs_with_msvc_and_fortran": [
        "numpy.distutils.system_info.combine_paths",
        "numpy.distutils.exec_command.exec_command",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_ext.build_ext.get_source_files": [
        "numpy.distutils.misc_util.get_ext_source_files"
    ],
    "numpy.distutils.command.build_ext.build_ext.get_outputs": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.config.config._check_compiler": [
        "numpy.distutils.fcompiler.FCompiler",
        "numpy.distutils.fcompiler",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.compat.get_exception"
    ],
    "numpy.distutils.command.config.config._wrap_method": [
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.compat.get_exception"
    ],
    "numpy.distutils.command.config.config._compile": [
        "numpy.distutils.command.config.config._wrap_method"
    ],
    "numpy.distutils.command.config.config._link": [
        "numpy.distutils.exec_command.exec_command",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.distutils.mingw32ccompiler.generate_manifest",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.append",
        "numpy.distutils.command.config.config._wrap_method",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.config.config.check_header": [
        "numpy.distutils.command.config.config._check_compiler"
    ],
    "numpy.distutils.command.config.config.check_decl": [
        "numpy.distutils.command.config.config._check_compiler"
    ],
    "numpy.distutils.command.config.config.check_macro_true": [
        "numpy.distutils.command.config.config._check_compiler"
    ],
    "numpy.distutils.command.config.config.check_type": [
        "numpy.distutils.command.config.config._check_compiler",
        "numpy.distutils.command.config.config._compile"
    ],
    "numpy.distutils.command.config.config.check_type_size": [
        "numpy.distutils.command.config.config._check_compiler",
        "numpy.distutils.command.config.config._compile"
    ],
    "numpy.distutils.command.config.config.check_func": [
        "numpy.distutils.command.config.config._check_compiler"
    ],
    "numpy.distutils.command.config.config.check_funcs_once": [
        "numpy.distutils.command.config.config._check_compiler"
    ],
    "numpy.distutils.command.config.config.check_inline": [
        "numpy.distutils.command.config.config.check_inline"
    ],
    "numpy.distutils.command.config.config.check_restrict": [
        "numpy.distutils.command.config.config.check_restrict"
    ],
    "numpy.distutils.command.config.config.check_compiler_gcc4": [
        "numpy.distutils.command.config.config.check_compiler_gcc4"
    ],
    "numpy.distutils.command.config.config.check_gcc_function_attribute": [
        "numpy.distutils.command.config.config.check_gcc_function_attribute"
    ],
    "numpy.distutils.command.config.config.check_gcc_variable_attribute": [
        "numpy.distutils.command.config.config.check_gcc_variable_attribute"
    ],
    "numpy.distutils.command.config.config.get_output": [
        "numpy.distutils.command.config.GrabStdout.restore",
        "numpy.distutils.command.config.config._check_compiler",
        "numpy.distutils.command.config.config._link",
        "numpy.distutils.exec_command.exec_command",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.distutils.command.config.GrabStdout"
    ],
    "numpy.distutils.command.bdist_rpm.bdist_rpm._make_spec_file": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.egg_info.egg_info.run": [
        "numpy.tests.test_scripts.run_command",
        "numpy.f2py.diagnose.run_command"
    ],
    "numpy.distutils.command.test_na_writable_attributes_deletion": [
        "numpy.NA",
        "npy_tempita.attr",
        "numpy.testing._private.utils.assert_raises"
    ],
    "numpy.distutils.command.install.install.setuptools_run": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.command.install.install.run": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.testing._private.utils.suppress_warnings.record",
        "numpy.core.defchararray.rstrip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.records.record",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.distutils.command.install.install.setuptools_run",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.install_clib.install_clib.run": [
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.get_cmd",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_clib.build_clib.finalize_options": [
        "numpy.int"
    ],
    "numpy.distutils.command.build_clib.build_clib.have_f_sources": [
        "numpy.distutils.misc_util.has_f_sources"
    ],
    "numpy.distutils.command.build_clib.build_clib.have_cxx_sources": [
        "numpy.distutils.misc_util.has_cxx_sources"
    ],
    "numpy.distutils.command.build_clib.build_clib.run": [
        "numpy.core.defchararray.join",
        "numpy.tests.test_scripts.run_command",
        "numpy.distutils.command.build_clib.build_clib.have_f_sources",
        "numpy.distutils.command.build_clib.build_clib.have_cxx_sources",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.command.build_clib.build_clib.build_libraries",
        "numpy.ma.append",
        "numpy.distutils.fcompiler",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.append",
        "numpy.f2py.diagnose.run_command",
        "numpy.distutils.command.build_clib.build_clib",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.build_clib.build_clib.get_source_files": [
        "numpy.distutils.misc_util.get_lib_source_files"
    ],
    "numpy.distutils.command.build_clib.build_clib.build_libraries": [
        "numpy.distutils.command.build_clib.build_clib.build_a_library"
    ],
    "numpy.distutils.command.build_clib.build_clib.build_a_library": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.core.defchararray.join",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.True_.copy",
        "numpy.distutils.misc_util.is_sequence",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.distutils.misc_util.filter_sources",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.distutils.misc_util.get_numpy_include_dirs",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.distutils.command.build_clib.build_clib",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.char.join",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.distutils.command.install_data.install_data.run": [
        "numpy.tests.test_scripts.run_command",
        "numpy.f2py.diagnose.run_command"
    ],
    "numpy.distutils.command.config_compiler.show_fortran_compilers": [
        "numpy.distutils.fcompiler.show_fcompilers",
        "numpy.distutils.fcompiler"
    ],
    "numpy.distutils.command.config_compiler.config_fc": [
        "numpy.distutils.command.config_compiler.show_fortran_compilers"
    ],
    "numpy.distutils.command.config_compiler.config_fc.finalize_options": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.config_compiler.config_cc.finalize_options": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.command.develop.develop.install_for_development": [
        "numpy.tests.test_scripts.run_command",
        "numpy.f2py.diagnose.run_command"
    ],
    "numpy.distutils.fcompiler.g95.G95FCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.hpux.HPUXFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.hpux.HPUXFCompiler.get_version": [
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler": [
        "numpy.ma.append",
        "numpy.distutils.fcompiler.FCompiler",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.gnu_version_match": [
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match": [
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.gnu_version_match"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_linker_so": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.g",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgcc_dir": [
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.distutils.exec_command.exec_command"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgfortran_dir": [
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.distutils.exec_command.exec_command"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_library_dirs": [
        "cythonize.normpath",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgcc_dir",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgfortran_dir",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libraries": [
        "numpy.core.defchararray.join",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgcc_dir",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_opt": [
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler": [
        "numpy.distutils.fcompiler.gnu.GnuFCompiler"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.version_match": [
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.gnu_version_match",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._universal_flags": [
        "numpy.distutils.fcompiler.gnu._can_target",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler._c_arch_flags"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags": [
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.distutils.fcompiler.FCompiler.get_flags",
        "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._universal_flags"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_flags_linker_so": [
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_linker_so",
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._universal_flags"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_library_dirs": [
        "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_target",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgcc_dir",
        "numpy.lib._datasource.DataSource.exists",
        "cythonize.normpath",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libgfortran_dir",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_library_dirs",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_libraries": [
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_libraries"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.get_target": [
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.distutils.exec_command.exec_command"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._hash_files": [
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._link_wrapper_lib": [
        "numpy.core.defchararray.join",
        "numpy.distutils.msvc9compiler.MSVCCompiler.initialize",
        "numpy.char.join",
        "numpy.distutils.msvccompiler.MSVCCompiler.initialize",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.fcompiler.gnu.is_win64",
        "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._hash_files"
    ],
    "numpy.distutils.fcompiler.gnu.Gnu95FCompiler.wrap_unlinkable_objects": [
        "numpy.insert",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.ma.append",
        "numpy.append",
        "numpy.distutils.fcompiler.gnu.Gnu95FCompiler._link_wrapper_lib",
        "numpy.lib.function_base.insert",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.distutils.fcompiler.gnu._can_target": [
        "numpy.lib._datasource.DataSource.exists"
    ],
    "numpy.distutils.fcompiler.nag.BaseNAGFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.nag.NAGFCompiler": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler"
    ],
    "numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_linker_so": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_linker_so"
    ],
    "numpy.distutils.fcompiler.nag.NAGFCompiler.get_flags_arch": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.get_flags_arch",
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.nag.NAGFORCompiler": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler"
    ],
    "numpy.distutils.fcompiler.nag.NAGFORCompiler.get_flags_debug": [
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.none.NoneFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.pg.PGroupFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.pg.PGroupFlangCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_libraries": [
        "numpy.distutils.fcompiler.FCompiler.get_libraries"
    ],
    "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_library_dirs": [
        "numpy.distutils.fcompiler.FCompiler.get_library_dirs",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.distutils.fcompiler.pg.PGroupFlangCompiler.get_version": [
        "numpy.distutils.fcompiler.CompilerNotFound"
    ],
    "numpy.distutils.fcompiler.ibm.IBMFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.ibm.IBMFCompiler.get_version": [
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.startswith",
        "numpy.distutils.exec_command.exec_command",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.distutils.exec_command.find_executable"
    ],
    "numpy.distutils.fcompiler.ibm.IBMFCompiler.get_flags_linker_so": [
        "numpy.distutils.fcompiler.ibm.IBMFCompiler.get_version",
        "numpy.core.defchararray.startswith",
        "numpy.lib._datasource.DataSource.open",
        "numpy.distutils.misc_util.make_temp_file",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.flaglist": [
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.fcompiler.str2bool": [
        "numpy.distutils.misc_util.is_string"
    ],
    "numpy.distutils.fcompiler.is_sequence_of_strings": [
        "numpy.distutils.misc_util.is_sequence",
        "numpy.distutils.misc_util.all_strings"
    ],
    "numpy.distutils.fcompiler.FCompiler": [
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.distutils.fcompiler.FCompiler.get_flags_debug",
        "numpy.distutils.fcompiler.str2bool",
        "numpy.distutils.fcompiler.flaglist",
        "numpy.distutils.fcompiler.FCompiler.get_flags_opt",
        "numpy.distutils.misc_util.get_shared_lib_extension",
        "numpy.distutils.fcompiler.FCompiler.get_flags_arch",
        "numpy.distutils.environment.EnvironmentConfig"
    ],
    "numpy.distutils.fcompiler.FCompiler.__init__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.distutils.fcompiler.FCompiler._environment_hook",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.distutils.environment.EnvironmentConfig.clone",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.distutils.fcompiler.FCompiler.__copy__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.distutils.fcompiler.FCompiler._environment_hook",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.ma.MaskedArray.__new__",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.memmap.memmap.__new__",
        "numpy.ma.copy",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy._globals._NoValueType.__new__",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.distutils.environment.EnvironmentConfig.clone",
        "numpy.lib.user_array.container.copy",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__",
        "numpy.copy"
    ],
    "numpy.distutils.fcompiler.FCompiler.copy": [
        "numpy.distutils.fcompiler.FCompiler.__copy__"
    ],
    "numpy.distutils.fcompiler.FCompiler._command_property": [
        "numpy.distutils.fcompiler.FCompiler._command_property.fget"
    ],
    "numpy.distutils.fcompiler.FCompiler.set_executable": [
        "numpy.distutils.fcompiler.FCompiler.set_command"
    ],
    "numpy.distutils.fcompiler.FCompiler.set_commands": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.distutils.fcompiler.FCompiler.set_command"
    ],
    "numpy.distutils.fcompiler.FCompiler.set_command": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.distutils.fcompiler.is_sequence_of_strings",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.distutils.misc_util.is_string",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.distutils.fcompiler.FCompiler.find_executables": [
        "numpy.distutils.fcompiler.FCompiler.find_executables.set_exe",
        "numpy.distutils.fcompiler.CompilerNotFound"
    ],
    "numpy.distutils.fcompiler.FCompiler.find_executables.cached_find_executable": [
        "numpy.distutils.exec_command.find_executable"
    ],
    "numpy.distutils.fcompiler.FCompiler.find_executables.verify_command_form": [
        "numpy.distutils.fcompiler.is_sequence_of_strings"
    ],
    "numpy.distutils.fcompiler.FCompiler.find_executables.set_exe": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.fcompiler.FCompiler.set_command",
        "numpy.distutils.fcompiler.FCompiler.find_executables.cached_find_executable",
        "numpy.add",
        "numpy.ma.append",
        "numpy.ma.add",
        "numpy.append",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.lib.function_base.append",
        "numpy.core.defchararray.add",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.distutils.environment.EnvironmentConfig.clone",
        "numpy.ma.core.append",
        "clapack_scrub.LineQueue.add"
    ],
    "numpy.distutils.fcompiler.FCompiler._get_command_flags": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.fcompiler.FCompiler.get_flags_f77": [
        "numpy.distutils.fcompiler.FCompiler._get_command_flags"
    ],
    "numpy.distutils.fcompiler.FCompiler.get_flags_f90": [
        "numpy.distutils.fcompiler.FCompiler._get_command_flags"
    ],
    "numpy.distutils.fcompiler.FCompiler.get_flags_fix": [
        "numpy.distutils.fcompiler.FCompiler._get_command_flags"
    ],
    "numpy.distutils.fcompiler.FCompiler.get_flags_linker_so": [
        "numpy.distutils.fcompiler.FCompiler._get_command_flags"
    ],
    "numpy.distutils.fcompiler.FCompiler.get_flags_linker_exe": [
        "numpy.distutils.fcompiler.FCompiler._get_command_flags"
    ],
    "numpy.distutils.fcompiler.FCompiler.get_flags_ar": [
        "numpy.distutils.fcompiler.FCompiler._get_command_flags"
    ],
    "numpy.distutils.fcompiler.FCompiler.get_version": [
        "numpy.distutils.fcompiler.CompilerNotFound"
    ],
    "numpy.distutils.fcompiler.FCompiler.customize": [
        "numpy.distutils.fcompiler.FCompiler.get_library_dirs",
        "numpy.distutils.fcompiler.FCompiler.customize.get_flags",
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.core.defchararray.join",
        "numpy.distutils.fcompiler.FCompiler.set_commands",
        "numpy.distutils.fcompiler.FCompiler.find_executables",
        "numpy.distutils.fcompiler.FCompiler.update_executables",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.fcompiler.FCompiler.get_libraries",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.char.join"
    ],
    "numpy.distutils.fcompiler.FCompiler.customize.get_flags": [
        "numpy.distutils.environment.EnvironmentConfig.clone"
    ],
    "numpy.distutils.fcompiler.FCompiler.dump_properties": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.ma.append",
        "numpy.ma.core.sort",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.fcompiler.FCompiler._compile": [
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.distutils.compat.get_exception",
        "numpy.core.defchararray.strip",
        "numpy.distutils.fcompiler.has_f90_header",
        "numpy.distutils.fcompiler.is_free_format",
        "numpy.core.defchararray.chararray.strip",
        "numpy.distutils.fcompiler.get_f77flags"
    ],
    "numpy.distutils.fcompiler.FCompiler.module_options": [
        "numpy.core.defchararray.strip",
        "numpy.ma.append",
        "numpy.testing._private.noseclasses.NumpyDoctest.options",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.testing._private.noseclasses.Unplugger.options",
        "numpy.testing._private.noseclasses.KnownFailurePlugin.options",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.FCompiler.link": [
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.core.defchararray.join",
        "numpy.distutils.compat.get_exception",
        "numpy.distutils.misc_util.is_string",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.chararray.strip",
        "numpy.char.join",
        "numpy.distutils.ccompiler.gen_lib_options"
    ],
    "numpy.distutils.fcompiler.FCompiler._environment_hook": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.misc_util.is_string",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.distutils.fcompiler.load_all_fcompiler_classes": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.distutils.fcompiler._find_existing_fcompiler": [
        "numpy.distutils.fcompiler.CompilerNotFound",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.core",
        "numpy.distutils.core.get_distribution"
    ],
    "numpy.distutils.fcompiler.available_fcompilers_for_platform": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.get_default_fcompiler": [
        "numpy.distutils.fcompiler._find_existing_fcompiler",
        "numpy.distutils.fcompiler.available_fcompilers_for_platform"
    ],
    "numpy.distutils.fcompiler.new_fcompiler": [
        "numpy.ma.add",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.distutils.fcompiler.load_all_fcompiler_classes",
        "numpy.distutils.fcompiler.get_default_fcompiler",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "numpy.lib.npyio.NpzFile.keys",
        "clapack_scrub.LineQueue.add",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.fcompiler.show_fcompilers": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.distutils.fcompiler.load_all_fcompiler_classes",
        "numpy.distutils.fcompiler.CompilerNotFound",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.distutils.compat.get_exception",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.ma.append",
        "numpy.distutils.fcompiler.available_fcompilers_for_platform",
        "numpy.ma.core.sort",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.distutils.command.config_compiler",
        "numpy.distutils.command.config_compiler.config_fc",
        "numpy.distutils.log.set_verbosity",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.distutils.fcompiler.dummy_fortran_file": [
        "numpy.distutils.misc_util.make_temp_file"
    ],
    "numpy.distutils.fcompiler.get_f77flags": [
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.strip"
    ],
    "numpy.distutils.fcompiler.vast.VastFCompiler": [
        "numpy.distutils.fcompiler.gnu.GnuFCompiler"
    ],
    "numpy.distutils.fcompiler.vast.VastFCompiler.get_version_cmd": [
        "numpy.lib.shape_base.split",
        "numpy.core.defchararray.split",
        "numpy.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.distutils.fcompiler.FCompiler._command_property",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.distutils.fcompiler.vast.VastFCompiler.get_flags_arch": [
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.get_flags_arch",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler",
        "numpy.distutils.fcompiler.FCompiler.customize"
    ],
    "numpy.distutils.fcompiler.pathf95.PathScaleFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.mips.MIPSFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f90": [
        "numpy.distutils.fcompiler.mips.MIPSFCompiler.get_flags_arch_f77"
    ],
    "numpy.distutils.fcompiler.sun.SunFCompiler": [
        "numpy.distutils.ccompiler.simple_version_match",
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.sun.SunFCompiler.get_flags_f77": [
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.fcompiler.compaq.CompaqFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler": [
        "numpy.distutils.fcompiler.FCompiler",
        "numpy.distutils.msvccompiler",
        "numpy.distutils.msvccompiler.MSVCCompiler",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.initialize",
        "numpy.distutils.compat.get_exception"
    ],
    "numpy.distutils.fcompiler.intel.intel_version_match": [
        "numpy.distutils.ccompiler.simple_version_match"
    ],
    "numpy.distutils.fcompiler.intel.BaseIntelFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.intel.BaseIntelFCompiler.update_executables": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.dummy_fortran_file",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.distutils.fcompiler.intel.IntelFCompiler": [
        "numpy.distutils.fcompiler.intel.BaseIntelFCompiler",
        "numpy.distutils.fcompiler.intel.intel_version_match"
    ],
    "numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_opt": [
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.intel.IntelFCompiler.get_flags_linker_so": [
        "numpy.distutils.fcompiler.FCompiler.get_flags_linker_so",
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.intel.IntelItaniumFCompiler": [
        "numpy.distutils.fcompiler.intel.IntelFCompiler",
        "numpy.distutils.fcompiler.intel.intel_version_match"
    ],
    "numpy.distutils.fcompiler.intel.IntelEM64TFCompiler": [
        "numpy.distutils.fcompiler.intel.IntelFCompiler",
        "numpy.distutils.fcompiler.intel.intel_version_match"
    ],
    "numpy.distutils.fcompiler.intel.IntelEM64TFCompiler.get_flags_opt": [
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.intel.IntelVisualFCompiler": [
        "numpy.distutils.fcompiler.intel.BaseIntelFCompiler",
        "numpy.distutils.fcompiler.intel.intel_version_match"
    ],
    "numpy.distutils.fcompiler.intel.IntelVisualFCompiler.update_executables": [
        "numpy.distutils.fcompiler.dummy_fortran_file"
    ],
    "numpy.distutils.fcompiler.intel.IntelItaniumVisualFCompiler": [
        "numpy.distutils.fcompiler.intel.intel_version_match",
        "numpy.distutils.fcompiler.intel.IntelVisualFCompiler"
    ],
    "numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler": [
        "numpy.distutils.ccompiler.simple_version_match",
        "numpy.distutils.fcompiler.intel.IntelVisualFCompiler"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.update_executables": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.dummy_fortran_file",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.distutils.misc_util.cyg2win32",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_linker_so": [
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_library_dirs": [
        "numpy.distutils.fcompiler.FCompiler.get_library_dirs",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.char.join"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_libraries": [
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.distutils.fcompiler.FCompiler.get_libraries"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags": [
        "numpy.distutils.fcompiler.FCompiler.get_version",
        "numpy.distutils.fcompiler.FCompiler.get_flags"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f77": [
        "numpy.distutils.fcompiler.FCompiler.get_flags_f77",
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_f90": [
        "numpy.distutils.fcompiler.FCompiler.get_flags_f90",
        "numpy.distutils.fcompiler.FCompiler.get_version"
    ],
    "numpy.distutils.fcompiler.absoft.AbsoftFCompiler.get_flags_fix": [
        "numpy.distutils.fcompiler.FCompiler.get_flags_fix"
    ],
    "numpy.distutils.fcompiler.lahey.LaheyFCompiler": [
        "numpy.distutils.fcompiler.FCompiler"
    ],
    "numpy.distutils.fcompiler.lahey.LaheyFCompiler.get_library_dirs": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.distutils.tests.test_from_template.test_from_template": [
        "numpy.distutils.from_template.process_str",
        "numpy.distutils.tests.test_from_template.normalize_whitespace",
        "numpy.testing.assert_equal"
    ],
    "numpy.distutils.tests.test_system_info.get_class": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.tests.test_system_info._system_info",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.distutils.tests.test_system_info.have_compiler": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.distutils.customized_ccompiler"
    ],
    "numpy.distutils.tests.test_system_info._system_info": [
        "numpy.distutils.system_info.system_info"
    ],
    "numpy.distutils.tests.test_system_info.Temp1Info": [
        "numpy.distutils.tests.test_system_info._system_info"
    ],
    "numpy.distutils.tests.test_system_info.Temp2Info": [
        "numpy.distutils.tests.test_system_info._system_info"
    ],
    "numpy.distutils.tests.test_system_info.TestSystemInfoReading": [
        "numpy.testing._private.decorators.skipif",
        "numpy.distutils.tests.test_system_info.have_compiler",
        "numpy.distutils.ccompiler.new_compiler"
    ],
    "numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup": [
        "numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup.site_and_parse",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.distutils.tests.test_system_info.get_class",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.join",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_all": [
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup.site_and_parse",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.testing.assert_equal"
    ],
    "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_temp1": [
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup.site_and_parse",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.testing.assert_equal"
    ],
    "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_temp2": [
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup.site_and_parse",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.testing.assert_equal"
    ],
    "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_compile1": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.testing.assert_",
        "numpy.distutils.customized_ccompiler",
        "numpy.core.defchararray.join",
        "numpy.f2py.auxfuncs.replace",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.replace"
    ],
    "numpy.distutils.tests.test_system_info.TestSystemInfoReading.test_compile2": [
        "numpy.distutils.tests.test_system_info.TestSystemInfoReading.setup.site_and_parse",
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.testing.assert_",
        "numpy.distutils.customized_ccompiler",
        "numpy.core.defchararray.join",
        "numpy.f2py.auxfuncs.replace",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.replace"
    ],
    "numpy.distutils.tests.test_exec_command.test_exec_command_stdout": [
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__exit__",
        "numpy.distutils.exec_command.exec_command",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__enter__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__exit__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__enter__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__exit__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__enter__"
    ],
    "numpy.distutils.tests.test_exec_command.test_exec_command_stderr": [
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__exit__",
        "numpy.distutils.exec_command.exec_command",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__enter__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__exit__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__enter__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__exit__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__enter__"
    ],
    "numpy.distutils.tests.test_exec_command.TestExecCommand.setup": [
        "numpy.distutils.exec_command.get_pythonexe"
    ],
    "numpy.distutils.tests.test_exec_command.TestExecCommand.check_nt": [
        "numpy.distutils.exec_command.get_pythonexe",
        "numpy.testing.assert_",
        "numpy.distutils.exec_command.exec_command"
    ],
    "numpy.distutils.tests.test_exec_command.TestExecCommand.check_posix": [
        "numpy.distutils.exec_command.get_pythonexe",
        "numpy.testing.assert_",
        "numpy.distutils.exec_command.exec_command"
    ],
    "numpy.distutils.tests.test_exec_command.TestExecCommand.check_basic": [
        "numpy.distutils.exec_command.get_pythonexe",
        "numpy.testing.assert_",
        "numpy.distutils.exec_command.exec_command"
    ],
    "numpy.distutils.tests.test_exec_command.TestExecCommand.check_execute_in": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.distutils.exec_command.get_pythonexe",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.distutils.exec_command.exec_command",
        "numpy.core.defchararray.join",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.tests.test_exec_command.TestExecCommand.test_basic": [
        "numpy.distutils.tests.test_exec_command.TestExecCommand.check_nt",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__exit__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr",
        "numpy.distutils.tests.test_exec_command.TestExecCommand.check_posix",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__exit__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__enter__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout",
        "numpy.distutils.tests.test_exec_command.TestExecCommand.check_execute_in",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__enter__"
    ],
    "numpy.distutils.tests.test_fcompiler_nagfor.TestNagFCompilerVersions.test_version_match": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match",
        "numpy.testing.assert_"
    ],
    "numpy.distutils.tests.test_fcompiler_intel.TestIntelFCompilerVersions.test_32bit_version": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match",
        "numpy.testing.assert_"
    ],
    "numpy.distutils.tests.test_fcompiler_intel.TestIntelEM64TFCompilerVersions.test_64bit_version": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match",
        "numpy.testing.assert_"
    ],
    "numpy.distutils.tests.test_misc_util.TestAppendpath.test_1": [
        "numpy.testing.assert_equal",
        "numpy.distutils.misc_util.appendpath"
    ],
    "numpy.distutils.tests.test_misc_util.TestAppendpath.test_2": [
        "numpy.testing.assert_equal",
        "numpy.distutils.misc_util.appendpath"
    ],
    "numpy.distutils.tests.test_misc_util.TestAppendpath.test_3": [
        "numpy.testing.assert_equal",
        "numpy.distutils.misc_util.appendpath"
    ],
    "numpy.distutils.tests.test_misc_util.TestMinrelpath.test_1": [
        "numpy.distutils.misc_util.minrelpath",
        "numpy.testing.assert_equal"
    ],
    "numpy.distutils.tests.test_misc_util.TestGpaths.test_gpaths": [
        "numpy.testing.assert_",
        "numpy.distutils.misc_util.gpaths",
        "numpy.distutils.misc_util.minrelpath"
    ],
    "numpy.distutils.tests.test_misc_util.TestSharedExtension.test_get_shared_lib_extension": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.distutils.misc_util.get_shared_lib_extension"
    ],
    "numpy.distutils.tests.test_misc_util.test_installed_npymath_ini": [
        "numpy.distutils.misc_util.get_info"
    ],
    "numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple": [
        "numpy.core.tests.test_umath.TestSubclass.test_subclass_op.simple",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.distutils.npy_pkg_config.read_config",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.tests.test_npy_pkg_config.TestLibraryInfo.test_simple_variable": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.distutils.npy_pkg_config.read_config",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_cflags": [
        "numpy.distutils.npy_pkg_config.parse_flags",
        "numpy.testing.assert_"
    ],
    "numpy.distutils.tests.test_npy_pkg_config.TestParseFlags.test_simple_lflags": [
        "numpy.distutils.npy_pkg_config.parse_flags",
        "numpy.testing.assert_"
    ],
    "numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_g77_version": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match",
        "numpy.testing.assert_"
    ],
    "numpy.distutils.tests.test_fcompiler_gnu.TestG77Versions.test_not_g77": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match",
        "numpy.testing.assert_"
    ],
    "numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions.test_gfortran_version": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match",
        "numpy.testing.assert_"
    ],
    "numpy.distutils.tests.test_fcompiler_gnu.TestGFortranVersions.test_not_gfortran": [
        "numpy.distutils.fcompiler.nag.BaseNAGFCompiler.version_match",
        "numpy.distutils.fcompiler.new_fcompiler",
        "numpy.distutils.fcompiler.gnu.GnuFCompiler.version_match",
        "numpy.testing.assert_"
    ],
    "numpy.ma.bench.timer": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.int",
        "numpy.min",
        "numpy.floor",
        "numpy.log10",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.ma.bench.compare_functions_1v": [
        "numpy.ma.bench.timer"
    ],
    "numpy.ma.bench.compare_methods": [
        "numpy.ma.bench.timer"
    ],
    "numpy.ma.bench.compare_functions_2v": [
        "numpy.ma.bench.timer"
    ],
    "numpy.ma.testutils.approx": [
        "numpy.lib.user_array.container.astype",
        "numpy.float_",
        "numpy.less_equal"
    ],
    "numpy.ma.testutils.almost": [
        "numpy.lib.user_array.container.astype",
        "numpy.ravel",
        "numpy.float_",
        "numpy.core.fromnumeric.ravel",
        "numpy.around",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.ravel"
    ],
    "numpy.ma.testutils._assert_equal_on_sequences": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.testutils.assert_equal_records": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.testutils.assert_equal": [
        "numpy.ndarray",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.testutils._assert_equal_on_sequences",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.testutils.fail_if_equal": [
        "numpy.ndarray",
        "numpy.ma.testutils.fail_if_array_equal",
        "numpy.ma.testutils.fail_if_equal"
    ],
    "numpy.ma.testutils.assert_almost_equal": [
        "numpy.abs",
        "numpy.ma.core.MaskedArray.round",
        "numpy.ndarray",
        "numpy.ma.testutils.assert_array_almost_equal",
        "numpy.round"
    ],
    "numpy.ma.testutils.assert_array_compare": [
        "numpy.testing._private.utils.assert_array_compare",
        "numpy.ma.testutils.assert_array_compare",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_compare",
        "numpy.testing.assert_array_compare"
    ],
    "numpy.ma.testutils.assert_array_equal": [
        "numpy.ma.testutils.assert_array_compare"
    ],
    "numpy.ma.testutils.fail_if_array_equal.compare": [
        "numpy.ma.testutils.approx",
        "numpy.alltrue"
    ],
    "numpy.ma.testutils.fail_if_array_equal": [
        "numpy.ma.testutils.fail_if_array_equal.compare",
        "numpy.ma.testutils.assert_array_compare"
    ],
    "numpy.ma.testutils.assert_array_approx_equal.compare": [
        "numpy.ma.testutils.approx"
    ],
    "numpy.ma.testutils.assert_array_approx_equal": [
        "numpy.ma.testutils.assert_array_approx_equal.compare",
        "numpy.ma.testutils.assert_array_compare"
    ],
    "numpy.ma.testutils.assert_array_almost_equal.compare": [
        "numpy.ma.testutils.almost"
    ],
    "numpy.ma.testutils.assert_array_almost_equal": [
        "numpy.ma.testutils.assert_array_almost_equal.compare",
        "numpy.ma.testutils.assert_array_compare"
    ],
    "numpy.ma.testutils.assert_array_less": [
        "numpy.ma.testutils.assert_array_compare"
    ],
    "numpy.ma.testutils.assert_mask_equal": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.testing.assert_"
    ],
    "numpy.ma.timer_comparison.ModuleTester.assert_array_compare": [
        "numpy.ndarray",
        "numpy.isnan",
        "numpy.float_"
    ],
    "numpy.ma.timer_comparison.ModuleTester.assert_array_equal": [
        "numpy.ma.timer_comparison.ModuleTester.assert_array_compare"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_0": [
        "numpy.array"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_1": [
        "numpy.core.fromnumeric.any",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.where",
        "numpy.array"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_2": [
        "numpy.arange",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_3": [
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_4": [
        "numpy.transpose",
        "numpy.take",
        "numpy.arange",
        "numpy.outer",
        "numpy.inner"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_5": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal",
        "numpy.float_"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_6": [
        "numpy.float_"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_7": [
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.core.fromnumeric",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f"
    ],
    "numpy.ma.timer_comparison.ModuleTester.test_99": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.arange",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.timer_comparison.ModuleTester.assert_array_equal",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.average",
        "numpy.fmax.reduce",
        "numpy.ma.extras.average",
        "numpy.lib.function_base.average"
    ],
    "numpy.ma.mrecords._getformats": [
        "numpy.core.numerictypes._typedict",
        "numpy.asarray"
    ],
    "numpy.ma.mrecords._checknames": [
        "numpy.dtype",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.mrecords._get_fieldmask": [
        "numpy.empty"
    ],
    "numpy.ma.mrecords.MaskedRecords": [
        "numpy.ma.mrecords.MaskedRecords._getfieldmask",
        "numpy.ma.mrecords.MaskedRecords._getdata",
        "numpy.ma.MaskedArray"
    ],
    "numpy.ma.mrecords.MaskedRecords.__new__": [
        "numpy.size",
        "numpy.reshape",
        "numpy.resize",
        "numpy.array"
    ],
    "numpy.ma.mrecords.MaskedRecords.__array_finalize__": [
        "numpy.core.fromnumeric.shape",
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.shape",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.recarray",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.mrecords.MaskedRecords._getdata": [
        "numpy.recarray"
    ],
    "numpy.ma.mrecords.MaskedRecords.__len__": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.mrecords.MaskedRecords.__getattribute__": [
        "numpy.core.fromnumeric.any",
        "numpy.ndarray",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.ma.MaskedArray"
    ],
    "numpy.ma.mrecords.MaskedRecords.__setattr__": [
        "numpy.ma.__getattribute__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__",
        "numpy.core.records.record.__getattribute__",
        "numpy.__getattribute__",
        "numpy.lib.user_array.container.__setattr__",
        "numpy.core.records.record.__setattr__",
        "numpy.lib.polynomial.poly1d.__setitem__",
        "numpy.ma.core.MaskedArray.__setitem__",
        "numpy.core.records.recarray.__getattribute__",
        "numpy.core.records.recarray.__setattr__",
        "numpy.lib.user_array.container.__setitem__",
        "numpy.ma.core.MaskedArray.__setattr__",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.distutils.npy_pkg_config.VariableSet.__setitem__",
        "numpy.ma.mrecords.MaskedRecords.__getattribute__",
        "numpy.ma.mrecords.MaskedRecords.__setattr__",
        "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject.__setitem__",
        "numpy.ma.mrecords.MaskedRecords.__setitem__",
        "npy_tempita.bunch.__setattr__",
        "numpy.lib.npyio.BagObj.__getattribute__",
        "numpy.ma.core.MaskedIterator.__setitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__setitem__"
    ],
    "numpy.ma.mrecords.MaskedRecords.__getitem__": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.recarray",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.MaskedArray",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.mrecords.MaskedRecords.__str__": [
        "numpy.size",
        "numpy.core.fromnumeric.size",
        "numpy.ma.core.size"
    ],
    "numpy.ma.mrecords.MaskedRecords.__repr__": [
        "numpy.insert",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.lib.function_base.insert"
    ],
    "numpy.ma.mrecords.MaskedRecords.view": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.dtype",
        "numpy.ma.masked.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.mrecords.MaskedRecords.copy": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.MaskedArray.view",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.masked.view",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.mrecords.MaskedRecords.tolist": [
        "numpy.array"
    ],
    "numpy.ma.mrecords.MaskedRecords.__getstate__": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.MaskedArray.tobytes",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.ma.mrecords.MaskedRecords.__setstate__": [
        "numpy.polynomial._polybase.ABCPolyBase.__setstate__",
        "numpy.dtype",
        "numpy.ma.core.MaskedArray.__setstate__",
        "numpy.ma.mrecords.MaskedRecords.__setstate__"
    ],
    "numpy.ma.mrecords.MaskedRecords.__reduce__": [
        "numpy.ma.mrecords.MaskedRecords.__getstate__",
        "numpy.ma.mrecords._mrreconstruct"
    ],
    "numpy.ma.mrecords._mrreconstruct": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ndarray.__new__",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.mrecords.fromarrays": [
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.mrecords.fromrecords": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.array",
        "numpy.ma.MaskedArray",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.ma.mrecords._guessvartypes": [
        "numpy.asarray",
        "numpy.dtype",
        "numpy.ma.append",
        "numpy.append",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.mrecords.openfile": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.ma.mrecords.fromtextfile": [
        "numpy.ma.mrecords.openfile",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.strip",
        "numpy.ma.masked_array",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.ma.mrecords.fromarrays",
        "numpy.ma.mrecords._guessvartypes"
    ],
    "numpy.ma.mrecords.addfield": [
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.recarray",
        "numpy.ma.array",
        "numpy.dtype"
    ],
    "numpy.ma.extras.issequence": [
        "numpy.ndarray"
    ],
    "numpy.ma.extras.masked_all": [
        "numpy.ones",
        "numpy.empty"
    ],
    "numpy.ma.extras.masked_all_like": [
        "numpy.core.fromnumeric.shape",
        "numpy.ones",
        "numpy.ma.core.MaskedArray.view",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.ma.extras._fromnxfunction.__init__": [
        "numpy.ma.extras._fromnxfunction.getdoc"
    ],
    "numpy.ma.extras._fromnxfunction.getdoc": [
        "numpy.ma.core.get_object_signature",
        "numpy"
    ],
    "numpy.ma.extras._fromnxfunction_single": [
        "numpy.ma.extras._fromnxfunction"
    ],
    "numpy.ma.extras._fromnxfunction_single.__call__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ndarray",
        "numpy.asarray",
        "numpy"
    ],
    "numpy.ma.extras._fromnxfunction_seq": [
        "numpy.ma.extras._fromnxfunction"
    ],
    "numpy.ma.extras._fromnxfunction_seq.__call__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy"
    ],
    "numpy.ma.extras._fromnxfunction_args": [
        "numpy.ma.extras._fromnxfunction"
    ],
    "numpy.ma.extras._fromnxfunction_args.__call__": [
        "numpy.asarray",
        "numpy",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.extras.issequence",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.extras._fromnxfunction_allargs": [
        "numpy.ma.extras._fromnxfunction"
    ],
    "numpy.ma.extras._fromnxfunction_allargs.__call__": [
        "numpy.asarray",
        "numpy",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.extras.apply_along_axis": [
        "numpy.ma.extras.flatten_inplace",
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.fromnumeric.take",
        "numpy.ma.core.MaskedArray.take",
        "numpy.asarray",
        "numpy.dtype",
        "numpy.isscalar",
        "numpy.product",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.core.max",
        "numpy.ma.core.take",
        "numpy.max",
        "numpy.ma.append",
        "numpy.take",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.ma.core.default_fill_value",
        "numpy.lib.function_base.append",
        "numpy.zeros",
        "numpy.ma.core.append"
    ],
    "numpy.ma.extras.apply_over_axes": [
        "numpy.core.fromnumeric.ndim",
        "numpy.expand_dims",
        "numpy.ma.core.expand_dims",
        "numpy.lib.shape_base.expand_dims",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.extras.average": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.ndarray.sum",
        "numpy.True_.copy",
        "numpy.asanyarray",
        "numpy.result_type",
        "numpy.broadcast_to",
        "numpy.core.fromnumeric.sum",
        "numpy.ma.copy",
        "numpy.bool_",
        "numpy.ma.sum",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.sum",
        "numpy.lib.user_array.container.copy",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.copy"
    ],
    "numpy.ma.extras.median": [
        "numpy.median",
        "numpy.ma.extras._median",
        "numpy.ndarray",
        "numpy.lib.function_base._ureduce"
    ],
    "numpy.ma.extras._median": [
        "numpy.ndarray.sum",
        "numpy.ma.core.is_masked",
        "numpy.ma.extras._median.replace_masked",
        "numpy.issubdtype",
        "numpy.meshgrid",
        "numpy.ma.mean",
        "numpy.core.fromnumeric.sum",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.ma.is_masked",
        "numpy.true_divide",
        "numpy.lib.utils._median_nancheck",
        "numpy.ma.minimum_fill_value",
        "numpy.minimum",
        "numpy.ma.sum",
        "numpy.core.fromnumeric.mean",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.divmod",
        "numpy.sum",
        "numpy.copyto",
        "numpy.mean",
        "numpy.all",
        "numpy.ma.core.minimum_fill_value",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.ma.extras._median.replace_masked": [
        "numpy.ma.is_masked",
        "numpy.ma.core.is_masked",
        "numpy.all",
        "numpy.ma.minimum_fill_value",
        "numpy.ma.core.minimum_fill_value"
    ],
    "numpy.ma.extras.compress_nd": [
        "numpy.core.numeric.normalize_axis_tuple",
        "numpy.array"
    ],
    "numpy.ma.extras.compress_rowcols": [
        "numpy.ma.extras.compress_nd",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.extras.compress_rows": [
        "numpy.ma.extras.compress_rowcols"
    ],
    "numpy.ma.extras.compress_cols": [
        "numpy.ma.extras.compress_rowcols"
    ],
    "numpy.ma.extras.ediff1d": [
        "numpy.insert",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.append",
        "numpy.ma.extras._fromnxfunction_seq",
        "numpy.append",
        "numpy.lib.function_base.insert",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.extras.unique": [
        "numpy.unique",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.extras.intersect1d": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.ma.extras.unique",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.sort",
        "numpy.ma.core.concatenate",
        "numpy.ma.concatenate",
        "numpy.concatenate"
    ],
    "numpy.ma.extras.setxor1d": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.ma.core.sort",
        "numpy.ma.core.filled",
        "numpy.ma.core.concatenate",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.ma.concatenate",
        "numpy.core.fromnumeric.size",
        "numpy.ma.extras.unique",
        "numpy.size",
        "numpy.ma.core.size",
        "numpy.concatenate"
    ],
    "numpy.ma.extras.in1d": [
        "numpy.ma.extras.unique",
        "numpy.ma.core.argsort",
        "numpy.core.fromnumeric.argsort",
        "numpy.ma.core.concatenate",
        "numpy.ma.concatenate",
        "numpy.argsort",
        "numpy.ma.core.MaskedArray.argsort",
        "numpy.core.defchararray.chararray.argsort",
        "numpy.concatenate"
    ],
    "numpy.ma.extras.isin": [
        "numpy.core.numeric.asarray",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.asarray",
        "numpy.shape",
        "numpy.char.asarray",
        "numpy.core.defchararray.asarray",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.ma.core.asarray",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.extras.union1d": [
        "numpy.ma.concatenate",
        "numpy.ma.extras.unique",
        "numpy.concatenate",
        "numpy.ma.core.concatenate"
    ],
    "numpy.ma.extras.setdiff1d": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.extras.unique",
        "numpy.ma.extras.in1d",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel"
    ],
    "numpy.ma.extras._covhelper": [
        "numpy.rec.array",
        "numpy.core.fromnumeric.shape",
        "numpy.core.records.array",
        "numpy.core.fromnumeric.any",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.mean",
        "numpy.char.array",
        "numpy.ma.core.getmaskarray",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.array",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.concatenate",
        "numpy.logical_or",
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.defchararray.array",
        "numpy.ma.mean",
        "numpy.ma.core.concatenate",
        "numpy.int",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.concatenate",
        "numpy.core.fromnumeric.mean"
    ],
    "numpy.ma.extras.cov": [
        "numpy.squeeze",
        "numpy.int",
        "numpy.core.fromnumeric.squeeze",
        "numpy.ma.extras._covhelper",
        "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze.squeeze",
        "numpy.dot",
        "numpy.matrixlib.defmatrix.matrix.squeeze"
    ],
    "numpy.ma.extras.corrcoef": [
        "numpy.maximum.outer",
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.logical_xor.reduce",
        "numpy.minimum.outer",
        "numpy.multiply.reduce",
        "numpy.multiply.outer",
        "numpy.ma.core._extrema_operation.outer",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.core.fromnumeric.squeeze",
        "numpy.core.fromnumeric.diagonal",
        "numpy.lib.scimath.sqrt",
        "numpy.ma.extras._fromnxfunction_single",
        "numpy.dot",
        "numpy.logical_or.reduce",
        "numpy.core.numeric.outer",
        "numpy.squeeze",
        "numpy.outer",
        "numpy.logical_and.reduce",
        "numpy.matrixlib.defmatrix.matrix.var",
        "numpy.diagonal",
        "numpy.ma.core.outer",
        "numpy.add.outer",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.ma.core._MaskedBinaryOperation.outer",
        "numpy.core.fromnumeric.var",
        "numpy.minimum.reduce",
        "numpy.sqrt",
        "numpy.lcm.reduce",
        "numpy.ma.core.MaskedArray.var",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.ma.extras._covhelper",
        "numpy.var",
        "numpy.divide.reduce",
        "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze.squeeze",
        "numpy.fmax.reduce",
        "numpy.matrixlib.defmatrix.matrix.squeeze"
    ],
    "numpy.ma.extras.MAxisConcatenator": [
        "numpy.lib.index_tricks.AxisConcatenator"
    ],
    "numpy.ma.extras.MAxisConcatenator.__getitem__": [
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__"
    ],
    "numpy.ma.extras.mr_class": [
        "numpy.ma.extras.MAxisConcatenator"
    ],
    "numpy.ma.extras.mr_class.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.ma.extras.flatnotmasked_edges": [
        "numpy.flatnonzero",
        "numpy.any",
        "numpy.array"
    ],
    "numpy.ma.extras.notmasked_edges": [
        "numpy.ma.extras.flatnotmasked_edges",
        "numpy.asarray",
        "numpy.indices"
    ],
    "numpy.ma.extras.flatnotmasked_contiguous": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.extras.notmasked_contiguous": [
        "numpy.ma.append",
        "numpy.ma.extras.flatnotmasked_contiguous",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.extras._ezclump": [
        "numpy.nonzero",
        "numpy.ma.nonzero",
        "numpy.core.fromnumeric.nonzero",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.extras.clump_unmasked": [
        "numpy.ma.extras._ezclump"
    ],
    "numpy.ma.extras.clump_masked": [
        "numpy.ma.core.getmask",
        "numpy.ma.extras._ezclump",
        "numpy.ma.getmask"
    ],
    "numpy.ma.extras.vander": [
        "numpy.vander"
    ],
    "numpy.ma.extras.polyfit": [
        "numpy.polyfit",
        "numpy.ma.extras.mask_rows"
    ],
    "numpy.ma.core._deprecate_argsort_axis": [
        "numpy.ma.core.MaskedArrayFutureWarning"
    ],
    "numpy.ma.core.MaskError": [
        "numpy.ma.core.MAError"
    ],
    "numpy.ma.core._recursive_fill_value": [
        "numpy.ma.core._recursive_fill_value",
        "numpy.full",
        "numpy.array"
    ],
    "numpy.ma.core._get_dtype_of": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.ma.core.default_fill_value._scalar_fill_value": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.ma.core.default_fill_value": [
        "numpy.ma.core.default_fill_value._scalar_fill_value",
        "numpy.ma.core._get_dtype_of",
        "numpy.ma.core._recursive_fill_value"
    ],
    "numpy.ma.core._extremum_fill_value": [
        "numpy.ma.core._extremum_fill_value._scalar_fill_value",
        "numpy.ma.core._get_dtype_of",
        "numpy.ma.core._recursive_fill_value"
    ],
    "numpy.ma.core.minimum_fill_value": [
        "numpy.core.numerictypes._typedict",
        "numpy.ma.core._extremum_fill_value"
    ],
    "numpy.ma.core.maximum_fill_value": [
        "numpy.ma.core._extremum_fill_value",
        "numpy.core.numerictypes._typedict"
    ],
    "numpy.ma.core._recursive_set_fill_value": [
        "numpy.ma.append",
        "npy_tempita._looper.loop_pos.item",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.resize",
        "numpy.ma.core.append",
        "numpy.ma.core._recursive_set_fill_value"
    ],
    "numpy.ma.core._check_fill_value": [
        "numpy.dtype",
        "numpy.ma.core.default_fill_value",
        "numpy.void",
        "numpy.ndarray",
        "numpy.asarray",
        "numpy.ma.core._recursive_set_fill_value",
        "numpy.array"
    ],
    "numpy.ma.core.set_fill_value": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.get_fill_value": [
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.default_fill_value"
    ],
    "numpy.ma.core.common_fill_value": [
        "numpy.ma.core.get_fill_value"
    ],
    "numpy.ma.core.filled": [
        "numpy.ndarray",
        "numpy.array"
    ],
    "numpy.ma.core.get_masked_subclass": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.getdata": [
        "numpy.ndarray",
        "numpy.array"
    ],
    "numpy.ma.core.fix_invalid": [
        "numpy.isfinite",
        "numpy.ma.core.MaskedArray",
        "numpy.bool_",
        "numpy.ma.masked_array",
        "numpy.logical_not"
    ],
    "numpy.ma.core._DomainCheckInterval.__call__": [
        "numpy.errstate"
    ],
    "numpy.ma.core._DomainTan.__call__": [
        "numpy.errstate"
    ],
    "numpy.ma.core._DomainSafeDivide.__call__": [
        "numpy.errstate",
        "numpy.asarray"
    ],
    "numpy.ma.core._DomainGreater.__call__": [
        "numpy.errstate"
    ],
    "numpy.ma.core._DomainGreaterEqual.__call__": [
        "numpy.errstate"
    ],
    "numpy.ma.core._MaskedUnaryOperation": [
        "numpy.ma.core._MaskedUFunc"
    ],
    "numpy.ma.core._MaskedUnaryOperation.__init__": [
        "numpy.ma.core._MaskedUFunc.__init__"
    ],
    "numpy.ma.core._MaskedUnaryOperation.__call__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.core.MaskedConstant",
        "numpy.errstate",
        "numpy.bool_",
        "numpy.copyto",
        "numpy.ma.core.get_masked_subclass",
        "numpy.ma.core.getdata",
        "numpy.ma.core.getmask"
    ],
    "numpy.ma.core._MaskedBinaryOperation": [
        "numpy.ma.core._MaskedUFunc"
    ],
    "numpy.ma.core._MaskedBinaryOperation.__init__": [
        "numpy.ma.core._MaskedUFunc.__init__"
    ],
    "numpy.ma.core._MaskedBinaryOperation.__call__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.seterr",
        "numpy.ma.core.MaskedConstant",
        "numpy.errstate",
        "numpy.ma.core.MaskedArray",
        "numpy.bool_",
        "numpy.copyto",
        "numpy.ma.core.get_masked_subclass",
        "numpy.ma.core.getdata",
        "numpy.ma.core.getmask",
        "numpy.ma.core.getmaskarray"
    ],
    "numpy.ma.core._MaskedBinaryOperation.reduce": [
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.filled",
        "numpy.ma.core.get_masked_subclass",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.fmin.reduce",
        "numpy.ma.core.MaskedArray.view",
        "numpy.logical_xor.reduce",
        "numpy.ma.core.getmask",
        "numpy.ma.core.make_mask",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedConstant",
        "numpy.maximum.reduce",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.multiply.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.add.reduce",
        "numpy.ma.core.shape",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.bool_",
        "numpy.power.reduce",
        "numpy.minimum.reduce",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.ma.core._MaskedBinaryOperation.outer": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.numeric.outer",
        "numpy.outer",
        "numpy.ma.core.get_masked_subclass",
        "numpy.ma.core.getdata",
        "numpy.ma.core._MaskedBinaryOperation.outer",
        "numpy.copyto",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.core.getmaskarray",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.minimum.outer",
        "numpy.maximum.outer",
        "numpy.ma.core.MaskedConstant",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.multiply.outer",
        "numpy.ma.core._extrema_operation.outer",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.bool_",
        "numpy.ma.core.outer",
        "numpy.add.outer",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.ma.core._MaskedBinaryOperation.accumulate": [
        "numpy.ma.masked.view",
        "numpy.multiply.accumulate",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.filled",
        "numpy.ma.core.get_masked_subclass",
        "numpy.subtract.accumulate",
        "numpy.add.accumulate",
        "numpy.divide.accumulate",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core._MaskedBinaryOperation.accumulate"
    ],
    "numpy.ma.core._DomainedBinaryOperation": [
        "numpy.ma.core._MaskedUFunc"
    ],
    "numpy.ma.core._DomainedBinaryOperation.__init__": [
        "numpy.ma.core._MaskedUFunc.__init__"
    ],
    "numpy.ma.core._DomainedBinaryOperation.__call__": [
        "numpy.ma.core.MaskedConstant",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.core.getmask",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.core.get_masked_subclass",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.getdata",
        "numpy.errstate",
        "numpy.ma.core.MaskedArray",
        "numpy.can_cast",
        "numpy.copyto",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.core._replace_dtype_fields_recursive": [
        "numpy.dtype",
        "numpy.ma.append",
        "numpy.append",
        "numpy.ma.core._replace_dtype_fields_recursive",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.ma.core._replace_dtype_fields": [
        "numpy.dtype",
        "numpy.ma.core._replace_dtype_fields_recursive"
    ],
    "numpy.ma.core.make_mask_descr": [
        "numpy.ma.core._replace_dtype_fields",
        "numpy.bool_"
    ],
    "numpy.ma.core.getmask": [
        "numpy.bool_"
    ],
    "numpy.ma.core.getmaskarray": [
        "numpy.ma.core.getmask",
        "numpy.shape",
        "numpy.ma.core.make_mask_none",
        "numpy.bool_"
    ],
    "numpy.ma.core.is_mask": [
        "numpy.bool_"
    ],
    "numpy.ma.core._shrink_mask": [
        "numpy.bool_"
    ],
    "numpy.ma.core.make_mask": [
        "numpy.ma.core._shrink_mask",
        "numpy.ndarray",
        "numpy.bool_",
        "numpy.ma.core.filled",
        "numpy.ones",
        "numpy.ma.core.make_mask_descr",
        "numpy.array"
    ],
    "numpy.ma.core.make_mask_none": [
        "numpy.zeros",
        "numpy.bool_",
        "numpy.ma.core.make_mask_descr"
    ],
    "numpy.ma.core.mask_or._recursive_mask_or": [
        "numpy.ma.core.mask_or._recursive_mask_or"
    ],
    "numpy.ma.core.mask_or": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.is_mask",
        "numpy.ma.core.make_mask",
        "numpy.shape",
        "numpy.ma.core.mask_or._recursive_mask_or",
        "numpy.core.fromnumeric.shape",
        "numpy.bool_",
        "numpy.empty",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.core.flatten_mask._flatsequence": [
        "numpy.ma.core.flatten_mask._flatsequence"
    ],
    "numpy.ma.core.flatten_mask": [
        "numpy.ma.core.flatten_mask._flatsequence",
        "numpy.asarray",
        "numpy.array",
        "numpy.ma.core.flatten_mask._flatmask"
    ],
    "numpy.ma.core._check_mask_axis": [
        "numpy.bool_"
    ],
    "numpy.ma.core.masked_where": [
        "numpy.ma.core._shrink_mask",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.mask_or",
        "numpy.ma.core.MaskedArray",
        "numpy.array"
    ],
    "numpy.ma.core.masked_greater": [
        "numpy.ma.core._MaskedBinaryOperation",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core.masked_where"
    ],
    "numpy.ma.core.masked_greater_equal": [
        "numpy.ma.core._MaskedBinaryOperation",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core.masked_where"
    ],
    "numpy.ma.core.masked_less": [
        "numpy.ma.core._MaskedBinaryOperation",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core.masked_where"
    ],
    "numpy.ma.core.masked_less_equal": [
        "numpy.ma.core._MaskedBinaryOperation",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core.masked_where"
    ],
    "numpy.ma.core.masked_not_equal": [
        "numpy.ma.core._MaskedBinaryOperation",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core.masked_where"
    ],
    "numpy.ma.core.masked_equal": [
        "numpy.ma.core._MaskedBinaryOperation",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core.masked_where"
    ],
    "numpy.ma.core.masked_inside": [
        "numpy.ma.core.filled",
        "numpy.ma.core.masked_where"
    ],
    "numpy.ma.core.masked_outside": [
        "numpy.ma.core.masked_where",
        "numpy.ma.core.filled"
    ],
    "numpy.ma.core.masked_object": [
        "numpy.ma.core.mask_or",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.MaskedArray",
        "numpy.bool_",
        "numpy.ma.core.isMaskedArray",
        "numpy.ma.masked_array",
        "numpy.asarray"
    ],
    "numpy.ma.core.masked_values": [
        "numpy.isclose",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.filled",
        "numpy.ma.masked_array",
        "numpy.issubdtype"
    ],
    "numpy.ma.core.masked_invalid": [
        "numpy.isfinite",
        "numpy.ma.core.MaskedArray",
        "numpy.bool_",
        "numpy.array",
        "numpy.ma.core.getdata"
    ],
    "numpy.ma.core._MaskedPrintOption": [
        "numpy.ma.core._MaskedPrintOption.__str__"
    ],
    "numpy.ma.core._recursive_printoption": [
        "numpy.copyto",
        "numpy.ma.core._recursive_printoption"
    ],
    "numpy.ma.core._recursive_filled": [
        "numpy.copyto",
        "numpy.ma.core._recursive_filled"
    ],
    "numpy.ma.core.flatten_structured_array.flatten_sequence": [
        "numpy.ma.core.flatten_structured_array.flatten_sequence"
    ],
    "numpy.ma.core.flatten_structured_array": [
        "numpy.ma.core.MaskedArray",
        "numpy.asanyarray",
        "numpy.ma.core.flatten_structured_array.flatten_sequence",
        "numpy.array"
    ],
    "numpy.ma.core._arraymethod.wrapped_method": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.bool_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.core._arraymethod": [
        "numpy.ndarray",
        "numpy.ma.core._arraymethod.wrapped_method",
        "numpy"
    ],
    "numpy.ma.core.MaskedIterator": [
        "numpy.ma.core.MaskedIterator.__next__"
    ],
    "numpy.ma.core.MaskedIterator.__init__": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.bool_",
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.ma.core.MaskedIterator.__getitem__": [
        "numpy.core.records.record.__getitem__",
        "numpy.lib.user_array.container.__getitem__",
        "numpy.core.fromnumeric.shape",
        "numpy.lib.index_tricks.nd_grid.__getitem__",
        "numpy.void",
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__",
        "numpy.lib.index_tricks.IndexExpression.__getitem__",
        "numpy.lib._datasource._FileOpeners.__getitem__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__",
        "numpy.ndarray",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.numerictypes._typedict.__getitem__",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__",
        "numpy.ndarray.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__",
        "numpy.ma.core.MaskedConstant",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__",
        "numpy.lib.polynomial.poly1d.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__getitem__",
        "numpy.core.memmap.memmap.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.mvoid",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__getitem__",
        "numpy.core.defchararray.chararray.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.view",
        "npy_tempita.bunch.__getitem__",
        "numpy.ma.core.shape",
        "numpy.lib.npyio.NpzFile.__getitem__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__",
        "numpy.matrixlib.defmatrix.matrix.__getitem__",
        "numpy.ma.core.MaskedIterator.__getitem__"
    ],
    "numpy.ma.core.MaskedIterator.__setitem__": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.ma.core.getdata",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.core.getmaskarray"
    ],
    "numpy.ma.core.MaskedIterator.__next__": [
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.ma.core.mvoid",
        "numpy.void",
        "npy_tempita.compat3.next",
        "numpy.ma.core.MaskedIterator.__next__",
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.ma.core.MaskedArray": [
        "numpy.ma.core._arraymethod",
        "numpy.ma.core.MaskedArray.prod",
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray._get_data",
        "numpy.ma.core.MaskedArray._get_flat",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.core.MaskedArray._set_flat",
        "numpy.ma.core.MaskedArray._get_mask",
        "numpy.bool_",
        "numpy.ma.core.MaskedArray.get_fill_value",
        "numpy.ma.core.MaskedArray.set_fill_value",
        "numpy.ma.core.MaskedArray.get_imag",
        "numpy.ma.core.MaskedArray._get_recordmask",
        "numpy.ma.core.MaskedArray.get_real",
        "numpy.ma.core.MaskedArray.toflex"
    ],
    "numpy.ma.core.MaskedArray.__new__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ndarray",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.__new__._recursive_or",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.make_mask_descr",
        "numpy.ma.core.getmask",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.bool_",
        "numpy.ones",
        "numpy.ma.core.MaskError",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.zeros",
        "numpy.resize",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.logical_or",
        "numpy.ma.core._check_fill_value"
    ],
    "numpy.ma.core.MaskedArray.__new__._recursive_or": [
        "numpy.ma.core.MaskedArray.__new__._recursive_or"
    ],
    "numpy.ma.core.MaskedArray._update_from": [
        "numpy.ndarray",
        "numpy.lib._iotools.StringConverter.update"
    ],
    "numpy.ma.core.MaskedArray.__array_finalize__": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__array_interface__",
        "numpy.ctypeslib._ndptr.__array_interface__",
        "numpy.ctypeslib.prep_simple.__array_interface__",
        "numpy.ctypeslib.prep_array.__array_interface__",
        "numpy.ma.core._check_fill_value",
        "numpy.ndarray",
        "numpy.ma.core.make_mask_descr",
        "numpy.ma.core.getmask",
        "numpy.ma.core.getmaskarray",
        "numpy.shape",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__array_interface__",
        "numpy.lib.polynomial.poly1d.order",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__array_interface__",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.core.MaskedArray.__array_wrap__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.core.MaskedConstant",
        "numpy.lib.function_base.copy",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core.mask_or",
        "numpy.ma.copy",
        "numpy.ma.core.filled",
        "numpy.bool_",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.errstate",
        "numpy.copyto",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.core.MaskedArray.view": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.bool_",
        "numpy.ma.core.getmask",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.MaskedArray.__getitem__": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.core.MaskedArray.__getitem__._is_scalar",
        "numpy.ma.core.getmaskarray",
        "numpy.ma.core.MaskedArray.__getitem__._scalar_heuristic",
        "numpy.object_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.mvoid",
        "numpy.core.fromnumeric.all",
        "numpy.bool_",
        "numpy.void",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.all",
        "numpy.ndim",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core._check_fill_value"
    ],
    "numpy.ma.core.MaskedArray.__getitem__._is_scalar": [
        "numpy.ndarray"
    ],
    "numpy.ma.core.MaskedArray.__getitem__._scalar_heuristic": [
        "numpy.ndarray",
        "numpy.object_",
        "numpy.ndarray.__getitem__"
    ],
    "numpy.ma.core.MaskedArray.__setitem__": [
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.MaskError",
        "numpy.copyto",
        "numpy.ma.core.getmask",
        "numpy.shape",
        "numpy.ma.core.make_mask_none",
        "numpy.ma.core.mask_or",
        "numpy.ma.core.MaskedConstant",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_"
    ],
    "numpy.ma.core.MaskedArray.__setattr__": [
        "numpy.ndarray",
        "numpy.ma.core.make_mask_descr",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.ma.core.make_mask_none",
        "numpy.core.fromnumeric.shape",
        "numpy.bool_",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.core.MaskedArray.__setmask__": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.ma.core.make_mask_none",
        "numpy.array",
        "numpy.ma.core.MaskedConstant",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.int",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_"
    ],
    "numpy.ma.core.MaskedArray._get_mask": [
        "numpy.ma.core.make_mask_none"
    ],
    "numpy.ma.core.MaskedArray._get_recordmask": [
        "numpy.ma.core.flatten_structured_array",
        "numpy.ndarray",
        "numpy.all"
    ],
    "numpy.ma.core.MaskedArray.shrink_mask": [
        "numpy.ma.core._shrink_mask"
    ],
    "numpy.ma.core.MaskedArray._get_data": [
        "numpy.ndarray"
    ],
    "numpy.ma.core.MaskedArray._get_flat": [
        "numpy.ma.core.MaskedIterator",
        "numpy.ma.core.MaskedIterator.__init__"
    ],
    "numpy.ma.core.MaskedArray._set_flat": [
        "numpy.ma.core.MaskedArray.ravel"
    ],
    "numpy.ma.core.MaskedArray.get_fill_value": [
        "numpy.ndarray",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.core._check_fill_value"
    ],
    "numpy.ma.core.MaskedArray.set_fill_value": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.core._check_fill_value"
    ],
    "numpy.ma.core.MaskedArray.filled": [
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.copy",
        "numpy.choose",
        "numpy.copyto",
        "numpy.ma.core._check_fill_value",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core._shrink_mask",
        "numpy.shape",
        "numpy.array",
        "numpy.copy",
        "numpy.ma.core.MaskedConstant",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.asanyarray",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype",
        "numpy.lib.function_base.copy",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_",
        "numpy.ma.core._recursive_filled",
        "numpy.lib.user_array.container.copy"
    ],
    "numpy.ma.core.MaskedArray.compressed": [
        "numpy.ma.core._shrink_mask",
        "numpy.bool_",
        "numpy.logical_not"
    ],
    "numpy.ma.core.MaskedArray.compress": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core._shrink_mask",
        "numpy.ma.masked.view",
        "numpy.array",
        "numpy.bool_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.core.MaskedArray._insert_masked_print": [
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.split",
        "numpy.ma.core._replace_dtype_fields",
        "numpy.ma.core._shrink_mask",
        "numpy.shape",
        "numpy.concatenate",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_",
        "numpy.ma.core._MaskedPrintOption",
        "numpy.ma.core._recursive_printoption",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core._MaskedPrintOption.enabled"
    ],
    "numpy.ma.core.MaskedArray.__str__": [
        "numpy.ma.core.MaskedArray._insert_masked_print"
    ],
    "numpy.ma.core.MaskedArray.__unicode__": [
        "numpy.ma.core.MaskedArray._insert_masked_print"
    ],
    "numpy.ma.core.MaskedArray.__repr__": [
        "numpy.ma.core.MaskedArray._insert_masked_print",
        "numpy.ma.core.MaskedArray.__str__",
        "numpy.get_printoptions",
        "numpy.array2string",
        "numpy.core.arrayprint.dtype_is_implied",
        "numpy.all",
        "numpy.core.arrayprint.dtype_short_repr",
        "numpy.lib._datasource._FileOpeners.keys",
        "numpy.ndarray",
        "numpy.ma.core._shrink_mask",
        "numpy.ma.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.size",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.fromnumeric.ndim",
        "numpy.core.fromnumeric.size",
        "numpy.append",
        "numpy.size",
        "numpy.ma.core.append"
    ],
    "numpy.ma.core.MaskedArray._comparison": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.core.MaskedConstant",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.getmask",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core.mask_or",
        "numpy.broadcast_to",
        "numpy.where",
        "numpy.ma.copy",
        "numpy.bool_",
        "numpy.ones",
        "numpy.ma.core.getdata",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.core.MaskedArray.__eq__": [
        "numpy.ma.core.MaskedArray._comparison"
    ],
    "numpy.ma.core.MaskedArray.__ne__": [
        "numpy.ma.core.MaskedArray._comparison"
    ],
    "numpy.ma.core.MaskedArray.__add__": [
        "numpy.ma.core.MaskedArray._delegate_binop",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core._MaskedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__radd__": [
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core._MaskedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__sub__": [
        "numpy.ma.core.MaskedArray._delegate_binop",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core._MaskedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__rsub__": [
        "numpy.ma.core._MaskedBinaryOperation",
        "numpy.ma.core._MaskedBinaryOperation.__init__"
    ],
    "numpy.ma.core.MaskedArray.__mul__": [
        "numpy.ma.core.MaskedArray._delegate_binop",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core._MaskedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__rmul__": [
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core._MaskedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__div__": [
        "numpy.ma.core.MaskedArray._delegate_binop",
        "numpy.ma.core._DomainedBinaryOperation.__init__",
        "numpy.ma.core._DomainedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__truediv__": [
        "numpy.ma.core.MaskedArray._delegate_binop",
        "numpy.ma.core._DomainedBinaryOperation.__init__",
        "numpy.ma.core._DomainedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__rtruediv__": [
        "numpy.ma.core._DomainedBinaryOperation",
        "numpy.ma.core._DomainedBinaryOperation.__init__"
    ],
    "numpy.ma.core.MaskedArray.__floordiv__": [
        "numpy.ma.core.MaskedArray._delegate_binop",
        "numpy.ma.core._DomainedBinaryOperation.__init__",
        "numpy.ma.core._DomainedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__rfloordiv__": [
        "numpy.ma.core._DomainedBinaryOperation.__init__",
        "numpy.ma.core._DomainedBinaryOperation"
    ],
    "numpy.ma.core.MaskedArray.__pow__": [
        "numpy.ma.core.power",
        "numpy.ma.core.MaskedArray._delegate_binop"
    ],
    "numpy.ma.core.MaskedArray.__rpow__": [
        "numpy.ma.core.power"
    ],
    "numpy.ma.core.MaskedArray.__iadd__": [
        "numpy.lib.user_array.container.__iadd__",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.getdata",
        "numpy.ma.tests.test_subclassing.SubArray.__iadd__",
        "numpy.ma.core.getmask",
        "numpy.ma.core._shrink_mask",
        "numpy.shape",
        "numpy.ma.core.make_mask_none",
        "numpy.where",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_",
        "numpy.ma.core.MaskedArray.__iadd__"
    ],
    "numpy.ma.core.MaskedArray.__isub__": [
        "numpy.lib.user_array.container.__isub__",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.getdata",
        "numpy.ma.core.getmask",
        "numpy.shape",
        "numpy.ma.core.make_mask_none",
        "numpy.where",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_",
        "numpy.ma.core.MaskedArray.__isub__"
    ],
    "numpy.ma.core.MaskedArray.__imul__": [
        "numpy.lib.user_array.container.__imul__",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.getdata",
        "numpy.ma.core.getmask",
        "numpy.shape",
        "numpy.ma.core.make_mask_none",
        "numpy.where",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_",
        "numpy.ma.core.MaskedArray.__imul__",
        "numpy.matrixlib.defmatrix.matrix.__imul__"
    ],
    "numpy.ma.core.MaskedArray.__idiv__": [
        "numpy.lib.function_base.vectorize.__call__",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A.__call__",
        "numpy.lib._iotools.StringConverter.__call__",
        "numpy.divide",
        "numpy.testing._private.utils.suppress_warnings.__call__",
        "numpy.ma.core.getmask",
        "numpy.lib._iotools.LineSplitter.__call__",
        "numpy.multiply.__call__",
        "numpy.testing._private.parameterized.parameterized.__call__",
        "numpy.lib._iotools.NameValidator.__call__",
        "numpy.ma.core._extrema_operation.__call__",
        "numpy.ma.core.mask_or",
        "numpy.testing._private.pytesttester.PytestTester.__call__",
        "numpy.lib.user_array.container.__idiv__",
        "numpy.ma.extras._fromnxfunction.__call__",
        "numpy.where",
        "numpy.ma.core._frommethod.__call__",
        "numpy.core.arrayprint.IntegerFormat.__call__",
        "numpy.core.arrayprint.BoolFormat.__call__",
        "numpy.core.fromnumeric.any",
        "npy_tempita.TemplateDef.__call__",
        "numpy.core._internal.dummy_ctype.__call__",
        "numpy.ma.core._MaskedUnaryOperation.__call__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__call__",
        "numpy.f2py.auxfuncs.throw_error.__call__",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.lib.utils._Deprecate.__call__",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.polynomial._polybase.ABCPolyBase.__call__",
        "numpy.ma.core.getdata",
        "numpy.ma.core._MaskedBinaryOperation.__call__",
        "numpy.core.arrayprint._TimelikeFormat.__call__",
        "numpy.ma.core._DomainCheckInterval.__call__",
        "numpy.ma.core.MaskedArray.__idiv__",
        "numpy.core.arrayprint.FloatingFormat.__call__",
        "numpy.ma.core._DomainedBinaryOperation.__call__",
        "npy_tempita._Empty.__call__",
        "numpy.core.arrayprint.SubArrayFormat.__call__",
        "numpy._import_tools.PackageLoader.__call__",
        "numpy.ma.core._DomainTan.__call__",
        "numpy.lib.polynomial.poly1d.__call__",
        "numpy.core.arrayprint.StructuredVoidFormat.__call__",
        "numpy.ma.core._DomainSafeDivide.__call__",
        "numpy.ma.core._DomainGreater.__call__",
        "numpy.ma.core._convert2ma.__call__",
        "numpy.ma.core._DomainGreaterEqual.__call__"
    ],
    "numpy.ma.core.MaskedArray.__ifloordiv__": [
        "numpy.lib.function_base.vectorize.__call__",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A.__call__",
        "numpy.lib._iotools.StringConverter.__call__",
        "numpy.testing._private.utils.suppress_warnings.__call__",
        "numpy.ma.core.getmask",
        "numpy.lib._iotools.LineSplitter.__call__",
        "numpy.multiply.__call__",
        "numpy.testing._private.parameterized.parameterized.__call__",
        "numpy.lib._iotools.NameValidator.__call__",
        "numpy.ma.core._extrema_operation.__call__",
        "numpy.ma.core.mask_or",
        "numpy.testing._private.pytesttester.PytestTester.__call__",
        "numpy.ma.extras._fromnxfunction.__call__",
        "numpy.where",
        "numpy.ma.core._frommethod.__call__",
        "numpy.core.arrayprint.IntegerFormat.__call__",
        "numpy.core.arrayprint.BoolFormat.__call__",
        "numpy.core.fromnumeric.any",
        "npy_tempita.TemplateDef.__call__",
        "numpy.core._internal.dummy_ctype.__call__",
        "numpy.ma.core._MaskedUnaryOperation.__call__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__call__",
        "numpy.f2py.auxfuncs.throw_error.__call__",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.lib.utils._Deprecate.__call__",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.polynomial._polybase.ABCPolyBase.__call__",
        "numpy.ma.core.getdata",
        "numpy.ma.core._MaskedBinaryOperation.__call__",
        "numpy.core.arrayprint._TimelikeFormat.__call__",
        "numpy.ma.core._DomainCheckInterval.__call__",
        "numpy.core.arrayprint.FloatingFormat.__call__",
        "numpy.ma.core._DomainedBinaryOperation.__call__",
        "npy_tempita._Empty.__call__",
        "numpy.ma.core.MaskedArray.__ifloordiv__",
        "numpy.core.arrayprint.SubArrayFormat.__call__",
        "numpy._import_tools.PackageLoader.__call__",
        "numpy.ma.core._DomainTan.__call__",
        "numpy.floor_divide",
        "numpy.lib.polynomial.poly1d.__call__",
        "numpy.core.arrayprint.StructuredVoidFormat.__call__",
        "numpy.ma.core._DomainSafeDivide.__call__",
        "numpy.ma.core._DomainGreater.__call__",
        "numpy.ma.core._convert2ma.__call__",
        "numpy.ma.core._DomainGreaterEqual.__call__"
    ],
    "numpy.ma.core.MaskedArray.__itruediv__": [
        "numpy.lib.function_base.vectorize.__call__",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A.__call__",
        "numpy.lib._iotools.StringConverter.__call__",
        "numpy.testing._private.utils.suppress_warnings.__call__",
        "numpy.ma.core.getmask",
        "numpy.lib._iotools.LineSplitter.__call__",
        "numpy.multiply.__call__",
        "numpy.testing._private.parameterized.parameterized.__call__",
        "numpy.lib._iotools.NameValidator.__call__",
        "numpy.ma.core._extrema_operation.__call__",
        "numpy.ma.core.mask_or",
        "numpy.testing._private.pytesttester.PytestTester.__call__",
        "numpy.ma.extras._fromnxfunction.__call__",
        "numpy.where",
        "numpy.ma.core._frommethod.__call__",
        "numpy.core.arrayprint.IntegerFormat.__call__",
        "numpy.core.arrayprint.BoolFormat.__call__",
        "numpy.core.fromnumeric.any",
        "npy_tempita.TemplateDef.__call__",
        "numpy.core._internal.dummy_ctype.__call__",
        "numpy.ma.core._MaskedUnaryOperation.__call__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__call__",
        "numpy.true_divide",
        "numpy.f2py.auxfuncs.throw_error.__call__",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.lib.utils._Deprecate.__call__",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.polynomial._polybase.ABCPolyBase.__call__",
        "numpy.ma.core.getdata",
        "numpy.ma.core._MaskedBinaryOperation.__call__",
        "numpy.core.arrayprint._TimelikeFormat.__call__",
        "numpy.ma.core._DomainCheckInterval.__call__",
        "numpy.core.arrayprint.FloatingFormat.__call__",
        "numpy.ma.core._DomainedBinaryOperation.__call__",
        "npy_tempita._Empty.__call__",
        "numpy.core.arrayprint.SubArrayFormat.__call__",
        "numpy.ma.core.MaskedArray.__itruediv__",
        "numpy._import_tools.PackageLoader.__call__",
        "numpy.ma.core._DomainTan.__call__",
        "numpy.lib.polynomial.poly1d.__call__",
        "numpy.core.arrayprint.StructuredVoidFormat.__call__",
        "numpy.ma.core._DomainSafeDivide.__call__",
        "numpy.ma.core._DomainGreater.__call__",
        "numpy.ma.core._convert2ma.__call__",
        "numpy.ma.core._DomainGreaterEqual.__call__"
    ],
    "numpy.ma.core.MaskedArray.__ipow__": [
        "numpy.isfinite",
        "numpy.lib.user_array.container.__ipow__",
        "numpy.errstate",
        "numpy.ma.core.mask_or",
        "numpy.bool_",
        "numpy.copyto",
        "numpy.ma.core.MaskedArray.__ipow__",
        "numpy.matrixlib.defmatrix.matrix.__ipow__",
        "numpy.ma.core.getdata",
        "numpy.ma.core.getmask",
        "numpy.where",
        "numpy.logical_not"
    ],
    "numpy.ma.core.MaskedArray.__float__": [
        "numpy.ma.core.mask_or",
        "numpy.core.fromnumeric.size",
        "npy_tempita._looper.loop_pos.item",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.ma.core.MaskedArray.__int__": [
        "numpy.ma.core.mask_or",
        "numpy.core.fromnumeric.size",
        "npy_tempita._looper.loop_pos.item",
        "numpy.ma.core.MaskError",
        "numpy.int",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.ma.core.MaskedArray.__long__": [
        "numpy.ma.core.mask_or",
        "numpy.core.fromnumeric.size",
        "npy_tempita._looper.loop_pos.item",
        "numpy.ma.core.MaskError",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.ma.core.MaskedArray.get_imag": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.core.mask_or",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.MaskedArray.get_real": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.core.mask_or",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.MaskedArray.count": [
        "numpy.core.numeric.normalize_axis_tuple",
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.sum",
        "numpy.zeros",
        "numpy.full",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.ma.core.mask_or",
        "numpy.array",
        "numpy.matrix",
        "numpy.AxisError",
        "numpy.ma.sum",
        "numpy.ma.core.MaskedConstant",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.intp",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.bool_",
        "numpy.core.fromnumeric.ndim",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.ma.core.MaskedArray.ravel": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.MaskedArray.view",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.ma.core.mask_or",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.bool_",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.core.MaskedArray.reshape": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.ma.masked.view",
        "numpy.ma.core.mask_or",
        "numpy.bool_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.core.MaskedArray.put": [
        "numpy.ma.core.getmask",
        "numpy.ma.core.mask_or",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.getmaskarray",
        "numpy.bool_",
        "numpy.array"
    ],
    "numpy.ma.core.MaskedArray.ids": [
        "numpy.ma.core.make_mask",
        "numpy.bool_"
    ],
    "numpy.ma.core.MaskedArray.all": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.view",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.make_mask",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core._check_mask_axis",
        "numpy.core.fromnumeric.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.ndim",
        "numpy.all",
        "numpy.ndim"
    ],
    "numpy.ma.core.MaskedArray.any": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.make_mask",
        "numpy.ma.masked.view",
        "numpy.any",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.core._check_mask_axis",
        "numpy.core.fromnumeric.any",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.core.MaskedArray.nonzero": [
        "numpy.ma.nonzero",
        "numpy.nonzero",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.core.fromnumeric.nonzero"
    ],
    "numpy.ma.core.MaskedArray.trace": [
        "numpy.ma.core.make_mask",
        "numpy.ma.core._arraymethod",
        "numpy.ndarray.sum",
        "numpy.sum",
        "numpy.bool_",
        "numpy.ma.sum",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.ma.core.MaskedArray.dot": [
        "numpy.ma.core.MaskedArray.dot"
    ],
    "numpy.ma.core.MaskedArray.sum": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ndarray.sum",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.make_mask_none",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.core._check_mask_axis",
        "numpy.core.fromnumeric.sum",
        "numpy.bool_",
        "numpy.ma.sum",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.sum",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.ma.core.MaskedArray.cumsum": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.cumsum",
        "numpy.ma.core.make_mask",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.core.fromnumeric.cumsum",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray.cumsum"
    ],
    "numpy.ma.core.MaskedArray.prod": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.make_mask_none",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.core._check_mask_axis",
        "numpy.prod",
        "numpy.matrixlib.defmatrix.matrix.prod",
        "numpy.bool_",
        "numpy.core.fromnumeric.prod",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray.prod"
    ],
    "numpy.ma.core.MaskedArray.cumprod": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.make_mask",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.cumprod",
        "numpy.core.fromnumeric.cumprod",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray.cumprod"
    ],
    "numpy.ma.core.MaskedArray.mean": [
        "numpy.ma.core.getmask",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.MaskedArray.count",
        "numpy.ma.core.make_mask_none",
        "numpy.bool_",
        "numpy.ma.core.MaskedArray.sum",
        "numpy.ma.core.MaskedConstant"
    ],
    "numpy.ma.core.MaskedArray.anom": [
        "numpy.ma.core.expand_dims",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.mean"
    ],
    "numpy.ma.core.MaskedArray.var": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.core.make_mask",
        "numpy.ma.masked.view",
        "numpy.ma.core.mask_or",
        "numpy.bool_",
        "numpy.iscomplexobj",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskError",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.MaskedArray.count",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.core.MaskedArray.std": [
        "numpy.ma.core._MaskedUnaryOperation.__init__",
        "numpy.ma.core._MaskedUnaryOperation",
        "numpy.power",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.var"
    ],
    "numpy.ma.core.MaskedArray.round": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.make_mask",
        "numpy.ma.masked.view",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.core.MaskedArray.argsort": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.issubdtype",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.ma.core._deprecate_argsort_axis",
        "numpy.ma.core.minimum_fill_value",
        "numpy.ma.core.maximum_fill_value"
    ],
    "numpy.ma.core.MaskedArray.argmin": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.core.fromnumeric.argmin",
        "numpy.ma.core.MaskedArray.view",
        "numpy.argmin",
        "numpy.matrixlib.defmatrix.matrix.argmin",
        "numpy.ma.core.minimum_fill_value",
        "numpy.ma.core.MaskedArray.argmin",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.MaskedArray.argmax": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.core.fromnumeric.argmax",
        "numpy.ma.core.MaskedArray.view",
        "numpy.matrixlib.defmatrix.matrix.argmax",
        "numpy.argmax",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray.argmax",
        "numpy.ma.core.maximum_fill_value"
    ],
    "numpy.ma.core.MaskedArray.sort": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ix_",
        "numpy.ma.core.make_mask",
        "numpy.bool_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.MaskedArray.argsort"
    ],
    "numpy.ma.core.MaskedArray.min": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.make_mask_none",
        "numpy.ma.masked.view",
        "numpy.ma.core.min",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.core._check_mask_axis",
        "numpy.min",
        "numpy.bool_",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskError",
        "numpy.copyto",
        "numpy.ma.core.minimum_fill_value"
    ],
    "numpy.ma.core.MaskedArray.mini": [
        "numpy.ma.core._extrema_operation.reduce"
    ],
    "numpy.ma.core.MaskedArray.max": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.make_mask_none",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.core._check_mask_axis",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.bool_",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskError",
        "numpy.copyto",
        "numpy.ma.core.maximum_fill_value"
    ],
    "numpy.ma.core.MaskedArray.ptp": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.subtract",
        "numpy.ma.core.MaskedArray.max"
    ],
    "numpy.ma.core.MaskedArray.partition": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.ma.core.MaskedArray.argpartition": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.ma.core.MaskedArray.take": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.core.make_mask",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.take",
        "numpy.bool_",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.MaskedArray.tolist": [
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.make_mask",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype",
        "numpy.bool_"
    ],
    "numpy.ma.core.MaskedArray.tostring": [
        "numpy.ma.core.MaskedArray.tobytes"
    ],
    "numpy.ma.core.MaskedArray.tobytes": [
        "numpy.ma.core.MaskedArray.tobytes"
    ],
    "numpy.ma.core.MaskedArray.toflex": [
        "numpy.core.fromnumeric.shape",
        "numpy.ndarray",
        "numpy.ma.core.make_mask_descr",
        "numpy.ma.core.make_mask",
        "numpy.shape",
        "numpy.ma.core.make_mask_none",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.ma.core.MaskedArray.__getstate__": [
        "numpy.ma.core.MaskedArray.tobytes",
        "numpy.ma.core._check_fill_value"
    ],
    "numpy.ma.core.MaskedArray.__setstate__": [
        "numpy.ma.core.make_mask_descr"
    ],
    "numpy.ma.core.MaskedArray.__reduce__": [
        "numpy.ma.core.MaskedArray.__getstate__",
        "numpy.ndarray",
        "numpy.ma.core._mareconstruct"
    ],
    "numpy.ma.core.MaskedArray.__deepcopy__": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.ma.core.MaskedArray.__new__"
    ],
    "numpy.ma.core._mareconstruct": [
        "numpy.ndarray.__new__",
        "numpy.ndarray",
        "numpy.ma.core.make_mask_descr"
    ],
    "numpy.ma.core.mvoid": [
        "numpy.ma.core.mvoid._get_data",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.mvoid.__str__"
    ],
    "numpy.ma.core.mvoid.__new__": [
        "numpy.bool_",
        "numpy.void",
        "numpy.ma.core.make_mask_descr",
        "numpy.array"
    ],
    "numpy.ma.core.mvoid.__getitem__": [
        "numpy.ma.core.make_mask",
        "numpy.ndarray",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray",
        "numpy.bool_",
        "numpy.ma.masked_array",
        "numpy.ma.core._check_fill_value"
    ],
    "numpy.ma.core.mvoid.__setitem__": [
        "numpy.ma.core.make_mask"
    ],
    "numpy.ma.core.mvoid.__str__": [
        "numpy.lib.user_array.container.astype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.core.make_mask",
        "numpy.bool_",
        "numpy.ma.core._MaskedPrintOption",
        "numpy.ma.core._recursive_printoption",
        "numpy.ma.core._replace_dtype_fields"
    ],
    "numpy.ma.core.mvoid.__iter__": [
        "numpy.ma.core.make_mask",
        "numpy.bool_",
        "numpy.ma.core.MaskedConstant"
    ],
    "numpy.ma.core.mvoid.__len__": [
        "numpy.lib.index_tricks.nd_grid.__len__",
        "numpy.polynomial._polybase.ABCPolyBase.__len__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__len__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__len__",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__len__",
        "numpy.lib.index_tricks.AxisConcatenator.__len__",
        "numpy.lib.polynomial.poly1d.__len__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__len__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__len__",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__len__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__len__",
        "numpy.ma.mrecords.MaskedRecords.__len__",
        "numpy.ma.core.mvoid.__len__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__len__",
        "numpy.lib.user_array.container.__len__"
    ],
    "numpy.ma.core.mvoid.filled": [
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled"
    ],
    "numpy.ma.core.mvoid.tolist": [
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.core.make_mask",
        "numpy.ma.append",
        "numpy.bool_",
        "npy_tempita._looper.loop_pos.item",
        "numpy.append",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.ma.core.isMaskedArray": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.MaskedConstant": [
        "numpy.ma.core.MaskedConstant.__iop__",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.MaskedConstant.__has_singleton": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.MaskedConstant.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedConstant.__has_singleton",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.array"
    ],
    "numpy.ma.core.MaskedConstant.__array_finalize__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedConstant.__has_singleton",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray.__array_finalize__"
    ],
    "numpy.ma.core.MaskedConstant.__array_prepare__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.__array_prepare__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare_out.with_prepare.__array_prepare__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array_prepare__",
        "numpy.ma.core.MaskedConstant.__array_prepare__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare.with_prepare.__array_prepare__"
    ],
    "numpy.ma.core.MaskedConstant.__array_wrap__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array_wrap__",
        "numpy.lib.user_array.container.__array_wrap__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__array_wrap__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable.with_wrap.__array_wrap__",
        "numpy.core.tests.test_umath.TestOut.test_out_wrap_subok.ArrayWrap.__array_wrap__",
        "numpy.core.memmap.memmap.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array_wrap__",
        "numpy.ma.core.MaskedArray.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.__array_wrap__"
    ],
    "numpy.ma.core.MaskedConstant.__repr__": [
        "numpy.testing._private.parameterized.param.__repr__",
        "numpy.ma.core.MaskedArray.view",
        "numpy.linalg.tests.test_linalg.LinalgCase.__repr__",
        "numpy.lib.user_array.container.__repr__",
        "numpy.core.records.recarray.__repr__",
        "numpy.ma.masked.view",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.__repr__",
        "numpy.core.records.record.__repr__",
        "npy_tempita._looper.looper.__repr__",
        "npy_tempita.TemplateDef.__repr__",
        "numpy.polynomial._polybase.ABCPolyBase.__repr__",
        "numpy.core.getlimits.finfo.__repr__",
        "npy_tempita._looper.loop_pos.__repr__",
        "npy_tempita.TemplateObject.__repr__",
        "numpy.ma.mrecords.MaskedRecords.__repr__",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray.__repr__",
        "numpy.lib.tests.test_mixins.ArrayLike.__repr__",
        "numpy.core.getlimits.iinfo.__repr__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__repr__",
        "npy_tempita.TemplateObjectGetter.__repr__",
        "npy_tempita.bunch.__repr__",
        "numpy._globals._NoValueType.__repr__",
        "numpy.lib.polynomial.poly1d.__repr__",
        "npy_tempita._Empty.__repr__",
        "npy_tempita.html.__repr__",
        "make_lite.FortranRoutine.__repr__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__repr__"
    ],
    "numpy.ma.core.MaskedConstant.__reduce__": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.MaskedConstant.__setattr__": [
        "numpy.ma.core.MaskedArray.__setattr__",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedConstant.__has_singleton",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.array": [
        "numpy.ma.core.MaskedArray",
        "numpy.bool_"
    ],
    "numpy.ma.core.is_masked": [
        "numpy.bool_",
        "numpy.ma.core.getmask"
    ],
    "numpy.ma.core._extrema_operation": [
        "numpy.ma.core._MaskedUFunc"
    ],
    "numpy.ma.core._extrema_operation.__init__": [
        "numpy.ma.core._MaskedUFunc.__init__"
    ],
    "numpy.ma.core._extrema_operation.__call__": [
        "numpy.ma.core.where",
        "numpy.ma.core._extrema_operation.reduce"
    ],
    "numpy.ma.core._extrema_operation.reduce": [
        "numpy.fmin.reduce",
        "numpy.ma.core.MaskedConstant",
        "numpy.maximum.reduce",
        "numpy.ma.core.MaskedArray.view",
        "numpy.logical_xor.reduce",
        "numpy.ma.core.getmask",
        "numpy.multiply.reduce",
        "numpy.ma.masked.view",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.array",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.bool_",
        "numpy.ma.core.MaskedArrayFutureWarning",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.minimum.reduce",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.ma.core._extrema_operation.outer": [
        "numpy.maximum.outer",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.core.getmaskarray",
        "numpy.multiply.outer",
        "numpy.ma.masked.view",
        "numpy.ma.core._extrema_operation.outer",
        "numpy.core.numeric.outer",
        "numpy.outer",
        "numpy.bool_",
        "numpy.ma.core.filled",
        "numpy.ma.core.outer",
        "numpy.add.outer",
        "numpy.ma.core._MaskedBinaryOperation.outer",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray",
        "numpy.minimum.outer"
    ],
    "numpy.ma.core.min": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.ma.core.max": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.ma.core.ptp": [
        "numpy.ma.core.ptp",
        "numpy.ma.core.MaskedArray.ptp",
        "numpy.core.fromnumeric.ptp",
        "numpy.ptp",
        "numpy.matrixlib.defmatrix.matrix.ptp"
    ],
    "numpy.ma.core._frommethod.__init__": [
        "numpy.ma.core._frommethod.getdoc"
    ],
    "numpy.ma.core._frommethod.getdoc": [
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.get_object_signature",
        "numpy"
    ],
    "numpy.ma.core._frommethod.__call__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.core.asanyarray",
        "numpy"
    ],
    "numpy.ma.core.take": [
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.MaskedArray.take"
    ],
    "numpy.ma.core.power": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.masked.view",
        "numpy.ma.core.mask_or",
        "numpy.bool_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.getdata",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.logical_not",
        "numpy.ma.core.MaskError",
        "numpy.isfinite",
        "numpy.errstate",
        "numpy.ma.core.MaskedArray",
        "numpy.logical_or",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.MaskedArray._update_from"
    ],
    "numpy.ma.core.argsort": [
        "numpy.ma.core.MaskedArray",
        "numpy.asanyarray",
        "numpy.ma.core._deprecate_argsort_axis"
    ],
    "numpy.ma.core.sort": [
        "numpy.ma.core.MaskedArray",
        "numpy.array"
    ],
    "numpy.ma.core.compressed": [
        "numpy.ma.core.compressed",
        "numpy.ma.core.MaskedArray.compressed",
        "numpy.ma.compressed"
    ],
    "numpy.ma.core.concatenate": [
        "numpy.ma.core._shrink_mask",
        "numpy.ma.core.getmask",
        "numpy.ma.core.get_masked_subclass",
        "numpy.bool_",
        "numpy.concatenate"
    ],
    "numpy.ma.core.diag": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.bool_",
        "numpy.ma.core.getmask",
        "numpy.diag",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.expand_dims": [
        "numpy.ma.core.MaskedArray",
        "numpy.bool_",
        "numpy.expand_dims"
    ],
    "numpy.ma.core.left_shift": [
        "numpy.ma.core.getmask",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.filled",
        "numpy.bool_"
    ],
    "numpy.ma.core.right_shift": [
        "numpy.ma.core.getmask",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.filled",
        "numpy.bool_"
    ],
    "numpy.ma.core.put": [
        "numpy.core.fromnumeric.put",
        "numpy.put",
        "numpy.ma.core.put",
        "numpy.ma.core.MaskedArray.put"
    ],
    "numpy.ma.core.putmask": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.getmask",
        "numpy.ma.core.getmaskarray",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core.make_mask_none",
        "numpy.ma.copy",
        "numpy.bool_",
        "numpy.ma.core.getdata",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.MaskedArray",
        "numpy.copyto",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.core.transpose": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.reshape": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.masked.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.core.resize": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.masked.view",
        "numpy.bool_",
        "numpy.ma.core.get_masked_subclass",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.resize"
    ],
    "numpy.ma.core.rank": [
        "numpy.ma.core.getdata",
        "numpy.ndim",
        "numpy._globals.VisibleDeprecationWarning"
    ],
    "numpy.ma.core.ndim": [
        "numpy.ma.core.getdata",
        "numpy.ndim"
    ],
    "numpy.ma.core.shape": [
        "numpy.ma.core.getdata",
        "numpy.shape"
    ],
    "numpy.ma.core.size": [
        "numpy.size",
        "numpy.ma.core.getdata"
    ],
    "numpy.ma.core.where": [
        "numpy.ma.core._shrink_mask",
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.filled",
        "numpy.zeros",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.ones",
        "numpy.ma.core._frommethod",
        "numpy.ma.core.getdata",
        "numpy.ma.core._frommethod.__init__",
        "numpy.core.defchararray.count",
        "numpy.ma.core.MaskedArray.count",
        "numpy.ma.core.getmaskarray",
        "numpy.where",
        "numpy.core.defchararray.chararray.count"
    ],
    "numpy.ma.core.choose.fmask": [
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedConstant"
    ],
    "numpy.ma.core.choose.nmask": [
        "numpy.ma.core.getmask",
        "numpy.ma.core.MaskedConstant"
    ],
    "numpy.ma.core.choose": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.getmask",
        "numpy.ma.core.make_mask",
        "numpy.ma.masked.view",
        "numpy.ma.core.mask_or",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.core.filled",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.choose",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.round_": [
        "numpy.ma.core.getmask",
        "numpy.round_",
        "numpy.ma.core.getdata"
    ],
    "numpy.ma.core.mask_rowcols": [
        "numpy.unique",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.MaskedConstant",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.ma.copy",
        "numpy.bool_",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.getmask",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.core.dot": [
        "numpy.logical_not",
        "numpy.ma.core.get_masked_subclass",
        "numpy.ma.core.getmaskarray",
        "numpy.ma.core.filled",
        "numpy.dot",
        "numpy.bool_",
        "numpy.asarray",
        "numpy.ma.core.mask_rowcols",
        "numpy.empty"
    ],
    "numpy.ma.core.inner": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.filled",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.core.outer": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.make_mask",
        "numpy.outer",
        "numpy.ma.core.MaskedArray",
        "numpy.bool_",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel",
        "numpy.ma.core.getmask",
        "numpy.ma.core.getmaskarray"
    ],
    "numpy.ma.core._convolve_or_correlate": [
        "numpy.ma.core.MaskedArray",
        "numpy.ones",
        "numpy.shape",
        "numpy.ma.core.getmaskarray",
        "numpy.ma.core.filled",
        "numpy.ma.core.getdata"
    ],
    "numpy.ma.core.correlate": [
        "numpy.ma.core._convolve_or_correlate",
        "numpy.correlate"
    ],
    "numpy.ma.core.convolve": [
        "numpy.ma.core._convolve_or_correlate",
        "numpy.convolve"
    ],
    "numpy.ma.core.allequal": [
        "numpy.core.fromnumeric.all",
        "numpy.ma.core.array",
        "numpy.ma.core.mask_or",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.bool_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.ma.core.getdata",
        "numpy.ma.core.getmask"
    ],
    "numpy.ma.core.allclose": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.ma.core.getmask",
        "numpy.dtype",
        "numpy.ma.core.mask_or",
        "numpy.result_type",
        "numpy.ma.core._MaskedUnaryOperation",
        "numpy.ma.core._MaskedBinaryOperation",
        "numpy.ma.core._MaskedUnaryOperation.__init__",
        "numpy.ma.core.filled",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.any",
        "numpy.isinf",
        "numpy.ma.core.MaskedArray",
        "numpy.all"
    ],
    "numpy.ma.core.asarray": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.asanyarray": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.dump": [
        "numpy.lib._datasource.open",
        "numpy.ma.core._pickle_warn",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.ma.core.dumps": [
        "numpy.ma.core._pickle_warn"
    ],
    "numpy.ma.core.load": [
        "numpy.lib._datasource.open",
        "numpy.ma.core._pickle_warn",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.ma.core.loads": [
        "numpy.ma.core._pickle_warn"
    ],
    "numpy.ma.core.fromflex": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core._convert2ma.__init__": [
        "numpy.ma.core._convert2ma.getdoc",
        "numpy"
    ],
    "numpy.ma.core._convert2ma.getdoc": [
        "numpy.ma.core.get_object_signature"
    ],
    "numpy.ma.core._convert2ma.__call__": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.core.append": [
        "numpy.ma.core.concatenate"
    ],
    "numpy.ma.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_masked_array_create": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.masked_array",
        "numpy.ma.nonzero",
        "numpy.nonzero",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.core.fromnumeric.nonzero"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_masked_array": [
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_mem_masked_where": [
        "numpy.zeros",
        "numpy.ma.masked_where"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_masked_array_multiply": [
        "numpy.zeros",
        "numpy.ma.zeros",
        "numpy.matlib.zeros"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_masked_array_repeat": [
        "numpy.repeat",
        "numpy.core.fromnumeric.repeat"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_masked_array_repr_unicode": [
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_atleast_2d": [
        "numpy.ma.masked_array",
        "numpy.atleast_2d",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_set_fill_value_unicode_py3": [
        "numpy.testing.assert_",
        "numpy.ma.masked_array"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_var_sets_maskedarray_scalar": [
        "numpy.core.fromnumeric.var",
        "numpy.ma.core.array",
        "numpy.matrixlib.defmatrix.matrix.var",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.ma.core.MaskedArray.var",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.var",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_regression.TestRegression.test_ddof_corrcoef": [
        "numpy.ma.core.masked_equal",
        "numpy.ma.masked_equal",
        "numpy.corrcoef",
        "numpy.lib.function_base.corrcoef",
        "numpy.ma.corrcoef",
        "numpy.ma.extras.corrcoef",
        "numpy.array"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.setup": [
        "numpy.array",
        "numpy.where",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testBasic1d": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.isMaskedArray",
        "numpy.testing.assert_equal"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testBasic2d": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.tests.test_old_ma.TestMa.setup",
        "numpy.ma.isMaskedArray",
        "numpy.testing.assert_equal"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testArithmetic": [
        "numpy.ma.add",
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.add",
        "numpy.divide",
        "numpy.ma.masked_array",
        "numpy.multiply",
        "numpy.subtract",
        "numpy.abs",
        "numpy.ma.array",
        "numpy.ma.tests.test_old_ma.eq"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testMixedArithmetic": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.ma.MaskedArray",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testUfuncs1": [
        "numpy.equal",
        "numpy.sinh",
        "numpy.errstate",
        "numpy.sqrt",
        "numpy.cosh",
        "numpy.log10",
        "numpy.testing.assert_",
        "numpy.arcsin",
        "numpy.tan",
        "numpy.tanh",
        "numpy.arccos",
        "numpy.arctan",
        "numpy.exp",
        "numpy.arctan2",
        "numpy.absolute",
        "numpy.less_equal",
        "numpy.less",
        "numpy.sin",
        "numpy.not_equal",
        "numpy.log",
        "numpy.greater_equal",
        "numpy.cos",
        "numpy.conjugate",
        "numpy.ma.concatenate",
        "numpy.greater",
        "numpy.abs",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.concatenate"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_xtestCount": [
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.ma.getmask",
        "numpy.ma.array",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.intp"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testMinMax": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.ravel",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testAddSumProd": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.sum",
        "numpy.ma.concatenate",
        "numpy.ma.sum",
        "numpy.concatenate",
        "numpy.product",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testCI": [
        "numpy.ma.getmask",
        "numpy.arange",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.masked_values",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.sort",
        "numpy.ma.masked_array",
        "numpy.ma.array",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.ma.core.shape",
        "numpy.ma.tests.test_old_ma.eq"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testCopySize": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arange",
        "numpy.ma.getmask",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.testing.assert_",
        "numpy.ma.concatenate",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.ma.arange"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testPut": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.arange",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testPut2": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.arange",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testMaPut": [
        "numpy.testing.assert_",
        "numpy.nonzero"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testOddFeatures": [
        "numpy.float32",
        "numpy.ma.getmask",
        "numpy.ma.ones",
        "numpy.lib.type_check.real",
        "numpy.real",
        "numpy.ma.where",
        "numpy.ma.array",
        "numpy.ma.masked_where",
        "numpy.ma.masked_equal",
        "numpy.testing.assert_",
        "numpy.ma.zeros",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.ma.arange"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testMinMax2": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.arange",
        "numpy.ma.where"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testTakeTransposeInnerOuter": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.transpose",
        "numpy.take",
        "numpy.arange",
        "numpy.outer",
        "numpy.inner",
        "numpy.ma.arange",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testInplace": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.ma.ones",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.ma.arange"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testPickle": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.arange"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testMasked": [
        "numpy.testing.assert_",
        "numpy.testing.assert_equal",
        "numpy.ma.arange"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testAverage1": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testAverage2": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.ma.masked_array",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.ma.zeros",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.ma.array",
        "numpy.power.reduce",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.fmax.reduce",
        "numpy.ma.arange",
        "numpy.ma.ones"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testToPython": [
        "numpy.int",
        "numpy.ma.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testScalarArithmetic": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.ma.array",
        "numpy.testing.assert_",
        "numpy.errstate"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testArrayMethods": [
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo.conjugate",
        "numpy.conj",
        "numpy.ma.compress",
        "numpy.core.fromnumeric.take",
        "numpy.compress",
        "numpy.conjugate",
        "numpy.ma.core.MaskedArray.take",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.choose",
        "numpy.argmax",
        "numpy.core.fromnumeric.transpose",
        "numpy.ndarray.sum",
        "numpy.core.fromnumeric.argmax",
        "numpy.core.fromnumeric.argmin",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.argmin",
        "numpy.core.fromnumeric.diagonal",
        "numpy.ma.array",
        "numpy.ma.core.take",
        "numpy.core.fromnumeric.compress",
        "numpy.core.fromnumeric.sum",
        "numpy.transpose",
        "numpy.core.fromnumeric.all",
        "numpy.take",
        "numpy.core.fromnumeric.any",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.diagonal",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.matrixlib.defmatrix.matrix.argmax",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.ma.sum",
        "numpy.ma.core.MaskedArray.compress",
        "numpy.matrixlib.defmatrix.matrix.argmin",
        "numpy.choose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.sum",
        "numpy.all",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.ma.core.MaskedArray.argmin",
        "numpy.ma.core.choose",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.ma.core.MaskedArray.argmax"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testArrayAttributes": [
        "numpy.ma.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testAPI": [
        "numpy.testing.assert_"
    ],
    "numpy.ma.tests.test_old_ma.TestMa.test_testSingleElementSubscript": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.ma.array",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_old_ma.TestUfuncs.setup": [
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestUfuncs.test_testUfuncRegression": [
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.core.fromnumeric",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.seterr",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.ma.array",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.errstate",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.ma.tests.test_old_ma.eqmask",
        "numpy.ma.tests.test_old_ma.eq"
    ],
    "numpy.ma.tests.test_old_ma.TestUfuncs.test_reduce": [
        "numpy.testing.assert_",
        "numpy.ma.sum",
        "numpy.ma.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.ma.tests.test_old_ma.TestUfuncs.test_minmax": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.max",
        "numpy.ma.masked_where",
        "numpy.max",
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.core.MaskedArray.all",
        "numpy.core.getlimits.iinfo.max",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_old_ma.TestUfuncs.test_nonzero": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.ma.array",
        "numpy.ma.nonzero",
        "numpy.testing.assert_"
    ],
    "numpy.ma.tests.test_old_ma.TestArrayMethods.setup": [
        "numpy.ma.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_old_ma.TestArrayMethods.test_trace": [
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.sum",
        "numpy.ma.sum",
        "numpy.ma.array",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.ma.tests.test_old_ma.TestArrayMethods.test_clip": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.fromnumeric.clip",
        "numpy.clip",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestArrayMethods.test_ptp": [
        "numpy.zeros",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.array",
        "numpy.testing.assert_equal",
        "numpy.float_"
    ],
    "numpy.ma.tests.test_old_ma.TestArrayMethods.test_swapaxes": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.ma.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumprod": [
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.cumprod",
        "numpy.cumprod",
        "numpy.ma.core.MaskedArray.cumprod",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestArrayMethods.test_cumsum": [
        "numpy.ma.core.MaskedArray.cumsum",
        "numpy.ma.tests.test_old_ma.eq",
        "numpy.testing.assert_",
        "numpy.cumsum",
        "numpy.core.fromnumeric.cumsum",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_old_ma.TestArrayMethods.test_varstd": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.core.fromnumeric.shape",
        "numpy.matrixlib.defmatrix.matrix.std",
        "numpy.matrixlib.defmatrix.matrix.var",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.std",
        "numpy.core.fromnumeric.var",
        "numpy.sqrt",
        "numpy.ma.core.MaskedArray.var",
        "numpy.ma.core.MaskedArray.std",
        "numpy.std",
        "numpy.var",
        "numpy.ma.core.shape",
        "numpy.ma.tests.test_old_ma.eq"
    ],
    "numpy.ma.tests.test_old_ma.eqmask": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.ma.tests.test_subclassing.assert_startswith": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_subclassing.SubArray": [
        "numpy.ndarray"
    ],
    "numpy.ma.tests.test_subclassing.SubArray.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.tests.test_subclassing.SubArray.__array_finalize__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.tests.test_subclassing.SubArray.__add__": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.ma.tests.test_subclassing.SubArray.__iadd__": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.ma.tests.test_subclassing.SubMaskedArray": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_subclassing.SubMaskedArray.__new__": [
        "numpy.ma.core.MaskedArray.__new__"
    ],
    "numpy.ma.tests.test_subclassing.MSubArray": [
        "numpy.ma.core.MaskedArray",
        "numpy.ma.tests.test_subclassing.SubArray",
        "numpy.ma.tests.test_subclassing.MSubArray._get_series"
    ],
    "numpy.ma.tests.test_subclassing.MSubArray.__new__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedArray.__new__",
        "numpy.ma.tests.test_subclassing.SubArray",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.tests.test_subclassing.MSubArray._get_series": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_subclassing.CSAIterator": [
        "numpy.ma.tests.test_subclassing.CSAIterator.__next__"
    ],
    "numpy.ma.tests.test_subclassing.CSAIterator.__init__": [
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat"
    ],
    "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__": [
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__",
        "numpy.lib.npyio.NpzFile.__getitem__",
        "numpy.ndarray",
        "numpy.core.records.record.__getitem__",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.lib.polynomial.poly1d.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.core.memmap.memmap.__getitem__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.lib.user_array.container.__array__",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__",
        "numpy.lib.user_array.container.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.core.numerictypes._typedict.__getitem__",
        "numpy.ma.masked.view",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__",
        "numpy.ndarray.__getitem__",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__getitem__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__",
        "numpy.core.defchararray.chararray.__getitem__",
        "numpy.lib.index_tricks.nd_grid.__getitem__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.ma.mrecords.MaskedRecords.__getitem__",
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.lib.polynomial.poly1d.__array__",
        "npy_tempita.bunch.__getitem__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.matrixlib.defmatrix.matrix.__getitem__",
        "numpy.lib._datasource._FileOpeners.__getitem__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.ma.core.MaskedIterator.__getitem__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__",
        "numpy.lib.index_tricks.IndexExpression.__getitem__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__"
    ],
    "numpy.ma.tests.test_subclassing.CSAIterator.__setitem__": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.ma.tests.test_subclassing.CSAIterator.__next__": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray": [
        "numpy.ma.tests.test_subclassing.SubArray"
    ],
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__str__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.tests.test_subclassing.SubArray",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__",
        "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject.__setitem__",
        "numpy.lib.polynomial.poly1d.__setitem__",
        "numpy.ma.core.MaskedIterator.__setitem__",
        "numpy.ma.mrecords.MaskedRecords.__setitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__setitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__setitem__",
        "numpy.ma.core.MaskedArray.__setitem__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray._validate_input",
        "numpy.lib.user_array.container.__setitem__"
    ],
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__",
        "numpy.lib.npyio.NpzFile.__getitem__",
        "numpy.ndarray",
        "numpy.core.records.record.__getitem__",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__",
        "numpy.lib.polynomial.poly1d.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__getitem__",
        "numpy.core.memmap.memmap.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__",
        "numpy.lib.user_array.container.__getitem__",
        "numpy.core.numerictypes._typedict.__getitem__",
        "numpy.ma.masked.view",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__",
        "numpy.ndarray.__getitem__",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__",
        "numpy.core.defchararray.chararray.__getitem__",
        "numpy.lib.index_tricks.nd_grid.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.__getitem__",
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.view",
        "npy_tempita.bunch.__getitem__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__",
        "numpy.matrixlib.defmatrix.matrix.__getitem__",
        "numpy.lib._datasource._FileOpeners.__getitem__",
        "numpy.ma.core.MaskedIterator.__getitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__",
        "numpy.lib.index_tricks.IndexExpression.__getitem__"
    ],
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.tests.test_subclassing.CSAIterator",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel"
    ],
    "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__array_wrap__": [
        "numpy.lib.user_array.container.__array_wrap__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__array_wrap__",
        "numpy.info",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.memmap.memmap.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.__array_wrap__",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable.with_wrap.__array_wrap__",
        "numpy.multiply",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array_wrap__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__array_wrap__",
        "numpy.lib.utils.info",
        "numpy.core.tests.test_umath.TestOut.test_out_wrap_subok.ArrayWrap.__array_wrap__",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.MaskedArray.__array_wrap__"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.setup": [
        "numpy.ma.tests.test_subclassing.MSubArray",
        "numpy.arange"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_data_subclassing": [
        "numpy.ma.tests.test_subclassing.SubArray",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.arange"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_maskedarray_subclassing": [
        "numpy.ma.tests.test_subclassing.SubArray",
        "numpy.testing.assert_",
        "numpy.ma.tests.test_subclassing.MSubArray"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_unary_operations": [
        "numpy.errstate",
        "numpy.log",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.tests.test_subclassing.MSubArray"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations": [
        "numpy.ma.tests.test_subclassing.MSubArray",
        "numpy.testing.assert_",
        "numpy.ma.tests.test_subclassing.SubArray",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_masked_binary_operations2": [
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.ma.tests.test_subclassing.MSubArray",
        "numpy.lib.polynomial.poly1d.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__",
        "numpy.lib.user_array.container.__array__",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_attributepropagation": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.MaskedArray.__setmask__",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.ma.tests.test_subclassing.SubArray",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.tests.test_subclassing.MSubArray",
        "numpy.ma.core.MaskedArray",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclasspreservation": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core.make_mask",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.ma.core.asarray",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.tests.test_subclassing.MSubArray",
        "numpy.ma.core.asanyarray",
        "numpy.ma.core.MaskedArray",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_items": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject.__setitem__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray",
        "numpy.lib.polynomial.poly1d.__setitem__",
        "numpy.ma.core.MaskedIterator.__setitem__",
        "numpy.ma.mrecords.MaskedRecords.__setitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__setitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__setitem__",
        "numpy.ma.core.MaskedArray.__setitem__",
        "numpy.lib.user_array.container.__setitem__"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_nomask_items": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_repr": [
        "numpy.arange",
        "numpy.ma.tests.test_subclassing.assert_startswith",
        "numpy.ma.tests.test_subclassing.SubArray"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_subclass_str": [
        "numpy.ma.tests.test_subclassing.SubArray",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__",
        "numpy.arange",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray"
    ],
    "numpy.ma.tests.test_subclassing.TestSubclassing.test_pure_subclass_info_preservation": [
        "numpy.ma.tests.test_subclassing.SubMaskedArray",
        "numpy.testing.assert_",
        "numpy.subtract"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords": [
        "numpy.int",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_byview": [
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.records.recarray.field",
        "numpy.recarray",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_get": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.masked.view",
        "numpy.core.records.recarray.field",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "npy_tempita._looper.loop_pos.item",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "npy_tempita.compat3.b",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.int",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.lib.user_array.container.copy",
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_set_fields_mask": [
        "numpy.int",
        "numpy.arange",
        "numpy.ma.mrecords.fromarrays",
        "numpy.matlib.rand",
        "numpy.ma.testutils.assert_equal",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask": [
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.testutils.assert_equal",
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.array"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromarray": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_set_mask_fromfields": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_set_elements": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.lib.user_array.container.copy",
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_setslices_hardmask": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_hardmask": [
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_pickling": [
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_filled": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.mrecords.fromarrays",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_tolist": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.fromarrays",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_withnames": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecords.test_exotic_formats": [
        "numpy.int",
        "npy_tempita._looper.loop_pos.item",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_mrecords.TestView.setup": [
        "numpy.matlib.rand",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.ma.mrecords.fromarrays",
        "numpy.array"
    ],
    "numpy.ma.tests.test_mrecords.TestView.test_view_by_itself": [
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.array"
    ],
    "numpy.ma.tests.test_mrecords.TestView.test_view_simple_dtype": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.MaskedArray",
        "numpy.array"
    ],
    "numpy.ma.tests.test_mrecords.TestView.test_view_flexible_type": [
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecordsImport": [
        "numpy.int",
        "numpy.core.records.fromarrays",
        "numpy.ma.mrecords.fromarrays",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromarrays": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.int",
        "numpy.ma.mrecords.fromarrays"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.filled",
        "numpy.core.records.fromrecords",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.int",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.ma.mrecords.fromrecords",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromrecords_wmask": [
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.ma.mrecords.fromrecords",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_fromtextfile": [
        "numpy.ma.mrecords.fromtextfile",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpy.ma.tests.test_mrecords.TestMRecordsImport.test_addfield": [
        "numpy.ma.mrecords.addfield",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_mrecords.test_record_array_with_object_field": [
        "numpy.int",
        "numpy.ma.masked_array"
    ],
    "numpy.ma.tests.test_extras.TestGeneric.test_masked_all": [
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.ma.extras.masked_all",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestGeneric.test_masked_all_like": [
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.ma.core.array",
        "numpy.ma.extras.masked_all_like"
    ],
    "numpy.ma.tests.test_extras.TestGeneric.check_clump": [
        "numpy.ndarray.sum",
        "numpy.int",
        "numpy.sum",
        "numpy.arange",
        "numpy.full",
        "numpy.ma.sum",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.clump_unmasked",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.ma.tests.test_extras.TestGeneric.test_clump_masked": [
        "numpy.ma.tests.test_extras.TestGeneric.check_clump",
        "numpy.ma.testutils.assert_equal",
        "numpy.arange",
        "numpy.ma.extras.clump_masked"
    ],
    "numpy.ma.tests.test_extras.TestGeneric.test_clump_unmasked": [
        "numpy.ma.tests.test_extras.TestGeneric.check_clump",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.clump_unmasked",
        "numpy.arange"
    ],
    "numpy.ma.tests.test_extras.TestGeneric.test_flatnotmasked_contiguous": [
        "numpy.zeros",
        "numpy.ma.extras.flatnotmasked_contiguous",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestAverage.test_testAverage1": [
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.average"
    ],
    "numpy.ma.tests.test_extras.TestAverage.test_testAverage2": [
        "numpy.fmin.reduce",
        "numpy.ma.core.array",
        "numpy.maximum.reduce",
        "numpy.arange",
        "numpy.logical_xor.reduce",
        "numpy.ma.extras.average",
        "numpy.multiply.reduce",
        "numpy.float_",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.ma.testutils.assert_equal",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.minimum.reduce",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.ma.tests.test_extras.TestAverage.test_testAverage3": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.average",
        "numpy.ma.core.array",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_extras.TestAverage.test_onintegers_with_mask": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.ma.extras.average"
    ],
    "numpy.ma.tests.test_extras.TestAverage.test_complex": [
        "numpy.average",
        "numpy.ma.extras.average",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_extras.TestConcatenator.test_1d": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestConcatenator.test_2d": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.matlib.rand",
        "numpy.round_",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand"
    ],
    "numpy.ma.tests.test_extras.TestConcatenator.test_masked_constant": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestNotMasked.test_edges": [
        "numpy.ma.core.reshape",
        "numpy.ma.extras.notmasked_edges",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestNotMasked.test_contiguous": [
        "numpy.ma.core.reshape",
        "numpy.ma.extras.notmasked_contiguous",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestCompressFunctions.test_compress_nd": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.core.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.extras.compress_nd",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestCompressFunctions.test_compress_rowcols": [
        "numpy.ma.core.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.compress_rowcols",
        "numpy.core.fromnumeric.size",
        "numpy.ma.core.reshape",
        "numpy.size",
        "numpy.reshape",
        "numpy.ma.core.size",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestCompressFunctions.test_mask_rowcols": [
        "numpy.ma.core.array",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.fromnumeric.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestCompressFunctions.test_dot": [
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.dot"
    ],
    "numpy.ma.tests.test_extras.TestCompressFunctions.test_dot_returns_maskedarray": [
        "numpy.eye",
        "numpy.ma.core.array",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_extras.TestCompressFunctions.test_dot_out": [
        "numpy.zeros",
        "numpy.ma.testutils.assert_equal",
        "numpy.eye",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.extras.apply_along_axis",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d.myfunc",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d_kwargs": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.extras.apply_along_axis",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.tests.test_extras.TestApplyAlongAxis.test_3d_kwargs.myfunc",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestApplyOverAxes.test_basic": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.extras.apply_over_axes",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_pytype": [
        "numpy.median",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.lib.function_base.median"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_inf": [
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.median",
        "numpy.ma.masked_array",
        "numpy.lib.function_base.median",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_non_masked": [
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.median",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.function_base.median",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_docstring_examples": [
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.function_base.median",
        "numpy.core.fromnumeric.shape",
        "numpy.median",
        "numpy.arange",
        "numpy.shape",
        "numpy.ma.median",
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.extras.median",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.ma.core.MaskedArray",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_axis_argument_errors": [
        "numpy.ma.extras.median",
        "numpy.ma.core.array",
        "numpy.ma.median",
        "numpy.AxisError",
        "numpy.median",
        "numpy.lib.function_base.median"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_masked_0d": [
        "numpy.median",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.median",
        "numpy.ma.core.array",
        "numpy.ma.median",
        "numpy.lib.function_base.median"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_masked_1d": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.array",
        "numpy.median",
        "numpy.arange",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.ma.extras.median",
        "numpy.lib.function_base.median",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.median",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_1d_shape_consistency": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_2d": [
        "numpy.ma.extras.median",
        "numpy.random.shuffle",
        "numpy.linspace",
        "numpy.arange",
        "numpy.empty",
        "numpy.zeros",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_2d_waxis": [
        "numpy.median",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.extras.median",
        "numpy.lib.function_base.median",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.median",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_3d": [
        "numpy.ma.extras.median",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_neg_axis": [
        "numpy.ma.extras.median",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_out_1d": [
        "numpy.ma.extras.median",
        "numpy.ma.core.MaskedArray",
        "numpy.arange",
        "numpy.ones",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_out": [
        "numpy.ma.extras.median",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.reshape",
        "numpy.ones",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_single_non_masked_value_on_axis": [
        "numpy.ma.core.masked_equal",
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.ma.masked_equal",
        "numpy.median",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.lib.function_base.median"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_nan": [
        "numpy.ma.core.array",
        "numpy.median",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ravel",
        "numpy.isscalar",
        "numpy.ma.extras.median",
        "numpy.core.fromnumeric.ravel",
        "numpy.ma.array",
        "numpy.lib.function_base.median",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.median",
        "numpy.ma.core.MaskedArray",
        "numpy.zeros"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_out_nan": [
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.median",
        "numpy.ma.masked_array",
        "numpy.zeros",
        "numpy.ones",
        "numpy.lib.function_base.median",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_nan_behavior": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.median",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.isscalar",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.extras.median",
        "numpy.ma.masked_array",
        "numpy.lib.function_base.median",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.copy",
        "numpy.core.fromnumeric.size",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.median",
        "numpy.ma.core.reshape",
        "numpy.size",
        "numpy.reshape",
        "numpy.ma.core.size",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_ambigous_fill": [
        "numpy.uint8",
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.median",
        "numpy.ma.masked_array",
        "numpy.lib.function_base.median",
        "numpy.array"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_special": [
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.float32",
        "numpy.ma.masked_array",
        "numpy.isnan",
        "numpy.lib.function_base.median",
        "numpy.ma.testutils.assert_equal",
        "numpy.median",
        "numpy.array"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_empty": [
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.median",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.masked_array",
        "numpy.lib.function_base.median",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_extras.TestMedian.test_object": [
        "numpy.lib.user_array.container.astype",
        "numpy.median",
        "numpy.arange",
        "numpy.ma.extras.median",
        "numpy.ma.masked_array",
        "numpy.lib.function_base.median",
        "numpy.ma.median"
    ],
    "numpy.ma.tests.test_extras.TestCov.setup": [
        "numpy.ma.core.array",
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.testing._private.utils.rand"
    ],
    "numpy.ma.tests.test_extras.TestCov.test_1d_without_missing": [
        "numpy.ma.core.array",
        "numpy.cov",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.ma.extras.cov"
    ],
    "numpy.ma.tests.test_extras.TestCov.test_2d_without_missing": [
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.ma.extras.cov",
        "numpy.cov"
    ],
    "numpy.ma.tests.test_extras.TestCov.test_1d_with_missing": [
        "numpy.cov",
        "numpy.ma.extras.cov",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_almost_equal"
    ],
    "numpy.ma.tests.test_extras.TestCov.test_2d_with_missing": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.core.array",
        "numpy.dot",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.cov",
        "numpy.int",
        "numpy.ma.extras.cov"
    ],
    "numpy.ma.tests.test_extras.TestCorrcoef.setup": [
        "numpy.ma.core.array",
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.testing._private.utils.rand"
    ],
    "numpy.ma.tests.test_extras.TestCorrcoef.test_ddof": [
        "numpy.ma.extras.corrcoef",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.corrcoef"
    ],
    "numpy.ma.tests.test_extras.TestCorrcoef.test_bias": [
        "numpy.ma.extras.corrcoef",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.corrcoef"
    ],
    "numpy.ma.tests.test_extras.TestCorrcoef.test_1d_without_missing": [
        "numpy.ma.extras.corrcoef",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.corrcoef"
    ],
    "numpy.ma.tests.test_extras.TestCorrcoef.test_2d_without_missing": [
        "numpy.ma.extras.corrcoef",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.corrcoef"
    ],
    "numpy.ma.tests.test_extras.TestCorrcoef.test_1d_with_missing": [
        "numpy.ma.extras.corrcoef",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.corrcoef"
    ],
    "numpy.ma.tests.test_extras.TestCorrcoef.test_2d_with_missing": [
        "numpy.ma.extras.corrcoef",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.corrcoef"
    ],
    "numpy.ma.tests.test_extras.TestPolynomial.test_polyfit": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.compressed",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.MaskedArray.view",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.masked.view",
        "numpy.matlib.rand",
        "numpy.ma.testutils.assert_equal",
        "numpy.testing._private.utils.rand",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.random.rand",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.copy",
        "numpy.ma.core.compressed",
        "numpy.ma.core.MaskedArray.compressed",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.extras.polyfit",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.reshape",
        "numpy.polyfit",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_extras.TestPolynomial.test_polyfit_with_masked_NaNs": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.masked.view",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.random.rand",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.extras.polyfit",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.reshape",
        "numpy.polyfit",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onlist": [
        "numpy.ma.extras.unique",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_unique_onmaskedarray": [
        "numpy.ma.extras.unique",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_unique_allmasked": [
        "numpy.ma.extras.unique",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.ediff1d",
        "numpy.arange",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.ediff1d",
        "numpy.arange",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_toend": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.ediff1d",
        "numpy.arange",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_tobegin_toend": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.ediff1d",
        "numpy.arange",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_ediff1d_ndarray": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.extras.ediff1d",
        "numpy.arange",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_intersect1d": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.ma.extras.intersect1d"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_setxor1d": [
        "numpy.ma.extras.setxor1d",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_isin": [
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.reshape",
        "numpy.isin",
        "numpy.ma.extras.isin",
        "numpy.zeros",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_in1d": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.extras.in1d"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_in1d_invert": [
        "numpy.invert",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.extras.in1d",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_union1d": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.extras.union1d"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.uint32",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.extras.setdiff1d"
    ],
    "numpy.ma.tests.test_extras.TestArraySetOps.test_setdiff1d_char_array": [
        "numpy.ma.extras.setdiff1d",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_extras.TestShapeBase.test_atleast_2d": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_extras.TestShapeBase.test_shape_scalar": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_extras.TestStack.test_stack_1d": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestStack.test_stack_masks": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_extras.TestStack.test_stack_nd": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.random.randint"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.setup": [
        "numpy.where",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_basicattributes": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_basic0d": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_basic1d": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.shape",
        "numpy.ma.core.isMaskedArray",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.testutils.fail_if_equal",
        "numpy.where",
        "numpy.core.fromnumeric.any",
        "numpy.ma.core.filled",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.int"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_basic2d": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.isMaskedArray",
        "numpy.ma.core.filled",
        "numpy.where",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_basic": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.concatenate",
        "numpy.where",
        "numpy.concatenate"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_alongaxis": [
        "numpy.reshape",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.core.concatenate",
        "numpy.ma.testutils.assert_equal",
        "numpy.where",
        "numpy.concatenate",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_concatenate_flexible": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.matlib.rand",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.ma.core.concatenate",
        "numpy.random.rand"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_creation_ndmin": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_creation_ndmin_from_maskedarray": [
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_creation_maskcreation": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.may_share_memory",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.testutils.fail_if_equal",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.MaskedArray",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_creation_with_list_of_maskedarrays": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.ma.copy",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_creation_from_ndarray_with_padding": [
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_asarray": [
        "numpy.ma.core.asarray",
        "numpy.ma.testutils.assert_equal",
        "numpy.where"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_asarray_default_order": [
        "numpy.ma.core.asarray"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_asarray_enforce_order": [
        "numpy.ma.core.asarray"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_fix_invalid": [
        "numpy.errstate",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.fix_invalid"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_maskedelement": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.filled"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_set_element_as_object": [
        "numpy.ma.testutils.assert_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_indexing": [
        "numpy.ma.core.array",
        "numpy.arange",
        "numpy.ma.core.getmask",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.sort",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.core.sort",
        "numpy.ma.core.masked_values",
        "numpy.ma.core.allequal",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_copy": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.ma.core.getmask",
        "numpy.dtype",
        "numpy.ma.core.make_mask",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.concatenate",
        "numpy.ma.core.allequal",
        "numpy.ma.core.resize"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_copy_0d": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_copy_on_python_builtins": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.ma.core.isMaskedArray",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_copy_immutable": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_deepcopy": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_str_repr": [
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.arange",
        "numpy.int8",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.arange"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_str_repr_legacy": [
        "numpy.ma.core.array",
        "numpy.get_printoptions",
        "numpy.arange",
        "numpy.set_printoptions",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.arange"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_0d_unicode": [
        "numpy.ma.core.array",
        "numpy.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_pickling": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.int",
        "numpy.ma.core.dumps"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_pickling_subbaseclass": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.recarray",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_pickling_maskedconstant": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.dumps"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_pickling_wstructured": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_pickling_keepalignment": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_single_element_subscript": [
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_topython": [
        "numpy.int",
        "numpy.isnan",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.ma.core.MAError"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_1": [
        "numpy.lib.type_check.real",
        "numpy.real",
        "numpy.ma.core.masked_where",
        "numpy.ma.core.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.where"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_2": [
        "numpy.ma.core.where",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_oddfeatures_3": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_object_dtype": [
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.ma.extras.masked_all",
        "numpy.ma.masked_all",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_flexible_dtype": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.default_fill_value",
        "numpy.array",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_mvoid": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.mvoid",
        "numpy.ma.core.default_fill_value",
        "numpy.ma.core.mvoid.filled"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_nested_dtype": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.matlib.zeros",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.ma.zeros",
        "numpy.int",
        "numpy.zeros"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_filled_with_f_order": [
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_optinfo_propagation": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_optinfo_forward_propagation": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_fancy_printoptions": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_flatten_structured_array": [
        "numpy.int",
        "numpy.ma.core.flatten_structured_array",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_void0d": [
        "numpy.int",
        "numpy.ma.core.mvoid",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_getitem": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.mvoid"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_iter": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_mvoid_print": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArray.test_object_with_array": [
        "numpy.all"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.setup": [
        "numpy.geterr",
        "numpy.where",
        "numpy.seterr",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.teardown": [
        "numpy.geterr",
        "numpy.seterr"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_basic_arithmetic": [
        "numpy.ma.testutils.assert_equal",
        "numpy.subtract",
        "numpy.add",
        "numpy.divide",
        "numpy.where",
        "numpy.multiply",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_divide_on_different_shapes": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_mixed_arithmetic": [
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_limits_arithmetic": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.getmaskarray",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_masked_singleton_arithmetic": [
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_masked_singleton_equality": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_arithmetic_with_masked_singleton_on_1d_singleton": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_scalar_arithmetic": [
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_basic_ufuncs": [
        "numpy.equal",
        "numpy.sinh",
        "numpy.sqrt",
        "numpy.cosh",
        "numpy.log10",
        "numpy.arcsin",
        "numpy.tan",
        "numpy.tanh",
        "numpy.arccos",
        "numpy.arctan",
        "numpy.exp",
        "numpy.arctan2",
        "numpy.absolute",
        "numpy.less_equal",
        "numpy.less",
        "numpy.sin",
        "numpy.not_equal",
        "numpy.log",
        "numpy.greater_equal",
        "numpy.cos",
        "numpy.conjugate",
        "numpy.greater",
        "numpy.angle",
        "numpy.ma.testutils.assert_equal",
        "numpy.where"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_count_func": [
        "numpy.ndarray",
        "numpy.ma.core.array",
        "numpy.AxisError",
        "numpy.ma.core.getmask",
        "numpy.ma.testutils.assert_equal",
        "numpy.intp"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_count_on_python_builtins": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_func": [
        "numpy.ma.core.min",
        "numpy.ma.core.reshape",
        "numpy.ma.core.max",
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.where",
        "numpy.where",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minimummaximum_func": [
        "numpy.maximum",
        "numpy.core.numeric.outer",
        "numpy.maximum.outer",
        "numpy.outer",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core._extrema_operation.outer",
        "numpy.minimum",
        "numpy.ma.core.outer",
        "numpy.add.outer",
        "numpy.ones",
        "numpy.ma.core._MaskedBinaryOperation.outer",
        "numpy.ma.testutils.assert_equal",
        "numpy.minimum.outer",
        "numpy.multiply.outer"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.ma.core.array",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.ma.testutils.assert_equal",
        "numpy.fmax.reduce"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_funcs_with_output": [
        "numpy.ma.core.MaskError",
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.random.uniform",
        "numpy.empty",
        "numpy.round",
        "numpy.ma.core.MaskedArray.round",
        "numpy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_minmax_methods": [
        "numpy.ma.testutils.assert_equal",
        "numpy.where",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_addsumprod": [
        "numpy.ma.core.concatenate",
        "numpy.ma.testutils.assert_equal",
        "numpy.sum",
        "numpy.ma.core.filled",
        "numpy.where",
        "numpy.concatenate",
        "numpy.product",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_binops_d2D": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_domained_binops_d2D": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_noshrinking": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ufunc_nomask": [
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_noshink_on_creation": [
        "numpy.ma.core.masked_values",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.masked_values"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_mod": [
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal",
        "numpy.mod",
        "numpy.where"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_TakeTransposeInnerOuter": [
        "numpy.ma.core.take",
        "numpy.ma.core.outer",
        "numpy.transpose",
        "numpy.ma.testutils.assert_equal",
        "numpy.take",
        "numpy.ma.core.transpose",
        "numpy.arange",
        "numpy.ma.core.filled",
        "numpy.outer",
        "numpy.inner",
        "numpy.ma.core.array",
        "numpy.ma.core.inner"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_imag_real": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_methods_with_output": [
        "numpy.int",
        "numpy.ma.core.reshape",
        "numpy.empty",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_on_structured": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_ne_on_structured": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_ne_structured_extra": [
        "numpy.core.fromnumeric.all",
        "numpy.core.fromnumeric.any",
        "numpy.ma.core.MaskedArray",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.mvoid",
        "numpy.ma.core.MaskedArray.view",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_with_None": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_with_scalar": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_eq_different_dimensions": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayArithmetic.test_numpyarithmetics": [
        "numpy.log",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_keepmask": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core.make_mask",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.copy",
        "numpy.ma.core.filled",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask_again": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_hardmask_oncemore_yay": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_smallmask": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_shrink_mask": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.core.MaskedArray.shrink_mask",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.int",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_flat": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_assign_dtype": [
        "numpy.ma.core.array",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_assign_dtype.assign",
        "numpy.zeros",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.MaskedArray",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.dtype",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayAttributes.test_assign_dtype.assign": [
        "numpy.zeros",
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_check_on_scalar": [
        "numpy.int",
        "numpy.ma.core._check_fill_value",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.default_fill_value"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_check_on_fields": [
        "numpy.ndarray",
        "numpy.int",
        "numpy.ma.core.default_fill_value",
        "numpy.array",
        "npy_tempita._looper.loop_pos.item",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core._check_fill_value"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_conversion": [
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.ma.core.default_fill_value",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.core.default_fill_value"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value_structured": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.default_fill_value",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_default_fill_value_void": [
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.core.default_fill_value",
        "numpy.dtype"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_exotic_dtype": [
        "numpy.lib.user_array.container.astype",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core._check_fill_value",
        "numpy.int",
        "numpy.ma.core.default_fill_value",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_datetime_timedelta": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.testing._private.utils.assert_equal",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.ma.core.default_fill_value"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_extremum_fill_value": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.maximum_fill_value",
        "numpy.ma.core.default_fill_value",
        "numpy.ma.core.array",
        "numpy.ma.core.minimum_fill_value"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_extremum_fill_value_subdtype": [
        "numpy.int8",
        "numpy.ma.testutils.assert_equal",
        "numpy.full",
        "numpy.ma.core.maximum_fill_value",
        "numpy.ma.core.array",
        "numpy.ma.core.minimum_fill_value"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_individual_fields": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.core.default_fill_value",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_implicit_structured_array": [
        "numpy.ma.core.set_fill_value",
        "numpy.ma.core.array",
        "numpy.ma.core.default_fill_value",
        "numpy.ma.core.MaskedArray.set_fill_value",
        "numpy.isnan",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_as_arguments": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_shape_argument": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_in_view": [
        "numpy.int32",
        "numpy.int64",
        "numpy.ma.core.MaskedArray",
        "numpy.ndarray",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestFillingValues.test_fillvalue_bytes_or_str": [
        "numpy.ma.core.default_fill_value",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.setup": [
        "numpy.ma.core.array",
        "numpy.geterr",
        "numpy.seterr"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.teardown": [
        "numpy.geterr",
        "numpy.seterr"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.test_testUfuncRegression": [
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.ma.core.array",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.core.fromnumeric",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.ma.testutils.assert_mask_equal",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.test_reduce": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.test_minmax": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.max",
        "numpy.ma.core.masked_where",
        "numpy.ma.testutils.assert_equal",
        "numpy.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.test_ndarray_mask": [
        "numpy.sqrt",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.test_treatment_of_NotImplemented": [
        "numpy.ma.tests.test_core.TestUfuncs.test_treatment_of_NotImplemented.MyClass",
        "numpy.ma.tests.test_core.TestUfuncs.test_treatment_of_NotImplemented.MyClass2"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.test_treatment_of_NotImplemented.MyClass2": [
        "numpy.ma.tests.test_core.TestUfuncs.test_treatment_of_NotImplemented.MyClass2.__rdiv__"
    ],
    "numpy.ma.tests.test_core.TestUfuncs.test_no_masked_nan_warnings": [
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.core.allclose"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.setup": [
        "numpy.uint8"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array": [
        "numpy.int16",
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array": [
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array": [
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_int": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_float": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_float": [
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_misc": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_add": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_div": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_pow": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_add_arrays": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_sub_arrays": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_datafriendly_mul_arrays": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_scalar_type": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_addition_array_type": [
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_scalar_type": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_subtraction_array_type": [
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_scalar_type": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_multiplication_array_type": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.mask_or"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_floor_division_scalar_type": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_floor_division_array_type": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.mask_or"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_scalar_type": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_division_array_type": [
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayInPlaceArithmetics.test_inplace_pow_type": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.setup": [
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_generic_methods": [
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo.conjugate",
        "numpy.ma.core.array",
        "numpy.conj",
        "numpy.ma.compress",
        "numpy.core.fromnumeric.take",
        "numpy.compress",
        "numpy.conjugate",
        "numpy.ma.core.MaskedArray.take",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.choose",
        "numpy.argmax",
        "numpy.core.fromnumeric.transpose",
        "numpy.ndarray.sum",
        "numpy.core.fromnumeric.argmax",
        "numpy.core.fromnumeric.argmin",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.argmin",
        "numpy.core.fromnumeric.diagonal",
        "numpy.ma.core.take",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.fromnumeric.compress",
        "numpy.core.fromnumeric.sum",
        "numpy.transpose",
        "numpy.core.fromnumeric.all",
        "numpy.take",
        "numpy.core.fromnumeric.any",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.diagonal",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.matrixlib.defmatrix.matrix.argmax",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.ma.sum",
        "numpy.ma.core.MaskedArray.compress",
        "numpy.matrixlib.defmatrix.matrix.argmin",
        "numpy.choose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.sum",
        "numpy.all",
        "numpy.ma.core.MaskedArray.argmin",
        "numpy.ma.core.choose",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.ma.core.MaskedArray.argmax"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allclose": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.int_",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.random.rand",
        "numpy.matlib.rand",
        "numpy.core.getlimits.iinfo.min",
        "numpy.testing._private.utils.rand",
        "numpy.ma.core.allclose"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany": [
        "numpy.ma.testutils.assert_equal",
        "numpy.bool_",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_allany_oddities": [
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argmax_argmin": [
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_clip": [
        "numpy.ma.testutils.assert_equal",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.fromnumeric.clip",
        "numpy.clip",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_compress": [
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_compressed": [
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_empty": [
        "numpy.int",
        "npy_tempita._looper.loop_pos.item",
        "numpy.ma.testutils.assert_equal",
        "numpy.may_share_memory"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put": [
        "numpy.ma.core.asarray",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.put",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put_nomask": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_put_hardmask": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.make_mask",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_putmask": [
        "numpy.ma.core.putmask",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_ravel": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_reshape": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.int8",
        "numpy.ma.testutils.assert_equal",
        "numpy.uint8",
        "numpy.ma.core.sort",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.MaskedArray",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_stable_sort": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.ma.core.argsort",
        "numpy.uint8"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argsort_matches_sort": [
        "numpy.ma.core.argsort",
        "numpy.ma.testutils.assert_equal",
        "numpy.uint8",
        "numpy.ma.core.array",
        "numpy.ma.core.sort"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort_2d": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_sort_flexible": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.ma.core.array",
        "numpy.ma.core.sort"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_argsort": [
        "numpy.argsort",
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.argsort"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_squeeze": [
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_swapaxes": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.swapaxes",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_take": [
        "numpy.ma.core.take",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_take_masked_indices": [
        "numpy.ma.core.take",
        "numpy.ma.testutils.assert_equal",
        "numpy.arange",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_tolist": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.arange",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_tolist_specialcase": [
        "numpy.int",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_toflex": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.dtype",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.int",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_fromflex": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.fromflex",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_arraymethod": [
        "numpy.ma.core.MaskedArray.cumsum",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_arraymethod_0d": [
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_transpose_view": [
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMethods.test_diagonal_view": [
        "numpy.core.fromnumeric.diagonal",
        "numpy.matlib.zeros",
        "numpy.ma.testutils.assert_equal",
        "numpy.diagonal",
        "numpy.ma.zeros",
        "numpy.zeros"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.setup": [
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_cumsumprod": [
        "numpy.ma.core.MaskedArray.cumsum",
        "numpy.core.fromnumeric.cumprod",
        "numpy.ma.testutils.assert_equal",
        "numpy.cumsum",
        "numpy.core.fromnumeric.cumsum",
        "numpy.cumprod",
        "numpy.ma.core.MaskedArray.cumprod",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_cumsumprod_with_output": [
        "numpy.int",
        "numpy.ma.core.reshape",
        "numpy.empty",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_ptp": [
        "numpy.zeros",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_add_object": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_sum_object": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_prod_object": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_meananom_object": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_trace": [
        "numpy.ma.core.array",
        "numpy.trace",
        "numpy.core.fromnumeric.reshape",
        "numpy.ndarray.sum",
        "numpy.ma.masked_array",
        "numpy.core.fromnumeric.trace",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.fromnumeric.sum",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.ma.sum",
        "numpy.ma.core.MaskedArray.trace",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_dot": [
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_almost_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_dot_shape_mismatch": [
        "numpy.ma.testutils.assert_almost_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varmean_nomask": [
        "numpy.ma.core.array",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.reshape",
        "numpy.bool_",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.float64",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd": [
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.matrixlib.defmatrix.matrix.std",
        "numpy.matrixlib.defmatrix.matrix.var",
        "numpy.core.fromnumeric.std",
        "numpy.core.fromnumeric.var",
        "numpy.sqrt",
        "numpy.ma.core.MaskedArray.var",
        "numpy.ma.core.MaskedArray.std",
        "numpy.std",
        "numpy.var",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd_specialcases": [
        "numpy.isnan",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_varstd_ddof": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_diag": [
        "numpy.ma.core.array",
        "numpy.ma.core.reshape",
        "numpy.ma.core.diag",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.diag",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethods.test_axis_methods_nomask": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex.setup": [
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayMathMethodsComplex.test_varstd": [
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.matrixlib.defmatrix.matrix.std",
        "numpy.matrixlib.defmatrix.matrix.var",
        "numpy.core.fromnumeric.std",
        "numpy.core.fromnumeric.var",
        "numpy.sqrt",
        "numpy.ma.core.MaskedArray.var",
        "numpy.ma.core.MaskedArray.std",
        "numpy.std",
        "numpy.var",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.setup": [
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_bool": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.masked_where",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_equal_wlist": [
        "numpy.ma.core.masked_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.masked_not_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_equal_fill_value": [
        "numpy.ma.core.masked_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_condition": [
        "numpy.ma.core.masked_greater_equal",
        "numpy.ma.core.masked_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.masked_greater",
        "numpy.ma.core.masked_less_equal",
        "numpy.ma.core.masked_where",
        "numpy.ma.core.masked_not_equal",
        "numpy.ma.core.array",
        "numpy.ma.core.masked_less"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_oddities": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.masked_where"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_shape_constraint": [
        "numpy.ma.core.masked_equal",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_structured": [
        "numpy.ma.masked_array",
        "numpy.zeros",
        "numpy.ones",
        "numpy.ma.core.masked_where",
        "numpy.ma.masked_where",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_where_mismatch": [
        "numpy.arange",
        "numpy.ma.core.masked_where",
        "numpy.ma.masked_where"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_masked_otherfunctions": [
        "numpy.ma.core.masked_inside",
        "numpy.ma.core.masked_outside",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.where",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round_with_output": [
        "numpy.ma.core.reshape",
        "numpy.empty",
        "numpy.round",
        "numpy.ma.core.MaskedArray.round",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_round_with_scalar": [
        "numpy.ma.testutils.assert_equal",
        "numpy.empty",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_identity": [
        "numpy.identity",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_power": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.ma.core.power",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_power_with_broadcasting": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.ma.core.filled",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.int",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.where",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_object": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.where",
        "numpy.where",
        "numpy.array",
        "numpy.ma.where"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_with_masked_choice": [
        "numpy.ma.core.where",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_with_masked_condition": [
        "numpy.ma.core.getmask",
        "numpy.ma.core.where",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_type": [
        "numpy.float32",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.int32",
        "numpy.ma.testutils.assert_equal",
        "numpy.find_common_type"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_broadcast": [
        "numpy.ma.core.reshape",
        "numpy.zeros",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.where",
        "numpy.ma.testutils.assert_equal",
        "numpy.where",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_structured": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.where",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_where_structured_masked": [
        "numpy.int",
        "numpy.ma.core._shrink_mask",
        "numpy.ma.core.where",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.ma.core.masked_where",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_choose": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.choose",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_choose_with_out": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.choose"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_reshape": [
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_make_mask_descr": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.ma.core.make_mask_descr"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_make_mask": [
        "numpy.ma.core.make_mask",
        "numpy.void",
        "numpy.ma.core.make_mask_descr",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_mask_or": [
        "numpy.ma.core.mask_or",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_flatten_mask": [
        "numpy.ma.core.flatten_mask",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_on_ndarray": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compress": [
        "numpy.ma.core.array",
        "numpy.ma.compress",
        "numpy.arange",
        "numpy.compress",
        "numpy.rec.array",
        "numpy.ma.core.MaskedArray.compress",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.fromnumeric.compress",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed": [
        "numpy.ma.compressed",
        "numpy.ndarray",
        "numpy.ma.core.array",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.core.compressed",
        "numpy.ma.core.MaskedArray.compressed",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A": [
        "numpy.ndarray"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M": [
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_convolve": [
        "numpy.ma.core.masked_equal",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.convolve",
        "numpy.arange",
        "numpy.ma.convolve",
        "numpy.core.numeric.convolve",
        "numpy.array",
        "numpy.convolve"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.setup": [
        "numpy.int",
        "numpy.ma.core.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_set_records_masks": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ones",
        "numpy.zeros",
        "numpy.ma.core.shape"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_set_record_element": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal",
        "numpy.int"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_set_record_slice": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.testutils.assert_equal",
        "numpy.int"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_mask_element": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_getmaskarray": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.getmaskarray",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_view": [
        "numpy.ma.testutils.assert_equal",
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_getitem": [
        "numpy.ma.tests.test_core.TestMaskedFields.test_getitem._test_index",
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_getitem._test_index": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core.mvoid",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.MaskedArray",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_setitem": [
        "numpy.dtype",
        "numpy.ma.extras.masked_all",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray.harden_mask",
        "numpy.array",
        "numpy.ma.MaskedArray",
        "numpy.ma.mrecords.MaskedRecords.harden_mask",
        "numpy.int",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.masked_all"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_setitem_scalar": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.arange",
        "numpy.ma.masked_array",
        "numpy.ma.arange"
    ],
    "numpy.ma.tests.test_core.TestMaskedFields.test_element_len": [
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedObjectArray.test_getitem": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_core.TestMaskedObjectArray.test_nested_ma": [
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedView.setup": [
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedView.test_view_to_nothing": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedView.test_view_to_type": [
        "numpy.squeeze",
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray",
        "numpy.core.fromnumeric.squeeze",
        "numpy.array",
        "numpy.ma.testutils.assert_equal_records",
        "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze.squeeze",
        "numpy.ma.testutils.assert_equal",
        "numpy.matrixlib.defmatrix.matrix.squeeze"
    ],
    "numpy.ma.tests.test_core.TestMaskedView.test_view_to_simple_dtype": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedView.test_view_to_flexible_dtype": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_core.TestMaskedView.test_view_to_subdtype": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_core.TestMaskedView.test_view_to_dtype_and_type": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.recarray",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestOptionalArgs.test_ndarrayfuncs": [
        "numpy.ma.tests.test_core.TestOptionalArgs.test_ndarrayfuncs.testkeepdims",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.ma.core.array",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.ma.array",
        "numpy.ma.tests.test_core.TestOptionalArgs.test_ndarrayfuncs.testaxis",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.ma.tests.test_core.TestOptionalArgs.test_ndarrayfuncs.testaxis": [
        "numpy.ma.__getattribute__",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.records.recarray.__getattribute__",
        "numpy.ma.mrecords.MaskedRecords.__getattribute__",
        "numpy.core.records.record.__getattribute__",
        "numpy.__getattribute__",
        "numpy.lib.npyio.BagObj.__getattribute__"
    ],
    "numpy.ma.tests.test_core.TestOptionalArgs.test_ndarrayfuncs.testkeepdims": [
        "numpy.ma.__getattribute__",
        "numpy.core.records.record.__getattribute__",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.records.recarray.__getattribute__",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.__getattribute__",
        "numpy.lib.npyio.BagObj.__getattribute__",
        "numpy.ma.core.shape",
        "numpy.__getattribute__"
    ],
    "numpy.ma.tests.test_core.TestOptionalArgs.test_count": [
        "numpy.ma.core.array",
        "numpy.AxisError",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.reshape",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.ndim",
        "numpy.ma.array",
        "numpy.reshape",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant._do_add_test": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.getmask",
        "numpy.ones",
        "numpy.ma.core.getmask",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_ufunc": [
        "numpy.add",
        "numpy.ma.tests.test_core.TestMaskedConstant._do_add_test"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_operator": [
        "numpy.ma.tests.test_core.TestMaskedConstant._do_add_test"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_ctor": [
        "numpy.ma.core.MaskedConstant",
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_repr": [
        "numpy._globals._NoValueType.__new__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.ma.core.MaskedConstant",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.ma.MaskedArray.__new__",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy.ma.testutils.assert_equal",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.core.memmap.memmap.__new__"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_copy": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_immutable": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.MaskedArray",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.MaskError",
        "numpy.ma.core.MaskedArray"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_int": [
        "numpy.int",
        "numpy.zeros",
        "numpy.ma.core.MaskError"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_long": [
        "numpy.ma.core.MaskError"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_float": [
        "numpy.zeros",
        "numpy.isnan"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_unicode": [
        "numpy.zeros",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_coercion_bytes": [
        "numpy.zeros",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_subclass": [
        "numpy.ma.tests.test_core.TestMaskedConstant.test_subclass.Sub"
    ],
    "numpy.ma.tests.test_core.TestMaskedConstant.test_attributes_readonly": [
        "numpy.int64"
    ],
    "numpy.ma.tests.test_core.TestMaskedWhereAliases.test_masked_values": [
        "numpy.ma.core.masked_values",
        "numpy.int16",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.masked_values",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.test_masked_array": [
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.argwhere",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "numpy.ma.tests.test_core.test_append_masked_array": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.ma.ones",
        "numpy.matlib.ones",
        "numpy.ma.extras.masked_all",
        "numpy.ma.append",
        "numpy.ma.core.masked_equal",
        "numpy.ma.masked_equal",
        "numpy.ones",
        "numpy.core.numeric.ones",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.masked_all",
        "numpy.ma.core.append"
    ],
    "numpy.ma.tests.test_core.test_append_masked_array_along_axis": [
        "numpy.ma.testutils.assert_array_equal",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.masked_values",
        "numpy.ma.append",
        "numpy.ma.core.masked_equal",
        "numpy.ma.masked_equal",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.masked_values",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.ma.arange",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.ma.tests.test_core.test_default_fill_value_complex": [
        "numpy.ma.core.default_fill_value"
    ],
    "numpy.ma.tests.test_core.test_ufunc_with_output": [
        "numpy.ma.core.array",
        "numpy.add"
    ],
    "numpy.ma.tests.test_core.test_ufunc_with_out_varied": [
        "numpy.ma.testutils.assert_equal",
        "numpy.add",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_core.test_astype": [
        "numpy.ndarray",
        "numpy.ma.core.array",
        "numpy.int",
        "numpy.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.ma.tests.test_deprecations.TestArgsort._test_base": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.core.MaskedArrayFutureWarning",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.ma.tests.test_deprecations.TestArgsort.test_function_ndarray": [
        "numpy.core.defchararray.chararray.argsort",
        "numpy.argsort",
        "numpy.ndarray",
        "numpy.ma.core.argsort",
        "numpy.core.fromnumeric.argsort",
        "numpy.ma.core.MaskedArray.argsort",
        "numpy.ma.tests.test_deprecations.TestArgsort._test_base"
    ],
    "numpy.ma.tests.test_deprecations.TestArgsort.test_function_maskedarray": [
        "numpy.ma.core.argsort",
        "numpy.core.fromnumeric.argsort",
        "numpy.ma.core.MaskedArray",
        "numpy.argsort",
        "numpy.ma.MaskedArray",
        "numpy.ma.core.MaskedArray.argsort",
        "numpy.ma.tests.test_deprecations.TestArgsort._test_base",
        "numpy.core.defchararray.chararray.argsort"
    ],
    "numpy.ma.tests.test_deprecations.TestArgsort.test_method": [
        "numpy.ma.core.argsort",
        "numpy.core.fromnumeric.argsort",
        "numpy.ma.core.MaskedArray",
        "numpy.argsort",
        "numpy.ma.MaskedArray",
        "numpy.ma.core.MaskedArray.argsort",
        "numpy.ma.tests.test_deprecations.TestArgsort._test_base",
        "numpy.core.defchararray.chararray.argsort"
    ],
    "numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_minimum": [
        "numpy.ma.core.array",
        "numpy.minimum",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_maximum": [
        "numpy.maximum",
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.ma.tests.test_deprecations.TestMinimumMaximum.test_axis_default": [
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.arange",
        "numpy.logical_xor.reduce",
        "numpy.core.fromnumeric.reshape",
        "numpy.multiply.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.ma.testutils.assert_equal",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.MaskedArrayFutureWarning",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.minimum.reduce",
        "numpy.ma.core.reshape",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.reshape",
        "numpy.fmax.reduce",
        "numpy.ma.arange"
    ],
    "numpy.testing.print_coercion_tables.GenericObject": [
        "numpy.dtype"
    ],
    "numpy.testing.print_coercion_tables.print_cancast_table": [
        "numpy.int",
        "numpy.can_cast"
    ],
    "numpy.testing.print_coercion_tables.print_coercion_table": [
        "numpy.ndarray",
        "numpy.testing.print_coercion_tables.GenericObject",
        "numpy.add",
        "numpy.obj2sctype",
        "numpy.array"
    ],
    "numpy.testing.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.misc_util.Configuration.add_subpackage",
        "numpy.distutils.misc_util"
    ],
    "numpy.testing._private.pytesttester.PytestTester.__call__": [
        "numpy.testing._private.pytesttester._show_numpy_info",
        "numpy.distutils",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.testing._private.decorators.setastest": [
        "numpy.testing._private.decorators.setastest.set_test"
    ],
    "numpy.testing._private.decorators.skipif.skip_decorator": [
        "numpy.testing._private.decorators.skipif.skip_decorator.skipper_func",
        "numpy.testing._private.decorators.skipif.skip_decorator.skipper_gen"
    ],
    "numpy.testing._private.decorators.skipif.skip_decorator.skipper_func": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.decorators.skipif.skip_decorator.get_msg"
    ],
    "numpy.testing._private.decorators.skipif.skip_decorator.skipper_gen": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.decorators.skipif.skip_decorator.get_msg"
    ],
    "numpy.testing._private.decorators.skipif": [
        "numpy.testing._private.decorators.skipif.skip_decorator"
    ],
    "numpy.testing._private.decorators.knownfailureif": [
        "numpy.testing._private.decorators.knownfailureif.knownfail_decorator"
    ],
    "numpy.testing._private.decorators.knownfailureif.knownfail_decorator": [
        "numpy.testing._private.decorators.knownfailureif.knownfail_decorator.knownfailer"
    ],
    "numpy.testing._private.decorators.knownfailureif.knownfail_decorator.knownfailer": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.testing._private.decorators.deprecated.deprecate_decorator": [
        "numpy.testing._private.decorators.deprecated.deprecate_decorator._deprecated_imp"
    ],
    "numpy.testing._private.decorators.deprecated.deprecate_decorator._deprecated_imp": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.testing._private.decorators.deprecated": [
        "numpy.testing._private.decorators.deprecated.deprecate_decorator"
    ],
    "numpy.testing._private.decorators.parametrize": [
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.testing._private.parameterized.parameterized"
    ],
    "numpy.testing._private.parameterized.param.__new__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.testing._private.parameterized.QuietOrderedDict": [
        "numpy.distutils.npy_pkg_config.LibraryInfo.__str__",
        "numpy.core.code_generators.genapi.NonNull.__str__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__repr__",
        "npy_tempita._looper.looper.__repr__",
        "npy_tempita.TemplateObjectGetter.__repr__",
        "numpy.core.records.recarray.__repr__",
        "numpy.ma.core._MaskedUFunc.__str__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.__repr__",
        "numpy.testing._private.parameterized.param.__repr__",
        "npy_tempita.TemplateDef.__repr__",
        "npy_tempita.bunch.__repr__",
        "numpy.testing._private.utils.WarningMessage.__str__",
        "numpy._globals._NoValueType.__repr__",
        "numpy.core.machar.MachAr.__str__",
        "npy_tempita.TemplateDef.__str__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__str__",
        "numpy.lib.polynomial.poly1d.__repr__",
        "npy_tempita._Empty.__str__",
        "numpy.core.records.record.__str__",
        "numpy.core.code_generators.genapi.Function.__str__",
        "npy_tempita._Empty.__repr__",
        "npy_tempita.html.__str__",
        "numpy.polynomial._polybase.ABCPolyBase.__repr__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__repr__",
        "numpy.core.getlimits.finfo.__str__",
        "numpy.core.getlimits.finfo.__repr__",
        "numpy.distutils.npy_pkg_config.FormatError.__str__",
        "numpy.polynomial._polybase.ABCPolyBase.__str__",
        "numpy.lib.polynomial.poly1d.__str__",
        "npy_tempita.html.__repr__",
        "make_lite.FortranRoutine.__repr__",
        "npy_tempita._looper.loop_pos.__repr__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__str__",
        "numpy.distutils.misc_util.Configuration.__str__",
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter.__str__",
        "numpy.lib.user_array.container.__repr__",
        "numpy.core.code_generators.genapi.ParseError.__str__",
        "numpy.ma.mrecords.MaskedRecords.__str__",
        "npy_tempita.TemplateObject.__repr__",
        "npy_tempita.TemplateError.__str__",
        "numpy.ma.mrecords.MaskedRecords.__repr__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__str__",
        "numpy.ma.core.MaskedArray.__repr__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__repr__",
        "numpy.lib.tests.test_mixins.ArrayLike.__repr__",
        "numpy.ma.core._MaskedPrintOption.__str__",
        "numpy.ma.core.MaskedArray.__str__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__str__",
        "numpy.core.getlimits.iinfo.__str__",
        "numpy.core.code_generators.genapi.StealRef.__str__",
        "numpy.core.getlimits.iinfo.__repr__",
        "numpy.core.records.record.__repr__"
    ],
    "numpy.testing._private.parameterized.parameterized_argument_value_pairs": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.testing._private.parameterized.QuietOrderedDict",
        "numpy.ma.core.append"
    ],
    "numpy.testing._private.parameterized.default_doc_func": [
        "numpy.core.fromnumeric.partition",
        "numpy.partition",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.rstrip",
        "numpy.testing._private.parameterized.parameterized_argument_value_pairs",
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.ma.core.MaskedArray.partition",
        "numpy.core.defchararray.partition",
        "numpy.core.defchararray.endswith",
        "numpy.core.defchararray.chararray.partition"
    ],
    "numpy.testing._private.parameterized.default_name_func": [
        "numpy.testing._private.parameterized.parameterized.to_safe_name"
    ],
    "numpy.testing._private.parameterized.detect_runner": [
        "numpy.core.fromnumeric.partition",
        "numpy.partition",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.ma.core.MaskedArray.partition",
        "numpy.core.defchararray.partition",
        "numpy.core.defchararray.endswith",
        "numpy.core.defchararray.chararray.partition"
    ],
    "numpy.testing._private.parameterized.parameterized.__init__": [
        "numpy.testing._private.parameterized.parameterized.input_as_callable",
        "numpy.testing._private.parameterized.default_doc_func"
    ],
    "numpy.testing._private.parameterized.parameterized.__call__": [
        "numpy.testing._private.parameterized.parameterized.input_as_callable",
        "numpy.testing._private.parameterized.parameterized.__call__.wrapper",
        "numpy.testing._private.parameterized.parameterized.assert_not_in_testcase_subclass"
    ],
    "numpy.testing._private.parameterized.parameterized.__call__.wrapper": [
        "numpy.testing._private.parameterized.parameterized.input_as_callable",
        "numpy.testing._private.parameterized.param.from_decorator",
        "numpy.testing._private.parameterized.parameterized.param_as_nose_tuple"
    ],
    "numpy.testing._private.parameterized.parameterized.param_as_nose_tuple": [
        "numpy.testing._private.parameterized.default_doc_func",
        "numpy.testing._private.parameterized.detect_runner",
        "numpy.testing._private.parameterized.make_method"
    ],
    "numpy.testing._private.parameterized.parameterized.assert_not_in_testcase_subclass": [
        "numpy.core.fromnumeric.any",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.testing._private.parameterized.parameterized._terrible_magic_get_defining_classes",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any"
    ],
    "numpy.testing._private.parameterized.parameterized._terrible_magic_get_defining_classes": [
        "numpy.ma.core.MaskedArray.partition",
        "numpy.core.defchararray.partition",
        "numpy.core.fromnumeric.partition",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.partition",
        "numpy.partition",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.chararray.strip"
    ],
    "numpy.testing._private.parameterized.parameterized.input_as_callable": [
        "numpy.testing._private.parameterized.parameterized.check_input_values"
    ],
    "numpy.testing._private.parameterized.parameterized.expand": [
        "numpy.testing._private.parameterized.parameterized.expand.parameterized_expand_wrapper",
        "numpy.testing._private.parameterized.default_name_func",
        "numpy.testing._private.parameterized.default_doc_func"
    ],
    "numpy.testing._private.parameterized.parameterized.expand.parameterized_expand_wrapper": [
        "numpy.testing._private.parameterized.default_name_func",
        "numpy.testing._private.parameterized.parameterized.input_as_callable",
        "numpy.testing._private.parameterized.default_doc_func",
        "numpy.testing._private.parameterized.parameterized.param_as_standalone_func"
    ],
    "numpy.testing._private.parameterized.parameterized.param_as_standalone_func": [
        "numpy.testing._private.parameterized.parameterized.param_as_standalone_func.standalone_func"
    ],
    "numpy.testing._private.noseclasses.NumpyDocTestFinder._find": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.testing._private.noseclasses.NumpyDocTestFinder._from_module",
        "numpy.testing._private.noseclasses.NumpyDocTestFinder._find"
    ],
    "numpy.testing._private.noseclasses.NumpyOutputChecker.check_output": [
        "numpy.testing._private.noseclasses.NumpyOutputChecker.check_output"
    ],
    "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "numpy.testing._private.noseclasses.NumpyDoctest": [
        "numpy.testing._private.noseclasses.NumpyOutputChecker",
        "numpy.testing._private.noseclasses.NumpyDocTestFinder",
        "numpy.testing._private.noseclasses.NumpyDocTestCase"
    ],
    "numpy.testing._private.noseclasses.NumpyDoctest.configure": [
        "numpy.testing._private.noseclasses.NumpyDocTestFinder",
        "numpy.ma.core._MaskedPrintOption.enabled"
    ],
    "numpy.testing._private.noseclasses.NumpyDoctest.set_test_context": [
        "numpy",
        "numpy.testing._private.nosetester.get_package_name"
    ],
    "numpy.testing._private.noseclasses.NumpyDoctest.loadTestsFromModule": [
        "numpy.core.defchararray.find",
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.ma.core.sort",
        "numpy.core.defchararray.chararray.find",
        "numpy.sort",
        "numpy.testing._private.noseclasses.NumpyOutputChecker",
        "numpy.testing._private.noseclasses.NumpyDoctest.set_test_context",
        "numpy.testing._private.noseclasses.NumpyDocTestCase"
    ],
    "numpy.testing._private.noseclasses.NumpyDoctest.afterContext": [
        "numpy.set_printoptions",
        "numpy.get_printoptions"
    ],
    "numpy.testing._private.noseclasses.NumpyDoctest.wantFile": [
        "numpy.testing._private.noseclasses.NumpyDoctest.wantFile"
    ],
    "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase": [
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run"
    ],
    "numpy.testing._private.noseclasses.NumpyTestProgram.runTests": [
        "numpy.distutils.command.egg_info.egg_info.run",
        "numpy.f2py.diagnose.run",
        "numpy.distutils.command.config_compiler.config_fc.run",
        "numpy.distutils.command.build_scripts.build_scripts.run",
        "numpy.distutils.command.build_ext.build_ext.run",
        "numpy.distutils.command.build.build.run",
        "numpy.distutils.command.config_compiler.config_cc.run",
        "push_docs_to_repo.run",
        "numpy.lib.tests.test_arrayterator.test",
        "numpy.distutils.command.install_data.install_data.run",
        "setup.sdist_checked.run",
        "benchmarks.bench_app.LaplaceInplace.setup.run",
        "numpy.distutils.command.install_headers.install_headers.run",
        "numpy.testing._private.nosetester.NoseTester.test",
        "numpy.distutils.command.build_py.build_py.run",
        "numpy.distutils.command.install.install.run",
        "numpy.core.tests.test_deprecations.TestRankDeprecation.test",
        "numpy.distutils.command.config.config",
        "numpy.distutils.command.build_src.build_src.run",
        "numpy.distutils.command.install_clib.install_clib.run",
        "numpy.distutils.command.build_clib.build_clib.run",
        "numpy.f2py.f2py_testing.run",
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run"
    ],
    "numpy.testing._private.utils.gisnan": [
        "numpy.core"
    ],
    "numpy.testing._private.utils.gisfinite": [
        "numpy.core"
    ],
    "numpy.testing._private.utils.gisinf": [
        "numpy.core"
    ],
    "numpy.testing._private.utils.rand": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.random.random",
        "numpy.random.random_sample",
        "numpy.core"
    ],
    "numpy.testing._private.utils.memusage": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.open",
        "numpy.testing._private.utils.GetPerformanceAttributes",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.int",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib._datasource.open"
    ],
    "numpy.testing._private.utils.jiffies": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.int",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib._datasource.open"
    ],
    "numpy.testing._private.utils.assert_equal": [
        "numpy.testing._private.utils.build_err_msg",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.utils.assert_array_equal",
        "numpy.testing._private.utils.assert_equal",
        "numpy.testing._private.utils.gisnan",
        "numpy.core"
    ],
    "numpy.testing._private.utils.assert_almost_equal": [
        "numpy.testing._private.utils.assert_almost_equal",
        "numpy.testing._private.utils.assert_almost_equal._build_err_msg",
        "numpy.testing._private.utils.gisnan",
        "numpy.testing._private.utils.gisfinite",
        "numpy.testing._private.utils.assert_array_almost_equal",
        "numpy.abs",
        "numpy.core"
    ],
    "numpy.testing._private.utils.assert_almost_equal._build_err_msg": [
        "numpy.testing._private.utils.build_err_msg"
    ],
    "numpy.testing._private.utils.assert_approx_equal": [
        "numpy.testing._private.utils.build_err_msg",
        "numpy.errstate",
        "numpy.floor",
        "numpy.log10",
        "numpy.power",
        "numpy.testing._private.utils.gisnan",
        "numpy.testing._private.utils.gisfinite"
    ],
    "numpy.testing._private.utils.assert_array_compare": [
        "numpy.testing._private.utils.build_err_msg",
        "numpy.testing._private.utils.assert_array_compare.isnumber",
        "numpy.testing._private.utils.assert_array_compare.istime",
        "numpy.testing._private.utils.assert_array_compare.chk_same_position",
        "numpy.core"
    ],
    "numpy.testing._private.utils.assert_array_compare.chk_same_position": [
        "numpy.testing._private.utils.build_err_msg",
        "numpy.testing._private.utils.assert_array_equal"
    ],
    "numpy.testing._private.utils.assert_array_equal": [
        "numpy.testing._private.utils.assert_array_compare"
    ],
    "numpy.testing._private.utils.assert_array_almost_equal": [
        "numpy.core.fromnumeric",
        "numpy.testing._private.utils.assert_array_compare",
        "numpy.core.numerictypes",
        "numpy.core",
        "numpy.testing._private.utils.assert_array_almost_equal.compare"
    ],
    "numpy.testing._private.utils.assert_array_almost_equal.compare": [
        "numpy.lib.user_array.container.astype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.abs",
        "numpy.testing._private.utils.gisinf",
        "numpy.core.fromnumeric.all",
        "numpy.core.numerictypes.issubdtype",
        "numpy.core.fromnumeric.any",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.all"
    ],
    "numpy.testing._private.utils.assert_array_less": [
        "numpy.testing._private.utils.assert_array_compare"
    ],
    "numpy.testing._private.utils.assert_string_equal": [
        "numpy.insert",
        "numpy.ma.testutils.fail_if_array_equal.compare",
        "numpy.ma.testutils.assert_array_approx_equal.compare",
        "numpy.ma.testutils.assert_array_almost_equal.compare",
        "numpy.core.defchararray.rstrip",
        "numpy.core.defchararray.startswith",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.append",
        "numpy.lib.function_base.insert",
        "numpy.testing._private.utils.assert_allclose.compare",
        "numpy.lib.function_base.append",
        "numpy.testing._private.utils.assert_array_almost_equal.compare",
        "numpy.ma.core.append"
    ],
    "numpy.testing._private.utils.rundocs": [
        "numpy.core.defchararray.find",
        "numpy.core.defchararray.chararray.find"
    ],
    "numpy.testing._private.utils.raises": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.utils.import_nose",
        "numpy.testing._private.utils.raises"
    ],
    "numpy.testing._private.utils.assert_raises": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.testing._private.utils.assert_raises_regex": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.testing._private.utils.decorate_methods": [
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith"
    ],
    "numpy.testing._private.utils.measure": [
        "numpy.f2py.compile",
        "numpy.testing._private.utils.jiffies"
    ],
    "numpy.testing._private.utils._assert_valid_refcount": [
        "numpy.ma.core.reshape",
        "numpy.testing._private.utils.assert_",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.testing._private.utils.assert_allclose": [
        "numpy.testing._private.utils.assert_array_compare",
        "numpy.testing._private.utils.assert_allclose.compare",
        "numpy.asanyarray"
    ],
    "numpy.testing._private.utils.assert_allclose.compare": [
        "numpy.core.numeric.isclose",
        "numpy.isclose"
    ],
    "numpy.testing._private.utils.assert_array_almost_equal_nulp": [
        "numpy.testing._private.utils.nulp_diff",
        "numpy.spacing",
        "numpy.all",
        "numpy.where",
        "numpy.iscomplexobj"
    ],
    "numpy.testing._private.utils.assert_array_max_ulp": [
        "numpy.testing._private.utils.nulp_diff",
        "numpy.all"
    ],
    "numpy.testing._private.utils.nulp_diff": [
        "numpy.testing._private.utils.nulp_diff._diff",
        "numpy.common_type",
        "numpy.testing._private.utils.integer_repr",
        "numpy.iscomplexobj",
        "numpy.array"
    ],
    "numpy.testing._private.utils.nulp_diff._diff": [
        "numpy.array"
    ],
    "numpy.testing._private.utils.integer_repr": [
        "numpy.int16",
        "numpy.float32",
        "numpy.int32",
        "numpy.int64",
        "numpy.float16",
        "numpy.float64",
        "numpy.testing._private.utils._integer_repr"
    ],
    "numpy.testing._private.utils.WarningManager.__enter__": [
        "numpy.lib.scimath.log",
        "numpy.log",
        "numpy._import_tools.PackageLoader.log",
        "numpy.testing._private.utils.WarningManager.__enter__.showwarning"
    ],
    "numpy.testing._private.utils.WarningManager.__enter__.showwarning": [
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.testing._private.utils.WarningMessage"
    ],
    "numpy.testing._private.utils._assert_warns_context": [
        "numpy.testing._private.utils.suppress_warnings.record",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.utils.suppress_warnings.__enter__",
        "numpy.testing._private.utils.suppress_warnings.__exit__",
        "numpy.testing._private.utils.suppress_warnings"
    ],
    "numpy.testing._private.utils.assert_warns": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.utils._assert_warns_context"
    ],
    "numpy.testing._private.utils.assert_no_warnings": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.utils._assert_no_warnings_context"
    ],
    "numpy.testing._private.utils._gen_alignment_data": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.testing._private.utils.tempdir": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.testing._private.utils.temppath": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.testing._private.utils.clear_and_catch_warnings.__enter__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "clapack_scrub.LineQueue.clear",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.testing._private.utils.clear_and_catch_warnings.__exit__": [
        "numpy.lib._iotools.StringConverter.update",
        "clapack_scrub.LineQueue.clear"
    ],
    "numpy.testing._private.utils.suppress_warnings._clear_registries": [
        "clapack_scrub.LineQueue.clear"
    ],
    "numpy.testing._private.utils.suppress_warnings._filter": [
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.add",
        "numpy.f2py.auxfuncs.replace",
        "numpy.testing._private.utils.suppress_warnings._clear_registries",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.ma.add",
        "numpy.append",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.lib.function_base.append",
        "numpy.core.defchararray.add",
        "numpy.ma.core.append",
        "clapack_scrub.LineQueue.add"
    ],
    "numpy.testing._private.utils.suppress_warnings.filter": [
        "numpy.testing._private.utils.suppress_warnings._filter"
    ],
    "numpy.testing._private.utils.suppress_warnings.record": [
        "numpy.testing._private.utils.suppress_warnings._filter"
    ],
    "numpy.testing._private.utils.suppress_warnings.__enter__": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "numpy.testing._private.utils.suppress_warnings._showwarning",
        "numpy.f2py.auxfuncs.replace",
        "clapack_scrub.LineQueue.add",
        "numpy.core.defchararray.replace",
        "numpy.testing._private.utils.suppress_warnings._clear_registries"
    ],
    "numpy.testing._private.utils.suppress_warnings.__exit__": [
        "numpy.testing._private.utils.suppress_warnings._clear_registries"
    ],
    "numpy.testing._private.utils.suppress_warnings._showwarning": [
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.defchararray.startswith",
        "numpy.add",
        "numpy.ma.append",
        "numpy.ma.add",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.append",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.core.defchararray.add",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "clapack_scrub.LineQueue.add",
        "numpy.testing._private.utils.WarningMessage"
    ],
    "numpy.testing._private.utils.suppress_warnings.__call__": [
        "numpy.testing._private.utils.suppress_warnings.__call__.new_func"
    ],
    "numpy.testing._private.utils.suppress_warnings.__call__.new_func": [
        "numpy.testing._private.utils.suppress_warnings.__enter__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.utils.suppress_warnings.__exit__"
    ],
    "numpy.testing._private.utils._assert_no_gc_cycles_context": [
        "numpy.testing._private.utils.assert_"
    ],
    "numpy.testing._private.utils.assert_no_gc_cycles": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing._private.utils._assert_no_gc_cycles_context"
    ],
    "numpy.testing._private.nosetester.get_package_name": [
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.split",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.testing._private.nosetester.run_module_suite": [
        "numpy.testing._private.noseclasses.KnownFailurePlugin",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.testing._private.nosetester.NoseTester.__init__": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.testing._private.nosetester.get_package_name",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.testing._private.nosetester.NoseTester._show_system_info": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.testing._private.nosetester.get_package_name",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.replace",
        "numpy"
    ],
    "numpy.testing._private.nosetester.NoseTester._get_custom_doctester": [
        "numpy.testing._private.noseclasses.NumpyDoctest"
    ],
    "numpy.testing._private.nosetester.NoseTester.prepare_test_args": [
        "numpy.testing._private.nosetester.NoseTester._get_custom_doctester",
        "numpy.int",
        "numpy.testing._private.noseclasses.KnownFailurePlugin",
        "numpy.testing._private.noseclasses.Unplugger",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.testing._private.nosetester.get_package_name",
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin",
        "numpy.testing._private.nosetester.NoseTester._test_argv"
    ],
    "numpy.testing._private.nosetester.NoseTester.test": [
        "numpy.testing._private.nosetester.NoseTester._show_system_info",
        "numpy.testing._private.nosetester.NoseTester.prepare_test_args",
        "numpy.ma.core.MaskedArray.min",
        "setup.sdist_checked.run",
        "numpy.f2py.f2py_testing.run",
        "numpy.distutils.command.egg_info.egg_info.run",
        "numpy.distutils.command.config_compiler.config_fc.run",
        "numpy.ma.core.min",
        "numpy.distutils.command.config_compiler.config_cc.run",
        "benchmarks.bench_app.LaplaceInplace.setup.run",
        "numpy.testing._private.nosetester.get_package_name",
        "numpy.distutils.command.build_clib.build_clib.run",
        "numpy.distutils.command.build_scripts.build_scripts.run",
        "numpy.min",
        "numpy.distutils.command.build.build.run",
        "push_docs_to_repo.run",
        "numpy.distutils.command.install_data.install_data.run",
        "numpy.distutils.command.build_src.build_src.run",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy._globals.ModuleDeprecationWarning",
        "numpy.f2py.diagnose.run",
        "numpy.distutils.command.build_ext.build_ext.run",
        "numpy.distutils.command.install_headers.install_headers.run",
        "numpy.distutils.command.build_py.build_py.run",
        "numpy.distutils.command.install.install.run",
        "numpy.distutils.command.install_clib.install_clib.run",
        "numpy.testing._private.noseclasses.NumpyTestProgram",
        "numpy.testing._private.noseclasses.FPUModeCheckPlugin.prepareTestCase.run"
    ],
    "numpy.testing._private.nosetester.NoseTester.bench": [
        "numpy.testing._private.nosetester.NoseTester._show_system_info",
        "numpy.testing._private.noseclasses.Unplugger",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.testing._private.nosetester.get_package_name",
        "numpy.testing._private.nosetester.NoseTester._test_argv"
    ],
    "numpy.testing._private.nosetester._numpy_tester": [
        "numpy.testing._private.nosetester.NoseTester",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "numpy"
    ],
    "numpy.testing.tests.test_utils._GenericTest.test_array_rank1_eq": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils._GenericTest.test_array_rank1_noteq": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils._GenericTest.test_array_rank2_eq": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils._GenericTest.test_array_diffshape": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils._GenericTest.test_objarray": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils._GenericTest.test_array_likes": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual": [
        "numpy.testing.tests.test_utils._GenericTest"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual.setup": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.empty"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1": [
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.empty"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3": [
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual.test_nan_array": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual.test_string_arrays": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayEqual.test_recarrays": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.empty",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_defaults": [
        "npy_tempita.compat3.b",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_no_verbose": [
        "npy_tempita.compat3.b",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_custom_names": [
        "npy_tempita.compat3.b",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestBuildErrorMessage.test_build_err_msg_custom_precision": [
        "npy_tempita.compat3.b",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual": [
        "numpy.testing.tests.test_utils.TestArrayEqual"
    ],
    "numpy.testing.tests.test_utils.TestEqual.setup": [
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_nan_items": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_inf_items": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_datetime": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.datetime64"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_nat_items": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_non_numeric": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_complex_item": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_negative_zero": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_complex": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestEqual.test_error_message": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.testing.assert_equal",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.replace",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqual": [
        "numpy.testing.tests.test_utils._GenericTest"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_simple": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_nan": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_inf": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass": [
        "numpy.testing.tests.test_utils._GenericTest._test_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.MaskedArray",
        "numpy.ma.masked_array",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray": [
        "numpy.ndarray"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.__lt__": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual": [
        "numpy.testing.tests.test_utils._GenericTest"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.setup": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_closeness": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_nan_item": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_inf_item": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_simple_item": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_complex_item": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_complex": [
        "numpy.testing.tests.test_utils._GenericTest._test_not_equal",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_error_message": [
        "numpy.core.defchararray.split",
        "numpy.testing.assert_equal",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "npy_tempita.compat3.b",
        "numpy.core.defchararray.chararray.split",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray": [
        "numpy.ndarray"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.__lt__": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool": [
        "numpy.ma.masked.view",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.testing.assert_almost_equal",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.testing.tests.test_utils.TestApproxEqual.test_simple_arrays": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestApproxEqual.test_simple_items": [
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.testing.tests.test_utils.TestApproxEqual.test_nan_array": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestApproxEqual.test_nan_items": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_arrays": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAssertLess.test_rank2": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAssertLess.test_rank3": [
        "numpy.ones"
    ],
    "numpy.testing.tests.test_utils.TestArrayAssertLess.test_simple_items": [
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.testing.tests.test_utils.TestArrayAssertLess.test_nan_noncompare": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAssertLess.test_nan_noncompare_array": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAssertLess.test_inf_compare": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAssertLess.test_inf_compare_array": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestRaises.setup": [
        "numpy.testing.tests.test_utils.TestRaises.setup.MyException"
    ],
    "numpy.testing.tests.test_utils.TestRaises.test_correct_catch": [
        "numpy.testing.tests.test_utils.TestRaises.raises_exception",
        "numpy.testing.tests.test_utils.TestRaises.setup.MyException"
    ],
    "numpy.testing.tests.test_utils.TestRaises.test_wrong_exception": [
        "numpy.testing.tests.test_utils.TestRaises.raises_exception",
        "numpy.testing.tests.test_utils.TestRaises.setup.MyException"
    ],
    "numpy.testing.tests.test_utils.TestRaises.test_catch_no_raise": [
        "numpy.testing.tests.test_utils.TestRaises.setup.MyException",
        "numpy.testing.tests.test_utils.TestRaises.does_not_raise_exception"
    ],
    "numpy.testing.tests.test_utils.TestWarns.test_warn": [
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestWarns.test_context_manager": [
        "numpy.testing.tests.test_utils.TestWarns.test_context_manager.no_warnings",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning": [
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f"
    ],
    "numpy.testing.tests.test_utils.TestAssertAllclose.test_simple": [
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.testing.tests.test_utils.TestAssertAllclose.test_min_int": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.int_",
        "numpy.array",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.testing.tests.test_utils.TestAssertAllclose.test_report_fail_percentage": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestAssertAllclose.test_equal_nan": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestAssertAllclose.test_not_equal_nan": [
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestAssertAllclose.test_equal_nan_default": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_pass": [
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp",
        "numpy.float64"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float64_fail": [
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp",
        "numpy.float64"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_pass": [
        "numpy.float32",
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float32_fail": [
        "numpy.float32",
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_pass": [
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp",
        "numpy.float16"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_float16_fail": [
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp",
        "numpy.float16"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex128_pass": [
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp",
        "numpy.float64"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex128_fail": [
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp",
        "numpy.float64"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex64_pass": [
        "numpy.float32",
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp"
    ],
    "numpy.testing.tests.test_utils.TestArrayAlmostEqualNulp.test_complex64_fail": [
        "numpy.float32",
        "numpy.linspace",
        "numpy.testing.assert_array_almost_equal_nulp"
    ],
    "numpy.testing.tests.test_utils.TestULP.test_equal": [
        "numpy.random.randn",
        "numpy.matlib.randn"
    ],
    "numpy.testing.tests.test_utils.TestULP.test_single": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32"
    ],
    "numpy.testing.tests.test_utils.TestULP.test_double": [
        "numpy.lib.user_array.container.astype",
        "numpy.float64"
    ],
    "numpy.testing.tests.test_utils.TestULP.test_inf": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.float64",
        "numpy.array",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max"
    ],
    "numpy.testing.tests.test_utils.TestULP.test_nan": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.float64",
        "numpy.array",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max"
    ],
    "numpy.testing.tests.test_utils.TestStringEqual.test_simple": [
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.assert_warn_len_equal": [
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils._get_fresh_mod": [
        "clapack_scrub.LineQueue.clear"
    ],
    "numpy.testing.tests.test_utils.test_clear_and_catch_warnings": [
        "numpy.testing.tests.test_utils._get_fresh_mod",
        "numpy.testing.tests.test_utils.assert_warn_len_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.test_suppress_warnings_module": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing.assert_equal",
        "numpy.testing.tests.test_utils.assert_warn_len_equal",
        "numpy.testing.tests.test_utils._get_fresh_mod",
        "numpy.testing.tests.test_utils.test_suppress_warnings_module.warn_other_module"
    ],
    "numpy.testing.tests.test_utils.test_suppress_warnings_module.warn_other_module": [
        "numpy.testing.tests.test_utils.test_suppress_warnings_module.warn_other_module.warn",
        "numpy.apply_along_axis"
    ],
    "numpy.testing.tests.test_utils.test_suppress_warnings_type": [
        "numpy.testing.tests.test_utils._get_fresh_mod",
        "numpy.testing.tests.test_utils.assert_warn_len_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.test_suppress_warnings_decorate_no_record": [
        "numpy.testing.tests.test_utils.test_suppress_warnings_decorate_no_record.warn",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.test_suppress_warnings_record": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.test_suppress_warnings_forwarding.warn_other_module": [
        "numpy.testing.tests.test_utils.test_suppress_warnings_forwarding.warn_other_module.warn",
        "numpy.apply_along_axis"
    ],
    "numpy.testing.tests.test_utils.test_suppress_warnings_forwarding": [
        "numpy.testing.tests.test_utils.test_suppress_warnings_forwarding.warn_other_module",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.test_tempdir": [
        "numpy.testing.assert_",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.testing.tests.test_utils.test_temppath": [
        "numpy.testing.assert_",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.testing.tests.test_utils.test_clear_and_catch_warnings_inherit": [
        "numpy.testing.tests.test_utils._get_fresh_mod",
        "numpy.testing.tests.test_utils.my_cacw",
        "numpy.testing.assert_equal"
    ],
    "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_passes.no_cycle": [
        "npy_tempita.compat3.b",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_passes": [
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_passes.no_cycle"
    ],
    "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_asserts.make_cycle": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_asserts": [
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_asserts.make_cycle"
    ],
    "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__del__": [
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_asserts.make_cycle",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__"
    ],
    "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails": [
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_slow": [
        "numpy.testing.assert_"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_setastest": [
        "numpy.testing.assert_"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded.f1",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded.f2"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded.f1": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded.f2": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.skip_tester",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.f1",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.f2",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.f1": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.f2": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_hardcoded": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_hardcoded.g1",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_hardcoded.g2"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_hardcoded.g2": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable.skip_tester",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable.g1",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable.g2"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable.g2": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.DidntSkipException"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated.deprecated_func",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated.deprecated_func2",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated.deprecated_func3",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_deprecated.non_deprecated_func"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_parametrize": [
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_parametrize.check_parametrize",
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.core.defchararray.count",
        "numpy.ma.core.MaskedArray.count",
        "numpy.core.defchararray.chararray.count"
    ],
    "numpy.testing.tests.test_decorators.TestNoseDecorators.test_parametrize.check_parametrize": [
        "numpy.testing.assert_"
    ],
    "numpy.f2py.cb_rules.buildcallbacks": [
        "numpy.f2py.cb_rules.buildcallback"
    ],
    "numpy.f2py.cb_rules.buildcallback": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.auxfuncs.applyrules",
        "numpy.core.defchararray.replace",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.f2py.auxfuncs.getargs",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.isintent_out",
        "numpy.f2py.auxfuncs.isoptional",
        "numpy.f2py.auxfuncs.isrequired",
        "numpy.f2py.auxfuncs.issubroutine",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.f2py.auxfuncs.replace",
        "numpy.f2py.auxfuncs.stripcomma",
        "numpy.f2py.capi_maps.cb_sign2map",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.f2py.capi_maps.cb_routsign2map",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.f2py2e.scaninputline": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f2",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f2",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f2",
        "numpy.core.defchararray.join",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f2",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_hardcoded.f2",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_functions_callable.f2",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f2",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.f2py2e.callcrackfortran": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.f2py.crackfortran.crackfortran",
        "numpy.f2py.crackfortran.crack2fortran",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.f2py.crackfortran.outmess",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.f2py.f2py2e.buildmodules": [
        "numpy.core.defchararray.index",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.cb_rules.buildcallbacks",
        "numpy.core.defchararray.chararray.index",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.f2py.rules.buildmodule",
        "numpy.ma.append",
        "numpy.char.index",
        "npy_tempita._looper.loop_pos.index",
        "numpy.f2py.cfuncs.buildcfuncs",
        "numpy.append",
        "numpy.f2py.f2py2e.dict_append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.f2py2e.dict_append": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.f2py2e.run_main": [
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.f2py.f2py2e.scaninputline",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.f2py.f2py2e.callcrackfortran",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.f2py.f2py2e.buildmodules",
        "numpy.f2py.f2py2e.dict_append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.reset_global_f2py_vars",
        "numpy.f2py.crackfortran.outmess",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.f2py2e.filter_files": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.f2py2e.run_compile": [
        "numpy.distutils.fcompiler.load_all_fcompiler_classes",
        "numpy.distutils",
        "numpy.distutils.core",
        "numpy.distutils.core.setup",
        "npy_tempita._looper.loop_pos.index",
        "numpy.typeDict.values",
        "numpy.split",
        "numpy.f2py.crackfortran.outmess",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.f2py.f2py2e.filter_files",
        "numpy.lib._datasource._FileOpeners.keys",
        "numpy.sctypes.values",
        "numpy.core.defchararray.chararray.index",
        "numpy.sctypeDict.values",
        "numpy.core.defchararray.chararray.lower",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.function_base.append",
        "numpy.distutils.misc_util",
        "numpy.core.defchararray.index",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.lower",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.distutils.system_info",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.distutils.command.build_src",
        "numpy.char.index",
        "numpy.append",
        "numpy.distutils.system_info.get_info",
        "numpy.lib.shape_base.split",
        "numpy.ma.core.append",
        "numpy.distutils.misc_util.dict_append",
        "numpy.distutils.command.build_src.get_f2py_modulename"
    ],
    "numpy.f2py.f2py2e.main": [
        "numpy.f2py.f2py2e.run_main",
        "numpy.distutils.system_info",
        "numpy.f2py.f2py2e.run_compile",
        "numpy.distutils.system_info.show_all"
    ],
    "numpy.f2py.func2subr.var2fixfortran": [
        "numpy.f2py.auxfuncs.outmess"
    ],
    "numpy.f2py.func2subr.createfuncwrapper": [
        "numpy.core.defchararray.lstrip",
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.isintent_in",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.startswith",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.core.defchararray.chararray.lstrip",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.f2py.auxfuncs.getfortranname",
        "numpy.f2py.func2subr.var2fixfortran",
        "numpy.f2py.auxfuncs.isexternal",
        "numpy.f2py.auxfuncs.islogicalfunction",
        "numpy.f2py.auxfuncs.ismoduleroutine",
        "numpy.append",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.func2subr.createsubrwrapper": [
        "numpy.core.defchararray.lstrip",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.startswith",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.issubroutine",
        "numpy.core.defchararray.chararray.lstrip",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.f2py.auxfuncs.getfortranname",
        "numpy.f2py.func2subr.var2fixfortran",
        "numpy.f2py.auxfuncs.isexternal",
        "numpy.f2py.auxfuncs.ismoduleroutine",
        "numpy.append",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.func2subr.assubr": [
        "numpy.f2py.auxfuncs.isintent_out",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.ma.append",
        "numpy.f2py.auxfuncs.getfortranname",
        "numpy.f2py.auxfuncs.isfunction_wrap",
        "numpy.f2py.auxfuncs.issubroutine_wrap",
        "numpy.append",
        "numpy.f2py.func2subr.createfuncwrapper",
        "numpy.f2py.func2subr.createsubrwrapper",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.cfuncs.append_needs": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "*.cfuncs",
        "numpy.ma.append",
        "numpy.f2py.cfuncs.append_needs",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.cfuncs.get_needs": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.ma.append",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.rules.buildmodule": [
        "numpy.f2py.common_rules.buildhooks",
        "numpy.f2py.cfuncs.get_needs",
        "numpy.split",
        "numpy.lib._datasource.open",
        "numpy.lib._datasource._FileOpeners.keys",
        "numpy.f2py.rules.buildapi",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.f2py.auxfuncs.ismoduleroutine",
        "numpy.lib.function_base.append",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.replace",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.open",
        "numpy.f2py.auxfuncs.gentitle",
        "numpy.testing._private.noseclasses.NumpyDoctest.options",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing._private.noseclasses.Unplugger.options",
        "numpy.testing._private.noseclasses.KnownFailurePlugin.options",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.f2py.f90mod_rules.buildhooks",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.auxfuncs.applyrules",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.f2py.capi_maps.modsign2map",
        "numpy.f2py.auxfuncs.l_not",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.f2py.auxfuncs.replace",
        "*.cfuncs",
        "numpy.f2py.use_rules.buildusevars",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.rules.buildapi": [
        "numpy.f2py.auxfuncs.isintent_aux",
        "numpy.f2py.auxfuncs.isstringarray",
        "numpy.f2py.auxfuncs.applyrules",
        "numpy.core.defchararray.replace",
        "numpy.f2py.auxfuncs.debugcapi",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.f2py.capi_maps.sign2map",
        "numpy.f2py.capi_maps.routsign2map",
        "numpy.f2py.auxfuncs.isarray",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.isintent_hide",
        "numpy.f2py.auxfuncs.isoptional",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.f2py.auxfuncs.replace",
        "numpy.f2py.auxfuncs.stripcomma",
        "numpy.f2py.auxfuncs.getargs2",
        "numpy.core.defchararray.chararray.replace",
        "numpy.f2py.auxfuncs.ismoduleroutine",
        "numpy.f2py.func2subr.assubr"
    ],
    "numpy.f2py.compile": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.memmap.memmap.flush",
        "numpy.distutils.exec_command.exec_command",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.distutils.exec_command",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.distutils.command.config.GrabStdout.flush",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpy.f2py.capi_maps.getctype": [
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.compat._inspect.isfunction",
        "numpy.f2py.auxfuncs.issubroutine",
        "numpy.core.defchararray.lower",
        "numpy.f2py.auxfuncs.isexternal",
        "numpy.core.defchararray.chararray.lower"
    ],
    "numpy.f2py.capi_maps.getstrlength": [
        "numpy.f2py.auxfuncs.isintent_hide",
        "numpy.f2py.auxfuncs.isstringfunction",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.capi_maps.getstrlength"
    ],
    "numpy.f2py.capi_maps.getarrdims": [
        "numpy.core.defchararray.index",
        "numpy.f2py.capi_maps.getstrlength",
        "numpy.isscalar",
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.isintent_in",
        "numpy.core.defchararray.chararray.index",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.ma.append",
        "numpy.char.index",
        "numpy.core.numeric.isscalar",
        "npy_tempita._looper.loop_pos.index",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.capi_maps.getpydocsign": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.auxfuncs.hasinitvalue",
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.capi_maps.getstrlength",
        "numpy.compat._inspect.isfunction",
        "numpy.f2py.auxfuncs.isintent_in",
        "numpy.f2py.auxfuncs.isintent_inout",
        "numpy.f2py.auxfuncs.isintent_out",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.capi_maps.getpydocsign",
        "numpy.core.numeric.isscalar",
        "numpy.f2py.capi_maps.getinit",
        "numpy.f2py.auxfuncs.isexternal",
        "numpy.isscalar"
    ],
    "numpy.f2py.capi_maps.getarrdocsign": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.capi_maps.getctype",
        "numpy.core.numeric.isscalar",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.capi_maps.getstrlength",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.isscalar"
    ],
    "numpy.f2py.capi_maps.getinit": [
        "numpy.f2py.auxfuncs.hasinitvalue",
        "numpy.core.defchararray.replace",
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.iscomplexarray",
        "numpy.f2py.auxfuncs.iscomplex",
        "numpy.lib.type_check.real",
        "numpy.lib.type_check.imag",
        "numpy.real",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.split",
        "numpy.lib.type_check.iscomplex",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.imag"
    ],
    "numpy.f2py.capi_maps.sign2map": [
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.auxfuncs.hasinitvalue",
        "numpy.f2py.capi_maps.getstrlength",
        "numpy.f2py.auxfuncs.isintent_aux",
        "numpy.f2py.capi_maps.getarrdims",
        "numpy.f2py.auxfuncs.isintent_callback",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.f2py.capi_maps.getpydocsign",
        "numpy.f2py.auxfuncs.isstringarray",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.capi_maps.getinit",
        "numpy.f2py.auxfuncs.debugcapi",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.isscalar",
        "numpy.f2py.auxfuncs.hasnote",
        "numpy.f2py.auxfuncs.iscomplex",
        "numpy.f2py.auxfuncs.iscomplexarray",
        "numpy.f2py.auxfuncs.iscomplexfunction",
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.isintent_hide",
        "numpy.core.defchararray.split",
        "numpy.f2py.auxfuncs.isintent_inout",
        "numpy.f2py.auxfuncs.isintent_in",
        "numpy.lib.type_check.iscomplex",
        "numpy.f2py.auxfuncs.isintent_out",
        "numpy.f2py.auxfuncs.isoptional",
        "numpy.f2py.auxfuncs.isrequired",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.auxfuncs.l_and",
        "numpy.f2py.auxfuncs.l_not",
        "numpy.f2py.auxfuncs.isarray",
        "numpy.ma.append",
        "numpy.compat._inspect.isfunction",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.numeric.isscalar",
        "numpy.f2py.auxfuncs.isexternal",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.capi_maps.routsign2map": [
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.auxfuncs.hasresultnote",
        "numpy.f2py.capi_maps.getstrlength",
        "numpy.f2py.capi_maps.getpydocsign",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.auxfuncs.debugcapi",
        "numpy.f2py.auxfuncs.hasnote",
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.isstringfunction",
        "numpy.core.defchararray.upper",
        "numpy.f2py.auxfuncs.gentitle",
        "numpy.compat._inspect.isfunction",
        "numpy.f2py.auxfuncs.getcallstatement",
        "numpy.f2py.auxfuncs.getcallprotoargument",
        "numpy.f2py.auxfuncs.getfortranname",
        "numpy.f2py.auxfuncs.getusercode",
        "numpy.f2py.auxfuncs.getusercode1",
        "numpy.core.defchararray.chararray.upper",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.capi_maps.modsign2map": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.ismodule",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.upper",
        "numpy.f2py.auxfuncs.getusercode",
        "numpy.f2py.auxfuncs.getusercode1",
        "numpy.core.defchararray.chararray.upper",
        "numpy.core.defchararray.replace",
        "numpy.f2py.auxfuncs.getpymethoddef",
        "numpy.f2py.auxfuncs.getrestdoc",
        "numpy.f2py.auxfuncs.hasnote"
    ],
    "numpy.f2py.capi_maps.cb_sign2map": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.capi_maps.getpydocsign",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.f2py.capi_maps.getarrdims",
        "numpy.f2py.auxfuncs.hasnote"
    ],
    "numpy.f2py.capi_maps.cb_routsign2map": [
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.auxfuncs.iscomplexfunction",
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.capi_maps.getstrlength",
        "numpy.compat._inspect.isfunction",
        "numpy.f2py.auxfuncs.isintent_in",
        "numpy.f2py.auxfuncs.isintent_callback",
        "numpy.f2py.auxfuncs.isintent_inout",
        "numpy.f2py.auxfuncs.isoptional",
        "numpy.f2py.auxfuncs.isstringfunction",
        "numpy.f2py.capi_maps.getpydocsign",
        "numpy.f2py.auxfuncs.l_or",
        "numpy.core.defchararray.upper",
        "numpy.core.defchararray.lower",
        "numpy.core.defchararray.chararray.upper",
        "numpy.core.defchararray.chararray.lower",
        "numpy.f2py.auxfuncs.gentitle",
        "numpy.f2py.auxfuncs.hasnote"
    ],
    "numpy.f2py.capi_maps.common_sign2map": [
        "numpy.f2py.auxfuncs.isstringarray",
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.capi_maps.getpydocsign",
        "numpy.f2py.capi_maps.getarrdocsign",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.f2py.capi_maps.getstrlength",
        "numpy.f2py.capi_maps.getarrdims",
        "numpy.f2py.auxfuncs.hasnote"
    ],
    "numpy.f2py.f2py_testing.cmdline": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.outmess": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.f2py.crackfortran.is_free_format": [
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.chararray.strip"
    ],
    "numpy.f2py.crackfortran.readfortrancode": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.join",
        "numpy.f2py.crackfortran.is_free_format",
        "numpy.core.defchararray.chararray.replace",
        "numpy.f2py.crackfortran.readfortrancode",
        "numpy.f2py.crackfortran.split_by_unquoted",
        "numpy.f2py.crackfortran.outmess",
        "numpy.char.join"
    ],
    "numpy.f2py.crackfortran._simplifyargs": [
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.split",
        "numpy.f2py.auxfuncs.replace",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.crackline": [
        "numpy.core.defchararray.chararray.endswith",
        "numpy.ma.append",
        "numpy.f2py.crackfortran.split_by_unquoted",
        "numpy.f2py.crackfortran._simplifyargs",
        "numpy.f2py.crackfortran.crackline",
        "numpy.append",
        "numpy.f2py.crackfortran.markouterparen",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.f2py.crackfortran.analyzeline",
        "numpy.ma.core.append",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.f2py.crackfortran.markouterparen": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f"
    ],
    "numpy.f2py.crackfortran.markoutercomma": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.f2py.crackfortran.split_by_unquoted",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f"
    ],
    "numpy.f2py.crackfortran.unmarkouterparen": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.replace"
    ],
    "numpy.f2py.crackfortran.appenddecl": [
        "numpy.f2py.crackfortran.setkindselector",
        "numpy.f2py.crackfortran.setcharselector",
        "numpy.f2py.crackfortran.setattrspec"
    ],
    "numpy.f2py.crackfortran._resolvenameargspattern": [
        "numpy.f2py.crackfortran.markouterparen"
    ],
    "numpy.f2py.crackfortran.analyzeline": [
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "npy_tempita._looper.loop_pos.index",
        "numpy.f2py.crackfortran.appenddecl",
        "numpy.split",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.f2py.crackfortran.outmess",
        "numpy.f2py.crackfortran._resolvenameargspattern",
        "numpy.f2py.crackfortran.rmbadname1",
        "numpy.f2py.crackfortran.rmbadname",
        "numpy.f2py.crackfortran.appendmultiline",
        "numpy.lib._datasource._FileOpeners.keys",
        "numpy.f2py.crackfortran.cracktypespec0",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.chararray.find",
        "numpy.core.defchararray.chararray.index",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.core.defchararray.chararray.lower",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.lib.function_base.append",
        "numpy.core.defchararray.find",
        "numpy.core.defchararray.index",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.f2py.crackfortran.determineexprtype",
        "numpy.core.defchararray.lower",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.core.defchararray.replace",
        "numpy.core.defchararray.split",
        "numpy.f2py.crackfortran.get_parameters",
        "numpy.core.defchararray.strip",
        "numpy.f2py.crackfortran.cracktypespec",
        "numpy.f2py.crackfortran.updatevars",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.random.f",
        "numpy.f2py.auxfuncs.replace",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.char.index",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.appendmultiline": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.cracktypespec0": [
        "numpy.f2py.crackfortran.markouterparen",
        "numpy.f2py.crackfortran.unmarkouterparen",
        "numpy.core.defchararray.strip",
        "numpy.f2py.crackfortran.outmess",
        "numpy.core.defchararray.chararray.strip",
        "numpy.core.defchararray.lower",
        "numpy.core.defchararray.chararray.lower"
    ],
    "numpy.f2py.crackfortran.markinnerspaces": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f"
    ],
    "numpy.f2py.crackfortran.updatevars": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.f2py.crackfortran.cracktypespec",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.core.defchararray.lower",
        "numpy.core.defchararray.replace",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.lower",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.ma.copy",
        "numpy.append",
        "numpy.f2py.crackfortran.markouterparen",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.f2py.crackfortran.unmarkouterparen",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.f2py.crackfortran.rmbadname1",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "numpy.lib._datasource._FileOpeners.keys",
        "numpy.copy"
    ],
    "numpy.f2py.crackfortran.cracktypespec": [
        "numpy.f2py.crackfortran.outmess",
        "numpy.f2py.crackfortran.markoutercomma",
        "numpy.f2py.crackfortran.rmbadname1"
    ],
    "numpy.f2py.crackfortran.setattrspec": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.get_usedict": [
        "numpy.f2py.crackfortran.get_usedict"
    ],
    "numpy.f2py.crackfortran.get_useparameters": [
        "numpy.f2py.crackfortran.get_parameters",
        "numpy.f2py.crackfortran.get_usedict",
        "numpy.f2py.crackfortran.outmess",
        "numpy.core.defchararray.lower",
        "numpy.core.defchararray.chararray.lower"
    ],
    "numpy.f2py.crackfortran.postcrack2": [
        "numpy.f2py.crackfortran.setmesstext",
        "numpy.f2py.crackfortran.get_useparameters",
        "numpy.f2py.crackfortran.postcrack2",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.postcrack": [
        "numpy.f2py.crackfortran.analyzebody",
        "numpy.f2py.crackfortran.setmesstext",
        "numpy.f2py.crackfortran.analyzevars",
        "numpy.f2py.crackfortran.postcrack",
        "numpy.f2py.crackfortran.analyzeargs",
        "numpy.f2py.crackfortran.sortvarnames",
        "numpy.ma.append",
        "numpy.f2py.crackfortran.analyzecommon",
        "numpy.f2py.auxfuncs.isexternal",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.sortvarnames": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.analyzecommon": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.core.defchararray.strip",
        "numpy.ma.append",
        "numpy.f2py.auxfuncs.hascommon",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.rmbadname1",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.crackfortran.analyzebody": [
        "numpy.f2py.crackfortran.crack2fortrangen",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.crackfortran.setmesstext",
        "numpy.f2py.auxfuncs.replace",
        "numpy.f2py.crackfortran.postcrack",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.buildimplicitrules": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.crackfortran.setmesstext",
        "numpy.f2py.crackfortran.outmess",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.crackfortran.getlincoef": [
        "numpy.int",
        "numpy.f2py.crackfortran.myeval"
    ],
    "numpy.f2py.crackfortran.getarrlen": [
        "numpy.f2py.crackfortran.myeval",
        "numpy.f2py.crackfortran.getlincoef",
        "numpy.ma.append",
        "numpy.append",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran._get_depend_dict": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.f2py.crackfortran._get_depend_dict",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran._calc_depend_dict": [
        "numpy.f2py.crackfortran._get_depend_dict"
    ],
    "numpy.f2py.crackfortran.get_sorted_names": [
        "numpy.f2py.crackfortran._calc_depend_dict",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran._selected_real_kind_func": [
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.lower",
        "numpy.core.defchararray.chararray.lower"
    ],
    "numpy.f2py.crackfortran.get_parameters": [
        "numpy.f2py.auxfuncs.islogical",
        "numpy.core.defchararray.lower",
        "numpy.core.defchararray.replace",
        "numpy.f2py.crackfortran.get_sorted_names",
        "numpy.f2py.crackfortran._kind_func",
        "numpy.f2py.auxfuncs.iscomplex",
        "numpy.f2py.crackfortran._selected_int_kind_func",
        "numpy.f2py.crackfortran._selected_real_kind_func",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.split",
        "numpy.lib.type_check.iscomplex",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.lower",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.split",
        "numpy.append",
        "numpy.f2py.auxfuncs.isdouble",
        "numpy.int",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "clapack_scrub.replaceDlamch.repl",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran._eval_length": [
        "numpy.f2py.crackfortran._eval_scalar"
    ],
    "numpy.f2py.crackfortran.analyzevars": [
        "numpy.f2py.auxfuncs.isintent_aux",
        "numpy.f2py.auxfuncs.isintent_callback",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.f2py.crackfortran.buildimplicitrules",
        "numpy.f2py.crackfortran.cracktypespec",
        "numpy.f2py.auxfuncs.isstringarray",
        "numpy.f2py.crackfortran.getarrlen",
        "numpy.core.defchararray.lower",
        "numpy.f2py.crackfortran.setattrspec",
        "numpy.core.defchararray.replace",
        "numpy.isscalar",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.isintent_c",
        "numpy.core.defchararray.split",
        "numpy.f2py.auxfuncs.isintent_in",
        "numpy.f2py.crackfortran.get_parameters",
        "numpy.f2py.auxfuncs.isintent_inplace",
        "numpy.f2py.auxfuncs.isintent_inout",
        "numpy.f2py.crackfortran._eval_length",
        "numpy.f2py.crackfortran.setmesstext",
        "numpy.f2py.crackfortran._eval_scalar",
        "numpy.core.defchararray.strip",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.l_or",
        "numpy.f2py.crackfortran.get_useparameters",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.lower",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.numeric.isscalar",
        "numpy.core.defchararray.chararray.strip",
        "numpy.f2py.crackfortran.appenddecl",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.f2py.crackfortran.outmess",
        "numpy.f2py.crackfortran.rmbadname",
        "numpy.f2py.crackfortran.cracktypespec0"
    ],
    "numpy.f2py.crackfortran.expr2name": [
        "numpy.f2py.crackfortran.determineexprtype",
        "numpy.f2py.crackfortran.buildimplicitrules",
        "numpy.f2py.crackfortran.setattrspec"
    ],
    "numpy.f2py.crackfortran.analyzeargs": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.f2py.crackfortran.buildimplicitrules",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.f2py.crackfortran.setmesstext",
        "numpy.f2py.crackfortran.expr2name",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran._ensure_exprdict": [
        "numpy.int"
    ],
    "numpy.f2py.crackfortran.determineexprtype": [
        "numpy.f2py.crackfortran.determineexprtype",
        "numpy.f2py.crackfortran._ensure_exprdict",
        "numpy.f2py.crackfortran.outmess"
    ],
    "numpy.f2py.crackfortran.crack2fortrangen": [
        "numpy.f2py.auxfuncs.isintent_callback",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.f2py.crackfortran.crack2fortrangen",
        "numpy.f2py.crackfortran.common2fortran",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.crackfortran.use2fortran",
        "numpy.f2py.crackfortran.vars2fortran",
        "numpy.f2py.crackfortran.setmesstext",
        "numpy.f2py.crackfortran.expr2name",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.crackfortran.use2fortran": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.crackfortran.true_intent_list": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.vars2fortran": [
        "numpy.f2py.auxfuncs.isintent_callback",
        "numpy.f2py.crackfortran.true_intent_list",
        "numpy.lib.type_check.real",
        "numpy.lib.type_check.imag",
        "numpy.real",
        "numpy.f2py.auxfuncs.isoptional",
        "numpy.f2py.crackfortran.setmesstext",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "npy_tempita.attr",
        "numpy.imag",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.crackfortran.crackfortran": [
        "numpy.f2py.crackfortran.outmess",
        "numpy.f2py.crackfortran.readfortrancode",
        "numpy.f2py.crackfortran.postcrack2",
        "numpy.f2py.crackfortran.crackline",
        "numpy.f2py.crackfortran.postcrack"
    ],
    "numpy.f2py.crackfortran.crack2fortran": [
        "numpy.f2py.crackfortran.crack2fortrangen"
    ],
    "numpy.f2py.use_rules.buildusevars": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.f2py.use_rules.buildusevar",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.use_rules.buildusevar": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.auxfuncs.applyrules",
        "numpy.core.defchararray.replace",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.f2py.auxfuncs.hasnote",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.f2py.auxfuncs.replace",
        "numpy.f2py.auxfuncs.gentitle",
        "numpy.core.defchararray.chararray.replace",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.f90mod_rules.findf90modules": [
        "numpy.f2py.auxfuncs.hasbody",
        "numpy.f2py.auxfuncs.ismodule",
        "numpy.f2py.f90mod_rules.findf90modules"
    ],
    "numpy.f2py.f90mod_rules.buildhooks": [
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.f90mod_rules.buildhooks.fadd",
        "numpy.f2py.capi_maps.getarrdims",
        "numpy.f2py.f90mod_rules.buildhooks.dadd",
        "numpy.f2py.auxfuncs.isroutine",
        "numpy.f2py.f90mod_rules.buildhooks.cadd",
        "numpy.f2py.f90mod_rules.buildhooks.iadd",
        "numpy.f2py.auxfuncs.isstringarray",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.capi_maps.getarrdocsign",
        "numpy.f2py.rules.buildapi",
        "numpy.core.defchararray.replace",
        "numpy.f2py.auxfuncs.applyrules",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.f2py.auxfuncs.hasnote",
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.f2py.auxfuncs.isintent_hide",
        "numpy.f2py.capi_maps.modsign2map",
        "numpy.core.defchararray.strip",
        "numpy.f2py.auxfuncs.l_or",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.upper",
        "numpy.f2py.auxfuncs.isprivate",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.compat._inspect.isfunction",
        "numpy.f2py.auxfuncs.hasbody",
        "numpy.core.defchararray.chararray.strip",
        "numpy.core.defchararray.chararray.upper",
        "numpy.f2py.func2subr.createfuncwrapper",
        "numpy.append",
        "numpy.f2py.func2subr.createsubrwrapper",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.outmess",
        "numpy.f2py.crackfortran.undo_rmbadname1",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys",
        "numpy.f2py.crackfortran.undo_rmbadname",
        "numpy.f2py.auxfuncs.isallocatable",
        "numpy.f2py.f90mod_rules.findf90modules"
    ],
    "numpy.f2py.common_rules.findcommonblocks": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.ma.append",
        "numpy.f2py.common_rules.findcommonblocks",
        "numpy.f2py.auxfuncs.hasbody",
        "numpy.f2py.auxfuncs.hascommon",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.common_rules.buildhooks": [
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.capi_maps.getarrdims",
        "numpy.f2py.capi_maps.getarrdocsign",
        "numpy.f2py.auxfuncs.hasnote",
        "numpy.f2py.auxfuncs.isintent_hide",
        "numpy.core.defchararray.strip",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.ma.append",
        "numpy.f2py.common_rules.findcommonblocks",
        "numpy.f2py.common_rules.buildhooks.fadd",
        "numpy.f2py.common_rules.buildhooks.cadd",
        "numpy.f2py.common_rules.buildhooks.iadd",
        "numpy.core.defchararray.chararray.strip",
        "numpy.f2py.common_rules.buildhooks.dadd",
        "numpy.f2py.func2subr.var2fixfortran",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.f2py.crackfortran.rmbadname",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.diagnose.run": [
        "numpy.distutils",
        "numpy.f2py",
        "numpy.distutils.cpuinfo",
        "numpy"
    ],
    "numpy.f2py.setup.configuration": [
        "numpy.distutils.misc_util.Configuration.add_scripts",
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.f2py.setup.configuration.generate_f2py_py",
        "numpy.distutils.misc_util.Configuration.get_version",
        "numpy.distutils.misc_util.Configuration.make_svn_version_py",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.f2py.setup.configuration.generate_f2py_py": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.join",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open",
        "numpy.char.join",
        "numpy.f2py.setup._get_f2py_shebang"
    ],
    "numpy.f2py.auxfuncs.outmess": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.f2py.auxfuncs._isstring": [
        "numpy.f2py.auxfuncs.isexternal"
    ],
    "numpy.f2py.auxfuncs.isstring": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs._isstring"
    ],
    "numpy.f2py.auxfuncs.ischaracter": [
        "numpy.f2py.auxfuncs.isstring"
    ],
    "numpy.f2py.auxfuncs.isstringarray": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs._isstring"
    ],
    "numpy.f2py.auxfuncs.isarrayofstrings": [
        "numpy.f2py.auxfuncs.isstringarray"
    ],
    "numpy.f2py.auxfuncs.isarray": [
        "numpy.f2py.auxfuncs.isexternal"
    ],
    "numpy.f2py.auxfuncs.isscalar": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.isexternal",
        "numpy.f2py.auxfuncs.isstring"
    ],
    "numpy.f2py.auxfuncs.iscomplex": [
        "numpy.f2py.auxfuncs.isscalar"
    ],
    "numpy.f2py.auxfuncs.islogical": [
        "numpy.f2py.auxfuncs.isscalar"
    ],
    "numpy.f2py.auxfuncs.isinteger": [
        "numpy.f2py.auxfuncs.isscalar"
    ],
    "numpy.f2py.auxfuncs.isreal": [
        "numpy.f2py.auxfuncs.isscalar"
    ],
    "numpy.f2py.auxfuncs.islong_long": [
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.isunsigned_char": [
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.isunsigned_short": [
        "numpy.f2py.auxfuncs.get_kind",
        "numpy.f2py.auxfuncs.isscalar"
    ],
    "numpy.f2py.auxfuncs.isunsigned": [
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.isunsigned_long_long": [
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.isdouble": [
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.islong_double": [
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.islong_complex": [
        "numpy.f2py.auxfuncs.get_kind",
        "numpy.f2py.auxfuncs.iscomplex"
    ],
    "numpy.f2py.auxfuncs.iscomplexarray": [
        "numpy.f2py.auxfuncs.isarray"
    ],
    "numpy.f2py.auxfuncs.isint1array": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.isunsigned_chararray": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.isunsigned_shortarray": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.isunsignedarray": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.isunsigned_long_longarray": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.issigned_chararray": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.issigned_shortarray": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.issigned_array": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.issigned_long_longarray": [
        "numpy.f2py.auxfuncs.isarray",
        "numpy.f2py.auxfuncs.get_kind"
    ],
    "numpy.f2py.auxfuncs.ismutable": [
        "numpy.f2py.auxfuncs.isstring"
    ],
    "numpy.f2py.auxfuncs.isfunction_wrap": [
        "numpy.f2py.auxfuncs.isexternal",
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.isintent_c"
    ],
    "numpy.f2py.auxfuncs.issubroutine_wrap": [
        "numpy.f2py.auxfuncs.hasassumedshape",
        "numpy.f2py.auxfuncs.isintent_c",
        "numpy.f2py.auxfuncs.issubroutine"
    ],
    "numpy.f2py.auxfuncs.hasassumedshape": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.f2py.auxfuncs.isroutine": [
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.issubroutine"
    ],
    "numpy.f2py.auxfuncs.islogicalfunction": [
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.islogical"
    ],
    "numpy.f2py.auxfuncs.islong_longfunction": [
        "numpy.f2py.auxfuncs.islong_long",
        "numpy.f2py.auxfuncs.isfunction"
    ],
    "numpy.f2py.auxfuncs.islong_doublefunction": [
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.islong_double"
    ],
    "numpy.f2py.auxfuncs.iscomplexfunction": [
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.iscomplex"
    ],
    "numpy.f2py.auxfuncs.iscomplexfunction_warn": [
        "numpy.f2py.auxfuncs.outmess",
        "numpy.f2py.auxfuncs.iscomplexfunction"
    ],
    "numpy.f2py.auxfuncs.isstringfunction": [
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.isstring"
    ],
    "numpy.f2py.auxfuncs.isoptional": [
        "numpy.f2py.auxfuncs.isintent_nothide"
    ],
    "numpy.f2py.auxfuncs.isrequired": [
        "numpy.f2py.auxfuncs.isoptional",
        "numpy.f2py.auxfuncs.isintent_nothide"
    ],
    "numpy.f2py.auxfuncs.isintent_hide": [
        "numpy.f2py.auxfuncs.l_or",
        "numpy.f2py.auxfuncs.isintent_inout",
        "numpy.f2py.auxfuncs.isintent_inplace"
    ],
    "numpy.f2py.auxfuncs.isintent_nothide": [
        "numpy.f2py.auxfuncs.isintent_hide"
    ],
    "numpy.f2py.auxfuncs.hasinitvalueasstring": [
        "numpy.f2py.auxfuncs.hasinitvalue"
    ],
    "numpy.f2py.auxfuncs.hasresultnote": [
        "numpy.f2py.auxfuncs.isfunction",
        "numpy.f2py.auxfuncs.hasnote"
    ],
    "numpy.f2py.auxfuncs.containscommon": [
        "numpy.f2py.auxfuncs.hasbody",
        "numpy.f2py.auxfuncs.hascommon",
        "numpy.f2py.auxfuncs.containscommon"
    ],
    "numpy.f2py.auxfuncs.containsmodule": [
        "numpy.f2py.auxfuncs.hasbody",
        "numpy.f2py.auxfuncs.ismodule",
        "numpy.f2py.auxfuncs.containsmodule"
    ],
    "numpy.f2py.auxfuncs.hascallstatement": [
        "numpy.f2py.auxfuncs.getcallstatement"
    ],
    "numpy.f2py.auxfuncs.throw_error.__call__": [
        "numpy.f2py.auxfuncs.F2PYError"
    ],
    "numpy.f2py.auxfuncs.l_and": [
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.ma.append",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.append",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.auxfuncs.l_or": [
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.ma.append",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.append",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.auxfuncs.getfortranname": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.f2py.auxfuncs.getmultilineblock": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.f2py.auxfuncs.getcallstatement": [
        "numpy.f2py.auxfuncs.getmultilineblock"
    ],
    "numpy.f2py.auxfuncs.getcallprotoargument": [
        "numpy.f2py.capi_maps.getctype",
        "numpy.f2py.auxfuncs.isarrayofstrings",
        "numpy.f2py.auxfuncs.isintent_callback",
        "numpy.f2py.auxfuncs.iscomplex",
        "numpy.f2py.auxfuncs.isintent_c",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.f2py.auxfuncs.isstring",
        "numpy.f2py.auxfuncs.isstringfunction",
        "numpy.f2py.auxfuncs.l_and",
        "numpy.f2py.auxfuncs.l_not",
        "numpy.f2py.auxfuncs.l_or",
        "numpy.f2py.auxfuncs.outmess",
        "numpy.ma.append",
        "numpy.f2py.auxfuncs.hascallstatement",
        "numpy.f2py.auxfuncs.getmultilineblock",
        "numpy.f2py.auxfuncs.isfunction_wrap",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.auxfuncs.getusercode": [
        "numpy.f2py.auxfuncs.getmultilineblock"
    ],
    "numpy.f2py.auxfuncs.getusercode1": [
        "numpy.f2py.auxfuncs.getmultilineblock"
    ],
    "numpy.f2py.auxfuncs.getpymethoddef": [
        "numpy.f2py.auxfuncs.getmultilineblock"
    ],
    "numpy.f2py.auxfuncs.getargs": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.auxfuncs.getargs2": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.auxfuncs.getrestdoc": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.f2py.auxfuncs.replace": [
        "numpy.f2py.auxfuncs.flatlist"
    ],
    "numpy.f2py.auxfuncs.dictappend": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.auxfuncs.applyrules": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.f2py.auxfuncs.applyrules",
        "numpy.f2py.auxfuncs.dictappend",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.f2py.auxfuncs.replace",
        "numpy.ma.append",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.f2py.cfuncs.append_needs",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.f2py.tests.test_callback.TestF77Callback": [
        "numpy.testing._private.decorators.skipif",
        "numpy.testing._private.decorators.slow",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_callback.TestF77Callback.test_all": [
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function"
    ],
    "numpy.f2py.tests.test_callback.TestF77Callback.test_docstring": [
        "numpy.testing.assert_equal",
        "numpy.core.defchararray.lstrip",
        "numpy.core.defchararray.chararray.lstrip"
    ],
    "numpy.f2py.tests.test_callback.TestF77Callback.check_function": [
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.lib.mixins._unary_method.func",
        "numpy.testing.assert_",
        "numpy.lib.function_base.vectorize.__call__.func",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A.mth",
        "numpy.lib.mixins._binary_method.func",
        "numpy.lib.ufunclike._deprecate_out_named_y.func",
        "numpy.lib.mixins._reflected_binary_method.func",
        "numpy.lib.mixins._inplace_binary_method.func"
    ],
    "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback": [
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback.callback"
    ],
    "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback_array": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback_array.callback"
    ],
    "numpy.f2py.tests.test_callback.TestF77Callback.test_string_callback_array.callback": [
        "numpy.all"
    ],
    "numpy.f2py.tests.test_kind._path": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.f2py.tests.test_kind.TestKind": [
        "numpy.f2py.tests.test_kind._path",
        "numpy.testing._private.decorators.slow",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_kind.TestKind.test_all": [
        "numpy.testing.assert_",
        "numpy.f2py.crackfortran._selected_int_kind_func",
        "numpy.f2py.crackfortran._selected_real_kind_func"
    ],
    "numpy.f2py.tests.test_assumed_shape._path": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample": [
        "numpy.f2py.tests.test_assumed_shape._path",
        "numpy.testing._private.decorators.slow",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_assumed_shape.TestAssumedShapeSumExample.test_all": [
        "numpy.ndarray.sum",
        "numpy.testing.assert_",
        "numpy.sum",
        "numpy.ma.sum",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.f2py.tests.test_regression._path": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.f2py.tests.test_regression.TestIntentInOut": [
        "numpy.f2py.tests.test_regression._path",
        "numpy.testing._private.decorators.slow",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_regression.TestIntentInOut.test_inout": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo",
        "example.foo",
        "numpy.float32",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo",
        "numpy.arange",
        "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo",
        "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_common._path": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.f2py.tests.test_common.TestCommonBlock": [
        "numpy.testing._private.decorators.skipif",
        "numpy.f2py.tests.test_common._path",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_common.TestCommonBlock.test_common_block": [
        "numpy.int32",
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.ok",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.f2py.tests.util.get_module_dir": [
        "numpy.f2py.tests.util._cleanup",
        "numpy.lib.function_base.insert",
        "numpy.insert"
    ],
    "numpy.f2py.tests.util.get_temp_module_name": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.f2py.tests.util.get_module_dir",
        "numpy.char.join"
    ],
    "numpy.f2py.tests.util._memoize": [
        "numpy.f2py.tests.util._memoize.wrapper"
    ],
    "numpy.f2py.tests.util.build_module": [
        "numpy.f2py.tests.util.get_module_dir",
        "numpy.f2py.tests.util.get_temp_module_name",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.tests.util.build_code": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.f2py.tests.util.build_module",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.f2py.tests.util._get_compiler_status": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.int",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.f2py.tests.util.has_c_compiler": [
        "numpy.f2py.tests.util._get_compiler_status"
    ],
    "numpy.f2py.tests.util.has_f77_compiler": [
        "numpy.f2py.tests.util._get_compiler_status"
    ],
    "numpy.f2py.tests.util.has_f90_compiler": [
        "numpy.f2py.tests.util._get_compiler_status"
    ],
    "numpy.f2py.tests.util.build_module_distutils": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.f2py.tests.util.get_module_dir",
        "numpy.f2py.tests.util.get_temp_module_name",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.replace",
        "numpy.distutils.core",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.char.join",
        "numpy.ma.core.append",
        "numpy.distutils.misc_util"
    ],
    "numpy.f2py.tests.util.F2PyTest.setup": [
        "numpy.f2py.tests.util.build_module",
        "numpy.f2py.tests.util.build_code",
        "numpy.f2py.tests.util.has_c_compiler",
        "numpy.f2py.tests.util.has_f77_compiler",
        "numpy.f2py.tests.util.has_f90_compiler",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.ma.append",
        "numpy.testing._private.noseclasses.NumpyDoctest.options",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.testing._private.noseclasses.Unplugger.options",
        "numpy.testing._private.noseclasses.KnownFailurePlugin.options",
        "numpy.ma.core.append",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.f2py.tests.test_size._path": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.f2py.tests.test_size.TestSizeSumExample": [
        "numpy.f2py.tests.test_size._path",
        "numpy.testing._private.decorators.slow",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_size.TestSizeSumExample.test_all": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo",
        "example.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo",
        "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo",
        "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_size.TestSizeSumExample.test_transpose": [
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_size.TestSizeSumExample.test_flatten": [
        "numpy.matrixlib.defmatrix.matrix.flatten",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_semicolon_split.TestMultiline": [
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_semicolon_split.TestMultiline.test_multiline": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo",
        "example.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo",
        "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo",
        "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_semicolon_split.TestCallstatement": [
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_semicolon_split.TestCallstatement.test_callstatement": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo",
        "example.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo",
        "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo",
        "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_return_character.TestReturnCharacter": [
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_return_character.TestReturnCharacter.check_function": [
        "numpy.core.defchararray.split",
        "numpy.lib.shape_base.split",
        "numpy.testing.assert_",
        "numpy.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.array"
    ],
    "numpy.f2py.tests.test_return_character.TestF77ReturnCharacter": [
        "numpy.f2py.tests.test_return_character.TestReturnCharacter",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_character.TestF77ReturnCharacter.test_all": [
        "numpy.f2py.tests.test_return_character.TestReturnCharacter.check_function"
    ],
    "numpy.f2py.tests.test_return_character.TestF90ReturnCharacter": [
        "numpy.f2py.tests.test_return_character.TestReturnCharacter",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_character.TestF90ReturnCharacter.test_all": [
        "numpy.f2py.tests.test_return_character.TestReturnCharacter.check_function"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.setup_module": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.f2py.tests.util.has_c_compiler",
        "numpy.core.defchararray.chararray.join",
        "numpy.f2py.tests.util.build_module_distutils",
        "c_coverage_report.FunctionHtmlFormatter.wrap"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.flags_info": [
        "numpy.f2py.tests.test_array_from_pyobj.flags2names"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.flags2names": [
        "numpy.info",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.abs",
        "numpy.ma.append",
        "c_coverage_report.FunctionHtmlFormatter.wrap",
        "numpy.append",
        "numpy.lib.utils.info",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__": [
        "c_coverage_report.FunctionHtmlFormatter.wrap"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent_exact": [
        "numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Type.__new__": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.MaskedArray.__new__",
        "numpy.dtype",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.memmap.memmap.__new__",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.core.getlimits.finfo._init",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy._globals._NoValueType.__new__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type._init",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Type._init": [
        "c_coverage_report.FunctionHtmlFormatter.wrap",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Type.smaller_types": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Type.equal_types": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Type.larger_types": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Array.__init__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ndarray",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.arr_equal",
        "numpy.f2py.tests.test_array_from_pyobj.flags2names",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Array.arr_equal": [
        "numpy.alltrue"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory": [
        "numpy.ndarray"
    ],
    "numpy.f2py.tests.test_array_from_pyobj.TestIntent.test_in_out": [
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.is_intent_exact",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_from_2seq": [
        "numpy.ma.core.array",
        "numpy.testing.assert_",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_from_2casttype": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_inout_2seq": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.defchararray.startswith",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_f_inout_23seq": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.defchararray.startswith",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_c_inout_23seq": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_copy_from_2casttype": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_c_in_from_23seq": [
        "numpy.ma.core.array",
        "numpy.testing.assert_",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_from_23casttype": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_f_in_from_23casttype": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_c_in_from_23casttype": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_f_copy_in_from_23casttype": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_c_copy_in_from_23casttype": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_cache_from_2casttype": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.defchararray.startswith",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.f2py.tests.test_array_from_pyobj.Type.all_types"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_in_cache_from_2casttype_failure": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.defchararray.startswith",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.f2py.tests.test_array_from_pyobj.Type.all_types"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_cache_hidden": [
        "numpy.rec.array",
        "numpy.core.fromnumeric.shape",
        "numpy.core.records.array",
        "numpy.testing.assert_",
        "numpy.char.array",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.array",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.array",
        "numpy.ma.core.shape"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_hidden": [
        "numpy.rec.array",
        "numpy.core.fromnumeric.shape",
        "numpy.core.records.array",
        "numpy.testing.assert_",
        "numpy.zeros",
        "numpy.char.array",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.array",
        "numpy.f2py.tests.test_array_from_pyobj.Array.arr_equal",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.array",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_optional_none": [
        "numpy.rec.array",
        "numpy.core.fromnumeric.shape",
        "numpy.core.records.array",
        "numpy.testing.assert_",
        "numpy.zeros",
        "numpy.char.array",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.array",
        "numpy.f2py.tests.test_array_from_pyobj.Array.arr_equal",
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.defchararray.array",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_optional_from_2seq": [
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.core.fromnumeric.shape",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.ma.core.shape"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_optional_from_23seq": [
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.core.fromnumeric.shape",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Array.has_shared_memory",
        "numpy.ma.core.shape"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_inplace": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.f2py.tests.test_array_from_pyobj._test_shared_memory.test_inplace_from_casttype": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.f2py.tests.test_array_from_pyobj.Type.cast_types"
    ],
    "numpy.f2py.tests.test_return_logical.TestReturnLogical": [
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_return_logical.TestReturnLogical.check_function": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.f2py.tests.test_return_logical.TestF77ReturnLogical": [
        "numpy.f2py.tests.test_return_logical.TestReturnLogical",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_logical.TestF77ReturnLogical.test_all": [
        "numpy.f2py.tests.test_return_logical.TestReturnLogical.check_function"
    ],
    "numpy.f2py.tests.test_return_logical.TestF90ReturnLogical": [
        "numpy.f2py.tests.test_return_logical.TestReturnLogical",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_logical.TestF90ReturnLogical.test_all": [
        "numpy.f2py.tests.test_return_logical.TestReturnLogical.check_function"
    ],
    "numpy.f2py.tests.test_quoted_character.TestQuotedCharacter": [
        "numpy.testing._private.decorators.skipif",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_quoted_character.TestQuotedCharacter.test_quoted_character": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo",
        "example.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo",
        "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo",
        "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_string._path": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.f2py.tests.test_string.TestString": [
        "numpy.f2py.tests.test_string._path",
        "numpy.testing._private.decorators.slow",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_string.TestString.test_char": [
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.shape",
        "numpy.copy",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.shape",
        "numpy.lib.function_base.copy",
        "numpy.lib.user_array.container.copy"
    ],
    "numpy.f2py.tests.test_mixed._path": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.f2py.tests.test_mixed.TestMixed": [
        "numpy.f2py.tests.test_mixed._path",
        "numpy.testing._private.decorators.slow",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_mixed.TestMixed.test_all": [
        "numpy.testing.assert_"
    ],
    "numpy.f2py.tests.test_mixed.TestMixed.test_docstring": [
        "numpy.testing.assert_equal",
        "numpy.core.defchararray.lstrip",
        "numpy.core.defchararray.chararray.lstrip"
    ],
    "numpy.f2py.tests.test_return_real.TestReturnReal": [
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_return_real.TestReturnReal.check_function": [
        "numpy.core.defchararray.split",
        "numpy.abs",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err"
    ],
    "numpy.f2py.tests.test_return_real.TestCReturnReal": [
        "numpy.f2py.tests.test_return_real.TestReturnReal",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_real.TestCReturnReal.test_all": [
        "numpy.f2py.tests.test_return_real.TestReturnReal.check_function"
    ],
    "numpy.f2py.tests.test_return_real.TestF77ReturnReal": [
        "numpy.f2py.tests.test_return_real.TestReturnReal",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_real.TestF77ReturnReal.test_all": [
        "numpy.f2py.tests.test_return_real.TestReturnReal.check_function"
    ],
    "numpy.f2py.tests.test_return_real.TestF90ReturnReal": [
        "numpy.f2py.tests.test_return_real.TestReturnReal",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_real.TestF90ReturnReal.test_all": [
        "numpy.f2py.tests.test_return_real.TestReturnReal.check_function"
    ],
    "numpy.f2py.tests.test_return_complex.TestReturnComplex": [
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_return_complex.TestReturnComplex.check_function": [
        "numpy.core.defchararray.split",
        "numpy.abs",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err"
    ],
    "numpy.f2py.tests.test_return_complex.TestF77ReturnComplex": [
        "numpy.f2py.tests.test_return_complex.TestReturnComplex",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_complex.TestF77ReturnComplex.test_all": [
        "numpy.f2py.tests.test_return_complex.TestReturnComplex.check_function"
    ],
    "numpy.f2py.tests.test_return_complex.TestF90ReturnComplex": [
        "numpy.f2py.tests.test_return_complex.TestReturnComplex",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_complex.TestF90ReturnComplex.test_all": [
        "numpy.f2py.tests.test_return_complex.TestReturnComplex.check_function"
    ],
    "numpy.f2py.tests.test_return_integer.TestReturnInteger": [
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_return_integer.TestReturnInteger.check_function": [
        "numpy.core.defchararray.split",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split"
    ],
    "numpy.f2py.tests.test_return_integer.TestF77ReturnInteger": [
        "numpy.f2py.tests.test_return_integer.TestReturnInteger",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_integer.TestF77ReturnInteger.test_all": [
        "numpy.f2py.tests.test_return_integer.TestReturnInteger.check_function"
    ],
    "numpy.f2py.tests.test_return_integer.TestF90ReturnInteger": [
        "numpy.f2py.tests.test_return_integer.TestReturnInteger",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.f2py.tests.test_return_integer.TestF90ReturnInteger.test_all": [
        "numpy.f2py.tests.test_return_integer.TestReturnInteger.check_function"
    ],
    "numpy.f2py.tests.test_parameter._path": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters": [
        "numpy.f2py.tests.test_parameter._path",
        "numpy.testing._private.decorators.slow",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_real_single": [
        "numpy.float32",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_real_double": [
        "numpy.arange",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_compound_int": [
        "numpy.int32",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_non_compound_int": [
        "numpy.testing.assert_equal",
        "numpy.int32",
        "numpy.arange"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_integer_int": [
        "numpy.int32",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_integer_long": [
        "numpy.int64",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_both": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo",
        "example.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo",
        "numpy.arange",
        "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo",
        "numpy.float64",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo",
        "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_no": [
        "numpy.arange",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_parameter.TestParameters.test_constant_sum": [
        "numpy.arange",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.f2py.tests.test_block_docstring.TestBlockDocString": [
        "numpy.testing._private.decorators.skipif",
        "numpy.f2py.tests.util.F2PyTest"
    ],
    "numpy.f2py.tests.test_block_docstring.TestBlockDocString.test_block_docstring": [
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.defmatrix._convert_from_string": [
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.core.defchararray.chararray.count",
        "numpy.ma.append",
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.core.defchararray.count",
        "numpy.ma.core.append",
        "numpy.ma.core.MaskedArray.count"
    ],
    "numpy.matrixlib.defmatrix.asmatrix": [
        "numpy.matrixlib.defmatrix.matrix"
    ],
    "numpy.matrixlib.defmatrix.matrix": [
        "numpy.matrixlib.defmatrix.matrix.getI",
        "numpy.matrixlib.defmatrix.matrix.getT",
        "numpy.matrixlib.defmatrix.matrix.getA",
        "numpy.matrixlib.defmatrix.matrix.getA1",
        "numpy.matrixlib.defmatrix.matrix.getH"
    ],
    "numpy.matrixlib.defmatrix.matrix.__new__": [
        "fortran",
        "numpy.matrixlib.defmatrix._convert_from_string",
        "numpy.lib.polynomial.poly1d.order"
    ],
    "numpy.matrixlib.defmatrix.matrix.__array_finalize__": [
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.matrixlib.defmatrix.matrix.__getitem__": [
        "numpy.core.numeric.isscalar"
    ],
    "numpy.matrixlib.defmatrix.matrix.__mul__": [
        "numpy.matrixlib.defmatrix.asmatrix",
        "numpy.core.numeric.isscalar"
    ],
    "numpy.matrixlib.defmatrix.matrix._align": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.core.fromnumeric.transpose"
    ],
    "numpy.matrixlib.defmatrix.matrix.tolist": [
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.mrecords.MaskedRecords.tolist"
    ],
    "numpy.matrixlib.defmatrix.matrix.sum": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.mean": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.std": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.var": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.prod": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.any": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.all": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.max": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.argmax": [
        "numpy.matrixlib.defmatrix.matrix._align"
    ],
    "numpy.matrixlib.defmatrix.matrix.min": [
        "numpy.matrixlib.defmatrix.matrix._collapse"
    ],
    "numpy.matrixlib.defmatrix.matrix.argmin": [
        "numpy.matrixlib.defmatrix.matrix._align"
    ],
    "numpy.matrixlib.defmatrix.matrix.ptp": [
        "numpy.matrixlib.defmatrix.matrix._align"
    ],
    "numpy.matrixlib.defmatrix.matrix.getI": [
        "numpy.matrixlib.defmatrix.asmatrix",
        "numpy.dual"
    ],
    "numpy.matrixlib.defmatrix.matrix.getA": [
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.lib.polynomial.poly1d.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__",
        "numpy.lib.user_array.container.__array__",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__"
    ],
    "numpy.matrixlib.defmatrix.matrix.getA1": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel"
    ],
    "numpy.matrixlib.defmatrix.matrix.getT": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.core.fromnumeric.transpose"
    ],
    "numpy.matrixlib.defmatrix.matrix.getH": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo.conjugate",
        "numpy.conjugate",
        "numpy.core.fromnumeric.transpose"
    ],
    "numpy.matrixlib.defmatrix._from_string": [
        "numpy.core.defchararray.strip",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.matrixlib.defmatrix.bmat": [
        "numpy.matrixlib.defmatrix.matrix",
        "numpy.ma.append",
        "numpy.matrixlib.defmatrix._from_string",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.matrixlib.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.matrixlib.tests.test_multiarray.TestView.test_type": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_multiarray.TestView.test_keywords": [
        "numpy.int8",
        "numpy.matrix",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestCtor.test_basic": [
        "numpy.bmat",
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestCtor.test_exceptions": [
        "numpy.matrix"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestCtor.test_bmat_nondefault_str": [
        "numpy.bmat",
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_sum": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.sum"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_prod": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.prod",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_max": [
        "numpy.matrix",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_min": [
        "numpy.matrix",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_ptp": [
        "numpy.core.fromnumeric.ptp",
        "numpy.ptp",
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.ma.core.MaskedArray.ptp",
        "numpy.array",
        "numpy.ma.core.ptp",
        "numpy.core.fromnumeric.reshape",
        "numpy.all",
        "numpy.matrixlib.defmatrix.matrix.ptp",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_var": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.matrix",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.matrixlib.defmatrix.matrix.var",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.fromnumeric.var",
        "numpy.ma.core.reshape",
        "numpy.ma.core.MaskedArray.var",
        "numpy.var",
        "numpy.reshape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_basic": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.linalg.inv",
        "numpy.transpose",
        "numpy.allclose",
        "numpy.conj",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_pinv": [
        "numpy.matrix",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_almost_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_comparisons": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.any",
        "numpy.core.fromnumeric.reshape",
        "numpy.all",
        "numpy.abs",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_asmatrix": [
        "numpy.asmatrix",
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_noaxis": [
        "numpy.matrix",
        "numpy.testing.assert_"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_repr": [
        "numpy.matrix",
        "numpy.testing.assert_"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestProperties.test_make_bool_matrix_from_str": [
        "numpy.matrix",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestCasting.test_basic": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.complex128",
        "numpy.ones",
        "numpy.core.fromnumeric.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.float64",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_basic": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.identity",
        "numpy.linalg.inv",
        "numpy.allclose",
        "numpy.dot",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_pow": [
        "numpy.matrix",
        "numpy.dot",
        "numpy.eye"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_scalar_type_pow": [
        "numpy.int8",
        "numpy.matrix",
        "numpy.uint8"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestAlgebra.test_notimplemented": [
        "numpy.matrix",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestMatrixReturn.test_instance_methods": [
        "numpy.ndarray",
        "numpy.core.defchararray.startswith",
        "numpy.nonzero",
        "numpy.ma.nonzero",
        "numpy.core.fromnumeric.nonzero",
        "numpy.array",
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.ma.core.MaskedArray.nonzero"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestIndexing.test_basic": [
        "numpy.zeros",
        "numpy.asmatrix",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing": [
        "numpy.matrix"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_dimesions": [
        "numpy.matrix",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_from_matrix_list": [
        "numpy.testing.assert_equal",
        "numpy.matrix",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_array_to_list": [
        "numpy.matrix",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_fancy_indexing": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_matrix_element": [
        "numpy.matrix",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_scalar_indexing": [
        "numpy.zeros",
        "numpy.asmatrix",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_row_column_indexing": [
        "numpy.asmatrix",
        "numpy.eye",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_boolean_indexing": [
        "numpy.asmatrix",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestNewScalarIndexing.test_list_indexing": [
        "numpy.asmatrix",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestPower.test_returntype": [
        "numpy.matrix",
        "numpy.ndarray",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestPower.test_list": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape": [
        "numpy.matrix",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape.test_shape": [
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape.test_numpy_ravel": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape.test_member_ravel": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape.test_member_flatten": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape.test_numpy_ravel_order": [
        "numpy.matrix",
        "numpy.ravel",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape.test_matrix_ravel_order": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape.test_array_memory_sharing": [
        "numpy.testing.assert_",
        "numpy.may_share_memory",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_defmatrix.TestShape.test_matrix_memory_sharing": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.may_share_memory"
    ],
    "numpy.matrixlib.tests.test_regression.TestRegression.test_kron_matrix": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "numpy.kron"
    ],
    "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_properties": [
        "numpy.matrix",
        "numpy.ndarray",
        "numpy.testing.assert_",
        "numpy.nonzero",
        "numpy.ma.nonzero",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.core.fromnumeric.nonzero"
    ],
    "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector.mul": [
        "numpy.ones",
        "numpy.mat",
        "numpy.eye"
    ],
    "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector": [
        "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_multiply_by_1d_vector.mul"
    ],
    "numpy.matrixlib.tests.test_regression.TestRegression.test_matrix_std_argmax": [
        "numpy.random.uniform",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.asmatrix",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.matrixlib.tests.test_numeric.TestDot.test_matscalar": [
        "numpy.matrix",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_numeric.test_diagonal": [
        "numpy.matrix",
        "numpy.diag",
        "numpy.diagonal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_interaction.test_fancy_indexing": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "numpy.asmatrix",
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.matrixlib.tests.test_interaction.test_polynomial_mapdomain": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.polynomial.polyutils.mapdomain"
    ],
    "numpy.matrixlib.tests.test_interaction.test_sort_matrix_none": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.sort"
    ],
    "numpy.matrixlib.tests.test_interaction.test_partition_matrix_none": [
        "numpy.matrix",
        "numpy.partition",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_"
    ],
    "numpy.matrixlib.tests.test_interaction.test_dot_scalar_and_matrix_of_objects": [
        "numpy.matrix",
        "numpy.dot",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_interaction.test_inner_scalar_and_matrix": [
        "numpy.matrix",
        "numpy.inner",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_interaction.test_inner_scalar_and_matrix_of_objects": [
        "numpy.matrix",
        "numpy.inner",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_interaction.test_iter_allocate_output_subtype": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ndarray",
        "numpy.shape",
        "numpy.matrix",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.matrixlib.tests.test_interaction.like_function": [
        "numpy.matrix",
        "numpy.ones_like",
        "numpy.zeros_like",
        "numpy.testing.assert_",
        "numpy.empty_like"
    ],
    "numpy.matrixlib.tests.test_interaction.test_array_astype": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_"
    ],
    "numpy.matrixlib.tests.test_interaction.test_stack": [
        "numpy.stack",
        "numpy.matrix"
    ],
    "numpy.matrixlib.tests.test_interaction.test_object_scalar_multiply": [
        "numpy.matrix",
        "numpy.multiply",
        "numpy.testing.assert_equal"
    ],
    "numpy.matrixlib.tests.test_interaction.test_nanfunctions_matrices": [
        "numpy.nanmax",
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.isnan",
        "numpy.any",
        "numpy.isscalar",
        "numpy.nanmin",
        "numpy.eye"
    ],
    "numpy.matrixlib.tests.test_interaction.test_nanfunctions_matrices_general": [
        "numpy.nancumprod",
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.nansum",
        "numpy.nanprod",
        "numpy.nanmean",
        "numpy.nanargmax",
        "numpy.isscalar",
        "numpy.eye",
        "numpy.nanvar",
        "numpy.nanstd",
        "numpy.nanargmin",
        "numpy.nancumsum"
    ],
    "numpy.matrixlib.tests.test_interaction.test_average_matrix": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.random.rand",
        "numpy.average",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand"
    ],
    "numpy.matrixlib.tests.test_interaction.test_trapz_matrix": [
        "numpy.linspace",
        "numpy.trapz",
        "numpy.matrix",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.matrixlib.tests.test_interaction.test_ediff1d_matrix": [
        "numpy.ediff1d",
        "numpy.matrix"
    ],
    "numpy.matrixlib.tests.test_interaction.test_apply_along_axis_matrix": [
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.matrixlib.tests.test_interaction.test_apply_along_axis_matrix.double",
        "numpy.apply_along_axis"
    ],
    "numpy.matrixlib.tests.test_interaction.test_kron_matrix": [
        "numpy.matrix",
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.asmatrix",
        "numpy.kron",
        "numpy.ones"
    ],
    "numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "npy_tempita.compat3.b",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix_scalar": [
        "numpy.matrix",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_interaction.TestConcatenatorMatrix.test_matrix_builder": [
        "numpy.testing.assert_equal",
        "numpy.bmat",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_interaction.test_array_equal_error_message_matrix": [
        "numpy.matrix",
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.testing.assert_equal",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.replace",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_interaction.test_array_almost_equal_matrix": [
        "numpy.matrix",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.MMatrix": [
        "numpy.ma.core.MaskedArray",
        "numpy.matrix",
        "numpy.matrixlib.tests.test_masked_matrix.MMatrix._get_series"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.MMatrix.__new__": [
        "numpy.ma.core.MaskedArray.__new__",
        "numpy.matrix"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.MMatrix.__array_finalize__": [
        "numpy.ma.core.MaskedArray.__array_finalize__"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.MMatrix._get_series": [
        "numpy.ma.core.MaskedArray",
        "numpy.ma.core.MaskedArray.view"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_matrix_indexing": [
        "numpy.matrix",
        "numpy.ma.core.masked_values",
        "numpy.arange",
        "numpy.ma.core.getmask",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.allequal",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_pickling_subbaseclass": [
        "numpy.matrix",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_count_mean_with_matrix": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.testutils.assert_equal",
        "numpy.matrix",
        "numpy.zeros",
        "numpy.ma.core.shape"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_flat": [
        "numpy.matrix",
        "numpy.ma.testutils.assert_equal",
        "numpy.all",
        "numpy.eye",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_allany_onmatrices": [
        "numpy.matrix",
        "numpy.bool_",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_compressed": [
        "numpy.matrix",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_ravel": [
        "numpy.matrix",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestMaskedMatrix.test_view": [
        "numpy.matrix",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.core.MaskedArray",
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.setup": [
        "numpy.matrixlib.tests.test_masked_matrix.MMatrix",
        "numpy.arange"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_maskedarray_subclassing": [
        "numpy.matrix",
        "numpy.matrixlib.tests.test_masked_matrix.MMatrix"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_unary_operations": [
        "numpy.errstate",
        "numpy.log",
        "numpy.ma.testutils.assert_equal",
        "numpy.matrixlib.tests.test_masked_matrix.MMatrix"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations": [
        "numpy.matrix",
        "numpy.matrixlib.tests.test_masked_matrix.MMatrix",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestSubclassing.test_masked_binary_operations2": [
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.lib.polynomial.poly1d.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.matrixlib.tests.test_masked_matrix.MMatrix",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__",
        "numpy.lib.user_array.container.__array__",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestConcatenator.test_matrix_builder": [
        "numpy.ma.core.MAError"
    ],
    "numpy.matrixlib.tests.test_masked_matrix.TestConcatenator.test_matrix": [
        "numpy.ma.core.array",
        "numpy.ma.testutils.assert_array_equal",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase",
        "numpy.linalg.tests.test_linalg.apply_tag"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestSolveMatrix": [
        "numpy.linalg.tests.test_linalg.SolveCases",
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestInvMatrix": [
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase",
        "numpy.linalg.tests.test_linalg.InvCases"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestEigvalsMatrix": [
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase",
        "numpy.linalg.tests.test_linalg.EigvalsCases"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestEigMatrix": [
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase",
        "numpy.linalg.tests.test_linalg.EigCases"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestSVDMatrix": [
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase",
        "numpy.linalg.tests.test_linalg.SVDCases"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestCondMatrix": [
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase",
        "numpy.linalg.tests.test_linalg.CondCases"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestPinvMatrix": [
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase",
        "numpy.linalg.tests.test_linalg.PinvCases"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestDetMatrix": [
        "numpy.linalg.tests.test_linalg.DetCases",
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestLstsqMatrix": [
        "numpy.matrixlib.tests.test_matrix_linalg.MatrixTestCase",
        "numpy.linalg.tests.test_linalg.LstsqCases"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix": [
        "numpy.linalg.tests.test_linalg._TestNorm2D",
        "numpy.matrix"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestNormDoubleMatrix": [
        "numpy.linalg.tests.test_linalg._TestNormDoubleBase",
        "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestNormSingleMatrix": [
        "numpy.linalg.tests.test_linalg._TestNormSingleBase",
        "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestNormInt64Matrix": [
        "numpy.linalg.tests.test_linalg._TestNormInt64Base",
        "numpy.matrixlib.tests.test_matrix_linalg._TestNorm2DMatrix"
    ],
    "numpy.matrixlib.tests.test_matrix_linalg.TestQRMatrix": [
        "numpy.linalg.tests.test_linalg.TestQR",
        "numpy.matrix"
    ],
    "numpy._build_utils.apple_accelerate.get_sgemv_fix": [
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.polynomial.hermite.poly2herm": [
        "numpy.polynomial.hermite.hermmulx",
        "numpy.polynomial.hermite.hermadd",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.hermite.herm2poly": [
        "numpy.lib.polynomial.polyadd",
        "numpy.lib.polynomial.polysub",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.hermite.hermline": [
        "numpy.array"
    ],
    "numpy.polynomial.hermite.hermfromroots": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.divmod",
        "numpy.sort",
        "numpy.polynomial.hermite.hermmul",
        "numpy.ones",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.hermite.hermadd": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.hermite.hermsub": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.hermite.hermmulx": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.empty"
    ],
    "numpy.polynomial.hermite.hermmul": [
        "numpy.polynomial.hermite.hermsub",
        "numpy.polynomial.hermite.hermmulx",
        "numpy.polynomial.hermite.hermadd",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.hermite.hermdiv": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.hermite.hermmul",
        "numpy.empty"
    ],
    "numpy.polynomial.hermite.hermpow": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.hermite.hermmul",
        "numpy.int"
    ],
    "numpy.polynomial.hermite.hermder": [
        "numpy.double",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.hermite.hermint": [
        "numpy.double",
        "numpy.iterable",
        "numpy.empty",
        "numpy.all",
        "numpy.ndim",
        "numpy.moveaxis",
        "numpy.array",
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.hermite.hermval": [
        "numpy.double",
        "numpy.ndarray",
        "numpy.asarray",
        "numpy.array"
    ],
    "numpy.polynomial.hermite.hermval2d": [
        "numpy.array",
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.hermite.hermgrid2d": [
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.hermite.hermval3d": [
        "numpy.array",
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.hermite.hermgrid3d": [
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.hermite.hermvander": [
        "numpy.int",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.hermite.hermvander2d": [
        "numpy.array",
        "numpy.polynomial.hermite.hermvander"
    ],
    "numpy.polynomial.hermite.hermvander3d": [
        "numpy.array",
        "numpy.polynomial.hermite.hermvander"
    ],
    "numpy.polynomial.hermite.hermfit": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.zeros",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.sort",
        "numpy.ma.sum",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.lib.polynomial.RankWarning",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.polynomial.polyutils.RankWarning",
        "numpy.dtype",
        "numpy.linalg.lstsq",
        "numpy.core.fromnumeric.ndim",
        "numpy.polynomial.hermite.hermvander",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.polynomial.hermite.hermcompanion": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.multiply.accumulate",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.add.accumulate",
        "numpy.array",
        "numpy.ma.core._MaskedBinaryOperation.accumulate",
        "numpy.hstack",
        "numpy.sqrt",
        "numpy.zeros",
        "numpy.subtract.accumulate",
        "numpy.divide.accumulate"
    ],
    "numpy.polynomial.hermite.hermroots": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.hermite.hermcompanion"
    ],
    "numpy.polynomial.hermite._normed_hermite_n": [
        "numpy.sqrt",
        "numpy.ones"
    ],
    "numpy.polynomial.hermite.hermgauss": [
        "numpy.ndarray.sum",
        "numpy.int",
        "numpy.polynomial.hermite._normed_hermite_n",
        "numpy.linalg.eigvalsh",
        "numpy.sqrt",
        "numpy.ma.core.MaskedArray.max",
        "numpy.sum",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.sum",
        "numpy.core.getlimits.iinfo.max",
        "numpy.polynomial.hermite.hermcompanion",
        "numpy.max",
        "numpy.float64",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum",
        "numpy.array"
    ],
    "numpy.polynomial.hermite.hermweight": [
        "numpy.exp"
    ],
    "numpy.polynomial.hermite.Hermite": [
        "numpy.polynomial.hermite.hermsub",
        "numpy.polynomial.hermite.hermfromroots",
        "numpy.polynomial.hermite.hermmul",
        "numpy.array",
        "numpy.polynomial.hermite.hermder",
        "numpy.polynomial.hermite.hermline",
        "numpy.polynomial.hermite.hermint",
        "numpy.polynomial.hermite.hermroots",
        "numpy.polynomial.hermite.hermval",
        "numpy.polynomial.hermite.hermadd",
        "numpy.polynomial.hermite.hermfit",
        "numpy.polynomial.hermite.hermdiv",
        "numpy.polynomial._polybase.ABCPolyBase",
        "numpy.polynomial.hermite.hermpow"
    ],
    "numpy.polynomial.chebyshev._cseries_to_zseries": [
        "numpy.zeros"
    ],
    "numpy.polynomial.chebyshev._zseries_to_cseries": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.polynomial.chebyshev._zseries_mul": [
        "numpy.convolve"
    ],
    "numpy.polynomial.chebyshev._zseries_div": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.empty",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.polynomial.chebyshev._zseries_der": [
        "numpy.arange",
        "numpy.polynomial.chebyshev._zseries_div",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev._zseries_int": [
        "numpy.arange",
        "numpy.polynomial.chebyshev._zseries_mul",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.poly2cheb": [
        "numpy.polynomial.chebyshev.chebadd",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.chebyshev.chebmulx"
    ],
    "numpy.polynomial.chebyshev.cheb2poly": [
        "numpy.lib.polynomial.polyadd",
        "numpy.lib.polynomial.polysub",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.chebyshev.chebline": [
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebfromroots": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.sort",
        "numpy.divmod",
        "numpy.polynomial.chebyshev.chebmul",
        "numpy.ones",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.chebyshev.chebadd": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.chebyshev.chebsub": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.chebyshev.chebmulx": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.empty"
    ],
    "numpy.polynomial.chebyshev.chebmul": [
        "numpy.polynomial.chebyshev._zseries_to_cseries",
        "numpy.polynomial.chebyshev._zseries_mul",
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.chebyshev._cseries_to_zseries"
    ],
    "numpy.polynomial.chebyshev.chebdiv": [
        "numpy.polynomial.chebyshev._zseries_to_cseries",
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.chebyshev._zseries_div",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.chebyshev._cseries_to_zseries"
    ],
    "numpy.polynomial.chebyshev.chebpow": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.convolve",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.int",
        "numpy.polynomial.chebyshev._cseries_to_zseries",
        "numpy.polynomial.chebyshev._zseries_to_cseries"
    ],
    "numpy.polynomial.chebyshev.chebder": [
        "numpy.double",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebint": [
        "numpy.double",
        "numpy.iterable",
        "numpy.empty",
        "numpy.all",
        "numpy.moveaxis",
        "numpy.ndim",
        "numpy.polynomial.chebyshev.chebval",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebval": [
        "numpy.double",
        "numpy.ndarray",
        "numpy.asarray",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebval2d": [
        "numpy.polynomial.chebyshev.chebval",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebgrid2d": [
        "numpy.polynomial.chebyshev.chebval"
    ],
    "numpy.polynomial.chebyshev.chebval3d": [
        "numpy.polynomial.chebyshev.chebval",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebgrid3d": [
        "numpy.polynomial.chebyshev.chebval"
    ],
    "numpy.polynomial.chebyshev.chebvander": [
        "numpy.int",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebvander2d": [
        "numpy.polynomial.chebyshev.chebvander",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebvander3d": [
        "numpy.polynomial.chebyshev.chebvander",
        "numpy.array"
    ],
    "numpy.polynomial.chebyshev.chebfit": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.zeros",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.sort",
        "numpy.ma.sum",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.polynomial.chebyshev.chebvander",
        "numpy.ma.core.ndim",
        "numpy.lib.polynomial.RankWarning",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.polynomial.polyutils.RankWarning",
        "numpy.dtype",
        "numpy.linalg.lstsq",
        "numpy.core.fromnumeric.ndim",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.polynomial.chebyshev.chebcompanion": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.sqrt",
        "numpy.zeros"
    ],
    "numpy.polynomial.chebyshev.chebroots": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.chebyshev.chebcompanion"
    ],
    "numpy.polynomial.chebyshev.chebinterpolate": [
        "numpy.polynomial.chebyshev.chebvander",
        "numpy.dot",
        "numpy.polynomial.chebyshev.chebpts1",
        "numpy.asarray"
    ],
    "numpy.polynomial.chebyshev.chebgauss": [
        "numpy.int",
        "numpy.cos",
        "numpy.ones",
        "numpy.arange"
    ],
    "numpy.polynomial.chebyshev.chebweight": [
        "numpy.sqrt"
    ],
    "numpy.polynomial.chebyshev.chebpts1": [
        "numpy.int",
        "numpy.linspace",
        "numpy.cos"
    ],
    "numpy.polynomial.chebyshev.chebpts2": [
        "numpy.int",
        "numpy.linspace",
        "numpy.cos"
    ],
    "numpy.polynomial.chebyshev.Chebyshev": [
        "numpy.polynomial.chebyshev.chebmul",
        "numpy.polynomial.chebyshev.chebint",
        "numpy.polynomial.chebyshev.chebfromroots",
        "numpy.polynomial.chebyshev.chebdiv",
        "numpy.array",
        "numpy.polynomial.chebyshev.chebadd",
        "numpy.polynomial.chebyshev.chebval",
        "numpy.polynomial.chebyshev.chebpow",
        "numpy.polynomial.chebyshev.chebroots",
        "numpy.polynomial.chebyshev.chebfit",
        "numpy.polynomial.chebyshev.chebsub",
        "numpy.polynomial.chebyshev.chebder",
        "numpy.polynomial.chebyshev.chebline",
        "numpy.polynomial._polybase.ABCPolyBase"
    ],
    "numpy.polynomial.chebyshev.Chebyshev.interpolate": [
        "numpy.polynomial.chebyshev.chebinterpolate",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.poly2leg": [
        "numpy.polynomial.legendre.legadd",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.legendre.legmulx"
    ],
    "numpy.polynomial.legendre.leg2poly": [
        "numpy.lib.polynomial.polyadd",
        "numpy.lib.polynomial.polysub",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.legendre.legline": [
        "numpy.array"
    ],
    "numpy.polynomial.legendre.legfromroots": [
        "numpy.polynomial.legendre.legmul",
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.divmod",
        "numpy.sort",
        "numpy.ones",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.legendre.legadd": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.legendre.legsub": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.legendre.legmulx": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.empty"
    ],
    "numpy.polynomial.legendre.legmul": [
        "numpy.polynomial.legendre.legadd",
        "numpy.polynomial.legendre.legsub",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.legendre.legmulx"
    ],
    "numpy.polynomial.legendre.legdiv": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.legendre.legmul",
        "numpy.empty"
    ],
    "numpy.polynomial.legendre.legpow": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.legendre.legmul",
        "numpy.int"
    ],
    "numpy.polynomial.legendre.legder": [
        "numpy.double",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.legint": [
        "numpy.double",
        "numpy.iterable",
        "numpy.polynomial.legendre.legval",
        "numpy.empty",
        "numpy.all",
        "numpy.ndim",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.legval": [
        "numpy.double",
        "numpy.ndarray",
        "numpy.asarray",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.legval2d": [
        "numpy.polynomial.legendre.legval",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.leggrid2d": [
        "numpy.polynomial.legendre.legval"
    ],
    "numpy.polynomial.legendre.legval3d": [
        "numpy.polynomial.legendre.legval",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.leggrid3d": [
        "numpy.polynomial.legendre.legval"
    ],
    "numpy.polynomial.legendre.legvander": [
        "numpy.int",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.legvander2d": [
        "numpy.polynomial.legendre.legvander",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.legvander3d": [
        "numpy.polynomial.legendre.legvander",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.legfit": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.zeros",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.sort",
        "numpy.ma.sum",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.polynomial.legendre.legvander",
        "numpy.lib.polynomial.RankWarning",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.polynomial.polyutils.RankWarning",
        "numpy.dtype",
        "numpy.linalg.lstsq",
        "numpy.core.fromnumeric.ndim",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.polynomial.legendre.legcompanion": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.sqrt",
        "numpy.zeros"
    ],
    "numpy.polynomial.legendre.legroots": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.legendre.legcompanion"
    ],
    "numpy.polynomial.legendre.leggauss": [
        "numpy.ndarray.sum",
        "numpy.polynomial.legendre.legder",
        "numpy.int",
        "numpy.linalg.eigvalsh",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.legendre.legval",
        "numpy.sum",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.sum",
        "numpy.polynomial.legendre.legcompanion",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum",
        "numpy.array"
    ],
    "numpy.polynomial.legendre.Legendre": [
        "numpy.polynomial.legendre.legmul",
        "numpy.polynomial.legendre.legint",
        "numpy.polynomial.legendre.legdiv",
        "numpy.polynomial.legendre.legval",
        "numpy.polynomial.legendre.legadd",
        "numpy.array",
        "numpy.polynomial.legendre.legpow",
        "numpy.polynomial.legendre.legfit",
        "numpy.polynomial.legendre.legsub",
        "numpy.polynomial.legendre.legroots",
        "numpy.polynomial.legendre.legline",
        "numpy.polynomial.legendre.legder",
        "numpy.polynomial.legendre.legfromroots",
        "numpy.polynomial._polybase.ABCPolyBase"
    ],
    "numpy.polynomial.laguerre.poly2lag": [
        "numpy.polynomial.laguerre.lagmulx",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.laguerre.lagadd"
    ],
    "numpy.polynomial.laguerre.lag2poly": [
        "numpy.lib.polynomial.polyadd",
        "numpy.lib.polynomial.polysub",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.laguerre.lagline": [
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.lagfromroots": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.divmod",
        "numpy.sort",
        "numpy.polynomial.laguerre.lagmul",
        "numpy.ones",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.laguerre.lagadd": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.laguerre.lagsub": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.laguerre.lagmulx": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.empty"
    ],
    "numpy.polynomial.laguerre.lagmul": [
        "numpy.polynomial.laguerre.lagsub",
        "numpy.polynomial.laguerre.lagmulx",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.laguerre.lagadd"
    ],
    "numpy.polynomial.laguerre.lagdiv": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.empty",
        "numpy.polynomial.laguerre.lagmul"
    ],
    "numpy.polynomial.laguerre.lagpow": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.int",
        "numpy.polynomial.laguerre.lagmul"
    ],
    "numpy.polynomial.laguerre.lagder": [
        "numpy.double",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.lagint": [
        "numpy.double",
        "numpy.iterable",
        "numpy.empty",
        "numpy.array",
        "numpy.all",
        "numpy.ndim",
        "numpy.polynomial.laguerre.lagval",
        "numpy.moveaxis"
    ],
    "numpy.polynomial.laguerre.lagval": [
        "numpy.double",
        "numpy.ndarray",
        "numpy.asarray",
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.lagval2d": [
        "numpy.polynomial.laguerre.lagval",
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.laggrid2d": [
        "numpy.polynomial.laguerre.lagval"
    ],
    "numpy.polynomial.laguerre.lagval3d": [
        "numpy.polynomial.laguerre.lagval",
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.laggrid3d": [
        "numpy.polynomial.laguerre.lagval"
    ],
    "numpy.polynomial.laguerre.lagvander": [
        "numpy.int",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.lagvander2d": [
        "numpy.polynomial.laguerre.lagvander",
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.lagvander3d": [
        "numpy.polynomial.laguerre.lagvander",
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.lagfit": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.zeros",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.sort",
        "numpy.ma.sum",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.polynomial.laguerre.lagvander",
        "numpy.ma.core.ndim",
        "numpy.lib.polynomial.RankWarning",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.polynomial.polyutils.RankWarning",
        "numpy.dtype",
        "numpy.linalg.lstsq",
        "numpy.core.fromnumeric.ndim",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.polynomial.laguerre.lagcompanion": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.zeros"
    ],
    "numpy.polynomial.laguerre.lagroots": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.laguerre.lagcompanion"
    ],
    "numpy.polynomial.laguerre.laggauss": [
        "numpy.ndarray.sum",
        "numpy.int",
        "numpy.linalg.eigvalsh",
        "numpy.ma.core.MaskedArray.max",
        "numpy.sum",
        "numpy.polynomial.laguerre.lagcompanion",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.polynomial.laguerre.lagder",
        "numpy.ma.sum",
        "numpy.polynomial.laguerre.lagval",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum",
        "numpy.array"
    ],
    "numpy.polynomial.laguerre.lagweight": [
        "numpy.exp"
    ],
    "numpy.polynomial.laguerre.Laguerre": [
        "numpy.polynomial.laguerre.lagpow",
        "numpy.polynomial.laguerre.lagsub",
        "numpy.polynomial.laguerre.lagfit",
        "numpy.polynomial.laguerre.lagline",
        "numpy.polynomial.laguerre.lagroots",
        "numpy.array",
        "numpy.polynomial.laguerre.lagder",
        "numpy.polynomial.laguerre.lagfromroots",
        "numpy.polynomial.laguerre.lagval",
        "numpy.polynomial.laguerre.lagint",
        "numpy.polynomial.laguerre.lagmul",
        "numpy.polynomial.laguerre.lagdiv",
        "numpy.polynomial._polybase.ABCPolyBase",
        "numpy.polynomial.laguerre.lagadd"
    ],
    "numpy.polynomial.hermite_e.poly2herme": [
        "numpy.polynomial.hermite_e.hermemulx",
        "numpy.polynomial.hermite_e.hermeadd",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.hermite_e.herme2poly": [
        "numpy.lib.polynomial.polyadd",
        "numpy.lib.polynomial.polysub",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.hermite_e.hermeline": [
        "numpy.array"
    ],
    "numpy.polynomial.hermite_e.hermefromroots": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.divmod",
        "numpy.sort",
        "numpy.ones",
        "numpy.polynomial.hermite_e.hermemul",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.hermite_e.hermeadd": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.hermite_e.hermesub": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.hermite_e.hermemulx": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.empty"
    ],
    "numpy.polynomial.hermite_e.hermemul": [
        "numpy.polynomial.hermite_e.hermesub",
        "numpy.polynomial.hermite_e.hermemulx",
        "numpy.polynomial.hermite_e.hermeadd",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.hermite_e.hermediv": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial.hermite_e.hermemul",
        "numpy.empty"
    ],
    "numpy.polynomial.hermite_e.hermepow": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.hermite_e.hermemul",
        "numpy.int"
    ],
    "numpy.polynomial.hermite_e.hermeder": [
        "numpy.double",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.hermite_e.hermeint": [
        "numpy.double",
        "numpy.iterable",
        "numpy.empty",
        "numpy.all",
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.ndim",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.hermite_e.hermeval": [
        "numpy.double",
        "numpy.ndarray",
        "numpy.asarray",
        "numpy.array"
    ],
    "numpy.polynomial.hermite_e.hermeval2d": [
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.array"
    ],
    "numpy.polynomial.hermite_e.hermegrid2d": [
        "numpy.polynomial.hermite_e.hermeval"
    ],
    "numpy.polynomial.hermite_e.hermeval3d": [
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.array"
    ],
    "numpy.polynomial.hermite_e.hermegrid3d": [
        "numpy.polynomial.hermite_e.hermeval"
    ],
    "numpy.polynomial.hermite_e.hermevander": [
        "numpy.int",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.hermite_e.hermevander2d": [
        "numpy.array",
        "numpy.polynomial.hermite_e.hermevander"
    ],
    "numpy.polynomial.hermite_e.hermevander3d": [
        "numpy.array",
        "numpy.polynomial.hermite_e.hermevander"
    ],
    "numpy.polynomial.hermite_e.hermefit": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.zeros",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.sort",
        "numpy.ma.sum",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.lib.polynomial.RankWarning",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.polynomial.polyutils.RankWarning",
        "numpy.dtype",
        "numpy.linalg.lstsq",
        "numpy.core.fromnumeric.ndim",
        "numpy.polynomial.hermite_e.hermevander",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.polynomial.hermite_e.hermecompanion": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.multiply.accumulate",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.add.accumulate",
        "numpy.array",
        "numpy.ma.core._MaskedBinaryOperation.accumulate",
        "numpy.hstack",
        "numpy.sqrt",
        "numpy.zeros",
        "numpy.subtract.accumulate",
        "numpy.divide.accumulate"
    ],
    "numpy.polynomial.hermite_e.hermeroots": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.hermite_e.hermecompanion"
    ],
    "numpy.polynomial.hermite_e._normed_hermite_e_n": [
        "numpy.sqrt",
        "numpy.ones"
    ],
    "numpy.polynomial.hermite_e.hermegauss": [
        "numpy.ndarray.sum",
        "numpy.int",
        "numpy.linalg.eigvalsh",
        "numpy.sqrt",
        "numpy.ma.core.MaskedArray.max",
        "numpy.sum",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.polynomial.hermite_e.hermecompanion",
        "numpy.ma.sum",
        "numpy.polynomial.hermite_e._normed_hermite_e_n",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum",
        "numpy.array"
    ],
    "numpy.polynomial.hermite_e.hermeweight": [
        "numpy.exp"
    ],
    "numpy.polynomial.hermite_e.HermiteE": [
        "numpy.polynomial.hermite_e.hermesub",
        "numpy.polynomial.hermite_e.hermeline",
        "numpy.polynomial.hermite_e.hermeder",
        "numpy.array",
        "numpy.polynomial.hermite_e.hermeroots",
        "numpy.polynomial.hermite_e.hermemul",
        "numpy.polynomial.hermite_e.hermeint",
        "numpy.polynomial.hermite_e.hermefromroots",
        "numpy.polynomial.hermite_e.hermediv",
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.polynomial.hermite_e.hermeadd",
        "numpy.polynomial.hermite_e.hermepow",
        "numpy.polynomial._polybase.ABCPolyBase",
        "numpy.polynomial.hermite_e.hermefit"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.has_samecoef": [
        "numpy.all",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.has_samedomain": [
        "numpy.all",
        "numpy.polynomial._polybase.ABCPolyBase.domain"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.has_samewindow": [
        "numpy.all",
        "numpy.polynomial._polybase.ABCPolyBase.window"
    ],
    "numpy.polynomial._polybase.ABCPolyBase._get_coefficients": [
        "numpy.polynomial._polybase.ABCPolyBase.domain",
        "numpy.polynomial._polybase.ABCPolyBase.window",
        "numpy.all"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__init__": [
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__repr__": [
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__str__": [
        "numpy.polynomial._polybase.ABCPolyBase.nickname",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__getstate__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__call__": [
        "numpy.polynomial._polybase.ABCPolyBase.mapparms",
        "numpy.polynomial.polyutils.mapparms",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial._polybase.ABCPolyBase._val"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__iter__": [
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__len__": [
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__neg__": [
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__add__": [
        "numpy.polynomial._polybase.ABCPolyBase._add",
        "numpy.polynomial._polybase.ABCPolyBase._get_coefficients",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__sub__": [
        "numpy.polynomial._polybase.ABCPolyBase._get_coefficients",
        "numpy.polynomial._polybase.ABCPolyBase._sub",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__mul__": [
        "numpy.polynomial._polybase.ABCPolyBase._get_coefficients",
        "numpy.polynomial._polybase.ABCPolyBase._mul",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__div__": [
        "numpy.polynomial._polybase.ABCPolyBase.__floordiv__"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__truediv__": [
        "numpy.polynomial._polybase.ABCPolyBase.__floordiv__"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__floordiv__": [
        "numpy.polynomial._polybase.ABCPolyBase.__divmod__"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__mod__": [
        "numpy.polynomial._polybase.ABCPolyBase.__divmod__"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__divmod__": [
        "numpy.polynomial._polybase.ABCPolyBase._get_coefficients",
        "numpy.polynomial._polybase.ABCPolyBase._div",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__pow__": [
        "numpy.polynomial._polybase.ABCPolyBase._pow",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__radd__": [
        "numpy.polynomial._polybase.ABCPolyBase._add",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__rsub__": [
        "numpy.polynomial._polybase.ABCPolyBase._sub",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__rmul__": [
        "numpy.polynomial._polybase.ABCPolyBase._mul",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__rdiv__": [
        "numpy.polynomial._polybase.ABCPolyBase.__rfloordiv__"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__rfloordiv__": [
        "numpy.polynomial._polybase.ABCPolyBase.__rdivmod__"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__rmod__": [
        "numpy.polynomial._polybase.ABCPolyBase.__rdivmod__"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__rdivmod__": [
        "numpy.polynomial._polybase.ABCPolyBase._div",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__eq__": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.polynomial.polyutils.as_series",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.all",
        "numpy.ma.core.shape"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.__ne__": [
        "numpy.polynomial._polybase.ABCPolyBase.__eq__"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.copy": [
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.cutdeg": [
        "numpy.polynomial._polybase.ABCPolyBase.truncate"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.trim": [
        "numpy.polynomial.polyutils.trimcoef",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.truncate": [
        "numpy.int",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.convert": [
        "numpy.polynomial._polybase.ABCPolyBase.identity",
        "numpy.polynomial._polybase.ABCPolyBase.domain",
        "numpy.polynomial._polybase.ABCPolyBase.window",
        "numpy.matlib.identity",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "numpy.identity",
        "numpy.core.numeric.identity"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.mapparms": [
        "numpy.polynomial._polybase.ABCPolyBase.mapparms",
        "numpy.polynomial.polyutils.mapparms",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.integ": [
        "numpy.polynomial._polybase.ABCPolyBase.mapparms",
        "numpy.polynomial._polybase.ABCPolyBase._int",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.deriv": [
        "numpy.polynomial._polybase.ABCPolyBase.mapparms",
        "numpy.polynomial._polybase.ABCPolyBase._der",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.roots": [
        "numpy.polynomial._polybase.ABCPolyBase._roots",
        "numpy.polynomial.polyutils.mapdomain",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.linspace": [
        "numpy.linspace",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.fit": [
        "numpy.polynomial.polyutils.getdomain",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "numpy.polynomial._polybase.ABCPolyBase._fit",
        "numpy.polynomial.polyutils.mapdomain",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.fromroots": [
        "numpy.polynomial.polyutils.getdomain",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "numpy.polynomial.polyutils.mapparms",
        "numpy.polynomial._polybase.ABCPolyBase.mapparms",
        "numpy.polynomial._polybase.ABCPolyBase._fromroots",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.identity": [
        "numpy.polynomial._polybase.ABCPolyBase.mapparms",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "numpy.polynomial.polyutils.mapparms",
        "numpy.polynomial.polyutils.as_series",
        "numpy.polynomial._polybase.ABCPolyBase._line"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.basis": [
        "numpy.int",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial._polybase.ABCPolyBase.cast": [
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.polynomial.polyline": [
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polyfromroots": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.sort",
        "numpy.divmod",
        "numpy.polynomial.polynomial.polymul",
        "numpy.ones",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.polynomial.polyadd": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.polynomial.polysub": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.polynomial.polynomial.polymulx": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.empty"
    ],
    "numpy.polynomial.polynomial.polymul": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series",
        "numpy.convolve"
    ],
    "numpy.polynomial.polynomial.polydiv": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.polynomial.polypow": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.convolve",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.int"
    ],
    "numpy.polynomial.polynomial.polyder": [
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polyint": [
        "numpy.iterable",
        "numpy.empty",
        "numpy.all",
        "numpy.ndim",
        "numpy.polynomial.polynomial.polyval",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polyval": [
        "numpy.ndarray",
        "numpy.asarray",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polyvalfromroots": [
        "numpy.double",
        "numpy.ndarray",
        "numpy.asarray",
        "numpy.prod",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polyval2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polygrid2d": [
        "numpy.polynomial.polynomial.polyval"
    ],
    "numpy.polynomial.polynomial.polyval3d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polygrid3d": [
        "numpy.polynomial.polynomial.polyval"
    ],
    "numpy.polynomial.polynomial.polyvander": [
        "numpy.int",
        "numpy.empty",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polyvander2d": [
        "numpy.polynomial.polynomial.polyvander",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polyvander3d": [
        "numpy.polynomial.polynomial.polyvander",
        "numpy.array"
    ],
    "numpy.polynomial.polynomial.polyfit": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.zeros",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.sort",
        "numpy.ma.sum",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.lib.polynomial.RankWarning",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.polynomial.polyutils.RankWarning",
        "numpy.dtype",
        "numpy.linalg.lstsq",
        "numpy.core.fromnumeric.ndim",
        "numpy.polynomial.polynomial.polyvander",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.polynomial.polynomial.polycompanion": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.zeros"
    ],
    "numpy.polynomial.polynomial.polyroots": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.polynomial.polyutils.as_series",
        "numpy.array",
        "numpy.polynomial.polynomial.polycompanion"
    ],
    "numpy.polynomial.polynomial.Polynomial": [
        "numpy.polynomial.polynomial.polyfromroots",
        "numpy.polynomial.polynomial.polymul",
        "numpy.polynomial.polynomial.polyint",
        "numpy.polynomial.polynomial.polyval",
        "numpy.polynomial.polynomial.polydiv",
        "numpy.array",
        "numpy.polynomial.polynomial.polyline",
        "numpy.polynomial.polynomial.polyadd",
        "numpy.polynomial.polynomial.polypow",
        "numpy.polynomial.polynomial.polysub",
        "numpy.polynomial.polynomial.polyfit",
        "numpy.polynomial.polynomial.polyroots",
        "numpy.polynomial.polynomial.polyder",
        "numpy.polynomial._polybase.ABCPolyBase"
    ],
    "numpy.polynomial.polyutils.PolyDomainError": [
        "numpy.polynomial.polyutils.PolyError"
    ],
    "numpy.polynomial.polyutils.as_series": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.core.MaskedArray.min",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.dtype",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.core.min",
        "numpy.ma.append",
        "numpy.core.fromnumeric.any",
        "numpy.min",
        "numpy.ma.copy",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.any",
        "numpy.core.getlimits.iinfo.min",
        "numpy.append",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.append",
        "numpy.empty",
        "numpy.common_type",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.polynomial.polyutils.trimcoef": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.ma.masked.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.nonzero",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.polynomial.polyutils.as_series",
        "numpy.True_.copy"
    ],
    "numpy.polynomial.polyutils.getdomain": [
        "numpy.polynomial.polyutils.as_series",
        "numpy.array"
    ],
    "numpy.polynomial.polyutils.mapdomain": [
        "numpy.polynomial.polyutils.mapparms",
        "numpy.asanyarray"
    ],
    "numpy.polynomial.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.polynomial.tests.test_legendre.trim": [
        "numpy.polynomial.polyutils.trimcoef"
    ],
    "numpy.polynomial.tests.test_legendre.TestConstants.test_legdomain": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestConstants.test_legzero": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestConstants.test_legone": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestConstants.test_legx": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestArithmetic": [
        "numpy.linspace"
    ],
    "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legadd": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.polynomial.tests.test_legendre.trim",
        "numpy.polynomial.legendre.legadd",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legsub": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.polynomial.tests.test_legendre.trim",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.polynomial.legendre.legsub"
    ],
    "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmulx": [
        "numpy.polynomial.legendre.legmulx",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legmul": [
        "numpy.polynomial.legendre.legmul",
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.polynomial.legendre.legval",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestArithmetic.test_legdiv": [
        "numpy.polynomial.legendre.legmul",
        "numpy.polynomial.legendre.legdiv",
        "numpy.polynomial.legendre.legadd",
        "numpy.polynomial.tests.test_legendre.trim",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestEvaluation": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval": [
        "numpy.core.fromnumeric.shape",
        "numpy.zeros",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.linspace",
        "numpy.polynomial.legendre.legval",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.size",
        "numpy.polynomial.polynomial.polyval",
        "numpy.size",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval2d": [
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.polynomial.legendre.legval2d"
    ],
    "numpy.polynomial.tests.test_legendre.TestEvaluation.test_legval3d": [
        "numpy.polynomial.legendre.legval3d",
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.polynomial.legendre.leggrid2d",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestEvaluation.test_leggrid3d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.polynomial.legendre.leggrid3d",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestIntegral.test_legint": [
        "numpy.polynomial.legendre.legint",
        "numpy.polynomial.legendre.poly2leg",
        "numpy.polynomial.legendre.legval",
        "numpy.polynomial.legendre.leg2poly",
        "numpy.polynomial.tests.test_legendre.trim",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestIntegral.test_legint_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.polynomial.legendre.legint",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestDerivative.test_legder": [
        "numpy.polynomial.legendre.legint",
        "numpy.polynomial.tests.test_legendre.trim",
        "numpy.polynomial.legendre.legder",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestDerivative.test_legder_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.polynomial.legendre.legder",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestVander": [
        "numpy.random.random"
    ],
    "numpy.polynomial.tests.test_legendre.TestVander.test_legvander": [
        "numpy.testing.assert_",
        "numpy.polynomial.legendre.legval",
        "numpy.arange",
        "numpy.polynomial.legendre.legvander",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_legendre.TestVander.test_legvander2d": [
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_",
        "numpy.polynomial.legendre.legval2d",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.legendre.legvander2d",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_legendre.TestVander.test_legvander3d": [
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_",
        "numpy.polynomial.legendre.legval3d",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.legendre.legvander3d",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit": [
        "numpy.zeros_like",
        "numpy.testing.assert_equal",
        "numpy.linspace",
        "numpy.polynomial.legendre.legval",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f2",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.legendre.legfit"
    ],
    "numpy.polynomial.tests.test_legendre.TestCompanion.test_raises": [
        "numpy.polynomial.legendre.legcompanion"
    ],
    "numpy.polynomial.tests.test_legendre.TestCompanion.test_dimensions": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.polynomial.tests.test_legendre.TestCompanion.test_linear_root": [
        "numpy.polynomial.legendre.legcompanion",
        "numpy.testing.assert_"
    ],
    "numpy.polynomial.tests.test_legendre.TestGauss.test_100": [
        "numpy.sqrt",
        "numpy.polynomial.legendre.legvander",
        "numpy.dot",
        "numpy.eye",
        "numpy.polynomial.legendre.leggauss",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestMisc.test_legfromroots": [
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.cos",
        "numpy.polynomial.legendre.legval",
        "numpy.polynomial.legendre.leg2poly",
        "numpy.polynomial.tests.test_legendre.trim",
        "numpy.polynomial.legendre.legfromroots",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestMisc.test_legroots": [
        "numpy.linspace",
        "numpy.polynomial.tests.test_legendre.trim",
        "numpy.polynomial.legendre.legroots",
        "numpy.polynomial.legendre.legfromroots",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestMisc.test_legtrim": [
        "numpy.polynomial.polyutils.trimcoef",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestMisc.test_legline": [
        "numpy.polynomial.legendre.legline",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_legendre.TestMisc.test_leg2poly": [
        "numpy.array",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.legendre.leg2poly"
    ],
    "numpy.polynomial.tests.test_legendre.TestMisc.test_poly2leg": [
        "numpy.array",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.legendre.poly2leg"
    ],
    "numpy.polynomial.tests.test_legendre.TestMisc.test_weight": [
        "numpy.linspace",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.legendre.legweight"
    ],
    "numpy.polynomial.tests.test_polyutils.TestMisc.test_trimseq": [
        "numpy.polynomial.polyutils.trimseq",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polyutils.TestMisc.test_as_series": [
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.polynomial.polyutils.as_series"
    ],
    "numpy.polynomial.tests.test_polyutils.TestMisc.test_trimcoef": [
        "numpy.polynomial.polyutils.trimcoef",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polyutils.TestDomain.test_getdomain": [
        "numpy.polynomial.polyutils.getdomain",
        "numpy.testing.assert_almost_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.polynomial.tests.test_polyutils.TestDomain.test_mapdomain": [
        "numpy.ma.masked.view",
        "numpy.polynomial.tests.test_polyutils.TestDomain.test_mapdomain.MyNDArray",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.testing.assert_almost_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.polynomial.polyutils.mapdomain",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_polyutils.TestDomain.test_mapdomain.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.polynomial.tests.test_polyutils.TestDomain.test_mapparms": [
        "numpy.polynomial.polyutils.mapparms",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.trim": [
        "numpy.polynomial.polyutils.trimcoef"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermedomain": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermezero": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermeone": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestConstants.test_hermex": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestArithmetic": [
        "numpy.linspace"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermeadd": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.hermite_e.hermeadd",
        "numpy.polynomial.tests.test_hermite_e.trim",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermesub": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.tests.test_hermite_e.trim",
        "numpy.ma.core.max",
        "numpy.polynomial.hermite_e.hermesub",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemulx": [
        "numpy.polynomial.hermite_e.hermemulx",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermemul": [
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.polynomial.hermite_e.hermemul",
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestArithmetic.test_hermediv": [
        "numpy.polynomial.hermite_e.hermemul",
        "numpy.polynomial.hermite_e.hermediv",
        "numpy.polynomial.hermite_e.hermeadd",
        "numpy.polynomial.tests.test_hermite_e.trim",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestEvaluation": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval": [
        "numpy.core.fromnumeric.shape",
        "numpy.zeros",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.linspace",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.size",
        "numpy.polynomial.polynomial.polyval",
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.size",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.polynomial.hermite_e.hermeval2d",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermeval3d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.polynomial.hermite_e.hermeval3d",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite_e.hermegrid2d"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestEvaluation.test_hermegrid3d": [
        "numpy.polynomial.hermite_e.hermegrid3d",
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint": [
        "numpy.polynomial.hermite_e.herme2poly",
        "numpy.polynomial.hermite_e.hermeint",
        "numpy.polynomial.hermite_e.poly2herme",
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_hermite_e.trim"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestIntegral.test_hermeint_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite_e.hermeint"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder": [
        "numpy.polynomial.hermite_e.hermeder",
        "numpy.polynomial.hermite_e.hermeint",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_hermite_e.trim",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestDerivative.test_hermeder_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite_e.hermeder"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestVander": [
        "numpy.random.random"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.polynomial.hermite_e.hermevander"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander2d": [
        "numpy.polynomial.hermite_e.hermeval2d",
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_",
        "numpy.polynomial.hermite_e.hermevander2d",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestVander.test_hermevander3d": [
        "numpy.random.random",
        "numpy.polynomial.hermite_e.hermeval3d",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_",
        "numpy.polynomial.hermite_e.hermevander3d",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit": [
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.zeros_like",
        "numpy.testing.assert_equal",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f2",
        "numpy.linspace",
        "numpy.polynomial.hermite_e.hermefit",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite_e.hermeval"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestCompanion.test_raises": [
        "numpy.polynomial.hermite_e.hermecompanion"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestCompanion.test_dimensions": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestCompanion.test_linear_root": [
        "numpy.polynomial.hermite_e.hermecompanion",
        "numpy.testing.assert_"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestGauss.test_100": [
        "numpy.sqrt",
        "numpy.dot",
        "numpy.polynomial.hermite_e.hermegauss",
        "numpy.eye",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite_e.hermevander"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermefromroots": [
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.cos",
        "numpy.polynomial.hermite_e.hermefromroots",
        "numpy.polynomial.hermite_e.hermeval",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_hermite_e.trim",
        "numpy.polynomial.hermite_e.herme2poly"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeroots": [
        "numpy.linspace",
        "numpy.polynomial.hermite_e.hermefromroots",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_hermite_e.trim",
        "numpy.polynomial.hermite_e.hermeroots"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermetrim": [
        "numpy.polynomial.polyutils.trimcoef",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestMisc.test_hermeline": [
        "numpy.polynomial.hermite_e.hermeline",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestMisc.test_herme2poly": [
        "numpy.array",
        "numpy.polynomial.hermite_e.herme2poly",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestMisc.test_poly2herme": [
        "numpy.array",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite_e.poly2herme"
    ],
    "numpy.polynomial.tests.test_hermite_e.TestMisc.test_weight": [
        "numpy.polynomial.hermite_e.hermeweight",
        "numpy.linspace",
        "numpy.testing.assert_almost_equal",
        "numpy.exp"
    ],
    "numpy.polynomial.tests.test_classes.assert_poly_almost_equal": [
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_conversion": [
        "numpy.linspace",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_cast": [
        "numpy.testing.assert_almost_equal",
        "numpy.linspace",
        "numpy.random.random"
    ],
    "numpy.polynomial.tests.test_classes.test_identity": [
        "numpy.linspace",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_basis": [
        "numpy.random.random",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_fromroots": [
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_fit": [
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.linspace",
        "numpy.random.random",
        "numpy.zeros_like",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_equal": [
        "numpy.testing.assert_"
    ],
    "numpy.polynomial.tests.test_classes.test_not_equal": [
        "numpy.testing.assert_"
    ],
    "numpy.polynomial.tests.test_classes.test_add": [
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_classes.test_sub": [
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_classes.test_mul": [
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_classes.test_floordiv": [
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_classes.test_truediv": [
        "numpy.int",
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_classes.test_mod": [
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_classes.test_divmod": [
        "numpy.divmod",
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_classes.test_roots": [
        "numpy.polynomial._polybase.ABCPolyBase.roots",
        "numpy.linspace",
        "numpy.sort",
        "numpy.lib.polynomial.poly1d.roots",
        "numpy.lib.polynomial.roots",
        "numpy.testing.assert_almost_equal",
        "numpy.roots"
    ],
    "numpy.polynomial.tests.test_classes.test_degree": [
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_copy": [
        "numpy.testing.assert_"
    ],
    "numpy.polynomial.tests.test_classes.test_integ": [
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_deriv": [
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_linspace": [
        "numpy.linspace",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_pow": [
        "numpy.polynomial.tests.test_classes.assert_poly_almost_equal",
        "numpy.random.random"
    ],
    "numpy.polynomial.tests.test_classes.test_call": [
        "numpy.linspace",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_cutdeg": [
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_truncate": [
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_trim": [
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_mapparms": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_classes.test_ufunc_override": [
        "numpy.ones",
        "numpy.add"
    ],
    "numpy.polynomial.tests.test_classes.TestInterpolate.test_raises": [
        "numpy.polynomial.tests.test_classes.TestInterpolate.f"
    ],
    "numpy.polynomial.tests.test_classes.TestInterpolate.test_dimensions": [
        "numpy.testing.assert_",
        "numpy.polynomial._polybase.ABCPolyBase.degree"
    ],
    "numpy.polynomial.tests.test_classes.TestInterpolate.test_approximation": [
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_classes.TestInterpolate.test_approximation.powx",
        "numpy.linspace"
    ],
    "numpy.polynomial.tests.test_chebyshev.trim": [
        "numpy.polynomial.polyutils.trimcoef"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestPrivate.test__cseries_to_zseries": [
        "numpy.polynomial.chebyshev._cseries_to_zseries",
        "numpy.double",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestPrivate.test__zseries_to_cseries": [
        "numpy.polynomial.chebyshev._zseries_to_cseries",
        "numpy.double",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebdomain": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebzero": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebone": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestConstants.test_chebx": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebadd": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.chebyshev.chebadd",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.polynomial.tests.test_chebyshev.trim"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebsub": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.chebyshev.chebsub",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.polynomial.tests.test_chebyshev.trim"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmulx": [
        "numpy.polynomial.chebyshev.chebmulx",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebmul": [
        "numpy.zeros",
        "numpy.polynomial.chebyshev.chebmul",
        "numpy.abs",
        "numpy.polynomial.tests.test_chebyshev.trim",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestArithmetic.test_chebdiv": [
        "numpy.polynomial.chebyshev.chebmul",
        "numpy.polynomial.chebyshev.chebdiv",
        "numpy.polynomial.chebyshev.chebadd",
        "numpy.polynomial.tests.test_chebyshev.trim",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestEvaluation": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval": [
        "numpy.core.fromnumeric.shape",
        "numpy.zeros",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.linspace",
        "numpy.polynomial.chebyshev.chebval",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.size",
        "numpy.polynomial.polynomial.polyval",
        "numpy.size",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.polynomial.chebyshev.chebval2d",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebval3d": [
        "numpy.polynomial.chebyshev.chebval3d",
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.polynomial.chebyshev.chebgrid2d",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestEvaluation.test_chebgrid3d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.polynomial.chebyshev.chebgrid3d",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint": [
        "numpy.polynomial.chebyshev.chebint",
        "numpy.polynomial.chebyshev.cheb2poly",
        "numpy.polynomial.tests.test_chebyshev.trim",
        "numpy.polynomial.chebyshev.chebval",
        "numpy.polynomial.chebyshev.poly2cheb",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestIntegral.test_chebint_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.chebyshev.chebint"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder": [
        "numpy.polynomial.chebyshev.chebint",
        "numpy.polynomial.chebyshev.chebder",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_chebyshev.trim",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestDerivative.test_chebder_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.polynomial.chebyshev.chebder",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestVander": [
        "numpy.random.random"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander": [
        "numpy.testing.assert_",
        "numpy.polynomial.chebyshev.chebval",
        "numpy.arange",
        "numpy.polynomial.chebyshev.chebvander",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander2d": [
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.polynomial.chebyshev.chebvander2d",
        "numpy.testing.assert_",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.dot",
        "numpy.polynomial.chebyshev.chebval2d"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestVander.test_chebvander3d": [
        "numpy.polynomial.chebyshev.chebval3d",
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_",
        "numpy.polynomial.chebyshev.chebvander3d",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit": [
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.zeros_like",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f2",
        "numpy.testing.assert_equal",
        "numpy.linspace",
        "numpy.polynomial.chebyshev.chebfit",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.chebyshev.chebval"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_raises": [
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.chebyshev.chebinterpolate"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_dimensions": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_approximation": [
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.test_approximation.powx",
        "numpy.linspace",
        "numpy.polynomial.chebyshev.chebval",
        "numpy.polynomial.chebyshev.chebinterpolate",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestCompanion.test_raises": [
        "numpy.polynomial.chebyshev.chebcompanion"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestCompanion.test_dimensions": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestCompanion.test_linear_root": [
        "numpy.polynomial.chebyshev.chebcompanion",
        "numpy.testing.assert_"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestGauss.test_100": [
        "numpy.sqrt",
        "numpy.polynomial.chebyshev.chebgauss",
        "numpy.polynomial.chebyshev.chebvander",
        "numpy.dot",
        "numpy.eye",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebfromroots": [
        "numpy.polynomial.chebyshev.chebfromroots",
        "numpy.linspace",
        "numpy.cos",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_chebyshev.trim"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebroots": [
        "numpy.polynomial.chebyshev.chebfromroots",
        "numpy.linspace",
        "numpy.polynomial.chebyshev.chebroots",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_chebyshev.trim"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebtrim": [
        "numpy.polynomial.polyutils.trimcoef",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebline": [
        "numpy.polynomial.chebyshev.chebline",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_cheb2poly": [
        "numpy.polynomial.chebyshev.cheb2poly",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_poly2cheb": [
        "numpy.polynomial.chebyshev.poly2cheb",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_weight": [
        "numpy.linspace",
        "numpy.sqrt",
        "numpy.polynomial.chebyshev.chebweight",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts1": [
        "numpy.polynomial.chebyshev.chebpts1",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_chebyshev.TestMisc.test_chebpts2": [
        "numpy.polynomial.chebyshev.chebpts2",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite.trim": [
        "numpy.polynomial.polyutils.trimcoef"
    ],
    "numpy.polynomial.tests.test_hermite.TestConstants.test_hermdomain": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestConstants.test_hermzero": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestConstants.test_hermone": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestConstants.test_hermx": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestArithmetic": [
        "numpy.linspace"
    ],
    "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermadd": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.hermite.hermadd",
        "numpy.polynomial.tests.test_hermite.trim",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermsub": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.tests.test_hermite.trim",
        "numpy.ma.core.max",
        "numpy.polynomial.hermite.hermsub",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmulx": [
        "numpy.testing.assert_equal",
        "numpy.polynomial.hermite.hermmulx"
    ],
    "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermmul": [
        "numpy.polynomial.hermite.hermmul",
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.tests.test_hermite.TestArithmetic.test_hermdiv": [
        "numpy.polynomial.hermite.hermmul",
        "numpy.polynomial.tests.test_hermite.trim",
        "numpy.polynomial.hermite.hermadd",
        "numpy.polynomial.hermite.hermdiv",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestEvaluation": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval": [
        "numpy.core.fromnumeric.shape",
        "numpy.zeros",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.linspace",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.size",
        "numpy.polynomial.polynomial.polyval",
        "numpy.polynomial.hermite.hermval",
        "numpy.size",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.polynomial.hermite.hermval2d",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermval3d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.polynomial.hermite.hermval3d",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.polynomial.hermite.hermgrid2d",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestEvaluation.test_hermgrid3d": [
        "numpy.polynomial.hermite.hermgrid3d",
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint": [
        "numpy.polynomial.hermite.herm2poly",
        "numpy.polynomial.hermite.hermint",
        "numpy.polynomial.hermite.poly2herm",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_hermite.trim",
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.tests.test_hermite.TestIntegral.test_hermint_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite.hermint"
    ],
    "numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder": [
        "numpy.polynomial.hermite.hermder",
        "numpy.polynomial.hermite.hermint",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_hermite.trim",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestDerivative.test_hermder_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite.hermder"
    ],
    "numpy.polynomial.tests.test_hermite.TestVander": [
        "numpy.random.random"
    ],
    "numpy.polynomial.tests.test_hermite.TestVander.test_hermvander": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.polynomial.hermite.hermvander",
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.tests.test_hermite.TestVander.test_hermvander2d": [
        "numpy.polynomial.hermite.hermval2d",
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_",
        "numpy.polynomial.hermite.hermvander2d",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_hermite.TestVander.test_hermvander3d": [
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_",
        "numpy.polynomial.hermite.hermval3d",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.polynomial.hermite.hermvander3d",
        "numpy.testing.assert_almost_equal",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit": [
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.zeros_like",
        "numpy.testing.assert_equal",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f2",
        "numpy.linspace",
        "numpy.polynomial.hermite.hermfit",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.tests.test_hermite.TestCompanion.test_raises": [
        "numpy.polynomial.hermite.hermcompanion"
    ],
    "numpy.polynomial.tests.test_hermite.TestCompanion.test_dimensions": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.polynomial.tests.test_hermite.TestCompanion.test_linear_root": [
        "numpy.testing.assert_",
        "numpy.polynomial.hermite.hermcompanion"
    ],
    "numpy.polynomial.tests.test_hermite.TestGauss.test_100": [
        "numpy.sqrt",
        "numpy.dot",
        "numpy.polynomial.hermite.hermgauss",
        "numpy.eye",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite.hermvander"
    ],
    "numpy.polynomial.tests.test_hermite.TestMisc.test_hermfromroots": [
        "numpy.polynomial.hermite.hermfromroots",
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.cos",
        "numpy.polynomial.hermite.herm2poly",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_hermite.trim",
        "numpy.polynomial.hermite.hermval"
    ],
    "numpy.polynomial.tests.test_hermite.TestMisc.test_hermroots": [
        "numpy.polynomial.hermite.hermfromroots",
        "numpy.linspace",
        "numpy.polynomial.hermite.hermroots",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_hermite.trim"
    ],
    "numpy.polynomial.tests.test_hermite.TestMisc.test_hermtrim": [
        "numpy.polynomial.polyutils.trimcoef",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestMisc.test_hermline": [
        "numpy.polynomial.hermite.hermline",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestMisc.test_herm2poly": [
        "numpy.array",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite.herm2poly"
    ],
    "numpy.polynomial.tests.test_hermite.TestMisc.test_poly2herm": [
        "numpy.polynomial.hermite.poly2herm",
        "numpy.array",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_hermite.TestMisc.test_weight": [
        "numpy.linspace",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.hermite.hermweight",
        "numpy.exp"
    ],
    "numpy.polynomial.tests.test_laguerre.trim": [
        "numpy.polynomial.polyutils.trimcoef"
    ],
    "numpy.polynomial.tests.test_laguerre.TestConstants.test_lagdomain": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestConstants.test_lagzero": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestConstants.test_lagone": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestConstants.test_lagx": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestArithmetic": [
        "numpy.linspace"
    ],
    "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagadd": [
        "numpy.testing.assert_equal",
        "numpy.polynomial.laguerre.lagadd",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.tests.test_laguerre.trim",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagsub": [
        "numpy.testing.assert_equal",
        "numpy.polynomial.laguerre.lagsub",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.tests.test_laguerre.trim",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmulx": [
        "numpy.polynomial.laguerre.lagmulx",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagmul": [
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.polynomial.laguerre.lagmul",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.laguerre.lagval"
    ],
    "numpy.polynomial.tests.test_laguerre.TestArithmetic.test_lagdiv": [
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_laguerre.trim",
        "numpy.polynomial.laguerre.lagmul",
        "numpy.polynomial.laguerre.lagdiv",
        "numpy.polynomial.laguerre.lagadd"
    ],
    "numpy.polynomial.tests.test_laguerre.TestEvaluation": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval": [
        "numpy.core.fromnumeric.shape",
        "numpy.zeros",
        "numpy.shape",
        "numpy.polynomial.laguerre.lagval",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.linspace",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.size",
        "numpy.polynomial.polynomial.polyval",
        "numpy.size",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.polynomial.laguerre.lagval2d",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_lagval3d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.polynomial.laguerre.lagval3d",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid2d": [
        "numpy.polynomial.laguerre.laggrid2d",
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestEvaluation.test_laggrid3d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.polynomial.laguerre.laggrid3d",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint": [
        "numpy.polynomial.laguerre.lag2poly",
        "numpy.polynomial.laguerre.lagval",
        "numpy.polynomial.tests.test_laguerre.trim",
        "numpy.polynomial.laguerre.lagint",
        "numpy.polynomial.laguerre.poly2lag",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestIntegral.test_lagint_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.polynomial.laguerre.lagint",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder": [
        "numpy.polynomial.laguerre.lagder",
        "numpy.polynomial.tests.test_laguerre.trim",
        "numpy.polynomial.laguerre.lagint",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestDerivative.test_lagder_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.polynomial.laguerre.lagder",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestVander": [
        "numpy.random.random"
    ],
    "numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander": [
        "numpy.testing.assert_",
        "numpy.polynomial.laguerre.lagvander",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.laguerre.lagval"
    ],
    "numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander2d": [
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.polynomial.laguerre.lagvander2d",
        "numpy.testing.assert_",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.laguerre.lagval2d",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_laguerre.TestVander.test_lagvander3d": [
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.polynomial.laguerre.lagvander3d",
        "numpy.testing.assert_",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.dot",
        "numpy.polynomial.laguerre.lagval3d"
    ],
    "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit": [
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.zeros_like",
        "numpy.testing.assert_equal",
        "numpy.polynomial.laguerre.lagfit",
        "numpy.linspace",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.laguerre.lagval"
    ],
    "numpy.polynomial.tests.test_laguerre.TestCompanion.test_raises": [
        "numpy.polynomial.laguerre.lagcompanion"
    ],
    "numpy.polynomial.tests.test_laguerre.TestCompanion.test_dimensions": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.polynomial.tests.test_laguerre.TestCompanion.test_linear_root": [
        "numpy.polynomial.laguerre.lagcompanion",
        "numpy.testing.assert_"
    ],
    "numpy.polynomial.tests.test_laguerre.TestGauss.test_100": [
        "numpy.sqrt",
        "numpy.polynomial.laguerre.lagvander",
        "numpy.polynomial.laguerre.laggauss",
        "numpy.dot",
        "numpy.eye",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestMisc.test_lagfromroots": [
        "numpy.polynomial.laguerre.lag2poly",
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.cos",
        "numpy.polynomial.laguerre.lagfromroots",
        "numpy.polynomial.tests.test_laguerre.trim",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.laguerre.lagval"
    ],
    "numpy.polynomial.tests.test_laguerre.TestMisc.test_lagroots": [
        "numpy.polynomial.laguerre.lagroots",
        "numpy.linspace",
        "numpy.polynomial.laguerre.lagfromroots",
        "numpy.polynomial.tests.test_laguerre.trim",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestMisc.test_lagtrim": [
        "numpy.polynomial.polyutils.trimcoef",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestMisc.test_lagline": [
        "numpy.polynomial.laguerre.lagline",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestMisc.test_lag2poly": [
        "numpy.array",
        "numpy.polynomial.laguerre.lag2poly",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestMisc.test_poly2lag": [
        "numpy.polynomial.laguerre.poly2lag",
        "numpy.array",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_laguerre.TestMisc.test_weight": [
        "numpy.polynomial.laguerre.lagweight",
        "numpy.linspace",
        "numpy.testing.assert_almost_equal",
        "numpy.exp"
    ],
    "numpy.polynomial.tests.test_polynomial.trim": [
        "numpy.polynomial.polyutils.trimcoef"
    ],
    "numpy.polynomial.tests.test_polynomial.TestConstants.test_polydomain": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestConstants.test_polyzero": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestConstants.test_polyone": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestConstants.test_polyx": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polyadd": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.polynomial.polyadd",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.polynomial.tests.test_polynomial.trim",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polysub": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial.polynomial.polysub",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.polynomial.tests.test_polynomial.trim",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymulx": [
        "numpy.polynomial.polynomial.polymulx",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polymul": [
        "numpy.zeros",
        "numpy.polynomial.polynomial.polymul",
        "numpy.polynomial.tests.test_polynomial.trim",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestArithmetic.test_polydiv": [
        "numpy.polynomial.polynomial.polymul",
        "numpy.polynomial.polynomial.polydiv",
        "numpy.polynomial.polynomial.polyadd",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestEvaluation": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval": [
        "numpy.core.fromnumeric.shape",
        "numpy.zeros",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.linspace",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.size",
        "numpy.polynomial.polynomial.polyval",
        "numpy.size",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyvalfromroots": [
        "numpy.vstack",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.arange",
        "numpy.empty",
        "numpy.zeros",
        "numpy.polynomial.polynomial.polyroots",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.polynomial.polyval",
        "numpy.polynomial.polynomial.polyvalfromroots",
        "numpy.random.randint"
    ],
    "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.polynomial.polynomial.polyval2d",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polyval3d": [
        "numpy.polynomial.polynomial.polyval3d",
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid2d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.polynomial.polynomial.polygrid2d",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestEvaluation.test_polygrid3d": [
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.einsum",
        "numpy.random.random",
        "numpy.polynomial.polynomial.polygrid3d",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint": [
        "numpy.polynomial.polynomial.polyint",
        "numpy.polynomial.polynomial.polyval",
        "numpy.polynomial.tests.test_polynomial.trim",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestIntegral.test_polyint_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.polynomial.polyint"
    ],
    "numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder": [
        "numpy.polynomial.polynomial.polyint",
        "numpy.polynomial.tests.test_polynomial.trim",
        "numpy.polynomial.polynomial.polyder",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestDerivative.test_polyder_axis": [
        "numpy.vstack",
        "numpy.random.random",
        "numpy.polynomial.polynomial.polyder",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestVander": [
        "numpy.random.random"
    ],
    "numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander": [
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.polynomial.polyval",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.polynomial.polynomial.polyvander",
        "numpy.array"
    ],
    "numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander2d": [
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.polynomial.polynomial.polyvander2d",
        "numpy.testing.assert_",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.polynomial.polyval2d",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_polynomial.TestVander.test_polyvander3d": [
        "numpy.polynomial.polynomial.polyval3d",
        "numpy.random.random",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_",
        "numpy.polynomial.polynomial.polyvander3d",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.testing.assert_almost_equal",
        "numpy.dot"
    ],
    "numpy.polynomial.tests.test_polynomial.TestCompanion.test_raises": [
        "numpy.polynomial.polynomial.polycompanion"
    ],
    "numpy.polynomial.tests.test_polynomial.TestCompanion.test_dimensions": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.polynomial.tests.test_polynomial.TestCompanion.test_linear_root": [
        "numpy.polynomial.polynomial.polycompanion",
        "numpy.testing.assert_"
    ],
    "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfromroots": [
        "numpy.polynomial.polynomial.polyfromroots",
        "numpy.polynomial.tests.test_polynomial.trim",
        "numpy.linspace",
        "numpy.cos",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyroots": [
        "numpy.polynomial.polynomial.polyfromroots",
        "numpy.polynomial.tests.test_polynomial.trim",
        "numpy.linspace",
        "numpy.polynomial.polynomial.polyroots",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit": [
        "numpy.zeros_like",
        "numpy.testing.assert_equal",
        "numpy.linspace",
        "numpy.polynomial.polynomial.polyfit",
        "numpy.testing.assert_almost_equal",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.polynomial.polynomial.polyval",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f2"
    ],
    "numpy.polynomial.tests.test_polynomial.TestMisc.test_polytrim": [
        "numpy.polynomial.polyutils.trimcoef",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyline": [
        "numpy.polynomial.polynomial.polyline",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestStr.test_polynomial_str": [
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestStr.test_chebyshev_str": [
        "numpy.polynomial.chebyshev.Chebyshev",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestStr.test_legendre_str": [
        "numpy.polynomial.legendre.Legendre",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestStr.test_hermite_str": [
        "numpy.polynomial.hermite.Hermite",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestStr.test_hermiteE_str": [
        "numpy.polynomial.hermite_e.HermiteE",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestStr.test_laguerre_str": [
        "numpy.polynomial.laguerre.Laguerre",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestRepr.test_polynomial_str": [
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestRepr.test_chebyshev_str": [
        "numpy.polynomial.chebyshev.Chebyshev",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestRepr.test_legendre_repr": [
        "numpy.polynomial.legendre.Legendre",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestRepr.test_hermite_repr": [
        "numpy.polynomial.hermite.Hermite",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestRepr.test_hermiteE_repr": [
        "numpy.polynomial.hermite_e.HermiteE",
        "numpy.testing.assert_equal"
    ],
    "numpy.polynomial.tests.test_printing.TestRepr.test_laguerre_repr": [
        "numpy.polynomial.laguerre.Laguerre",
        "numpy.testing.assert_equal"
    ],
    "numpy.compat.py3k.asunicode": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.core.defchararray.decode",
        "numpy.random.bytes"
    ],
    "numpy.compat.py3k.asbytes": [
        "numpy.core.defchararray.chararray.encode",
        "numpy.random.bytes",
        "numpy.core.defchararray.encode"
    ],
    "numpy.compat.py3k.asstr": [
        "numpy.random.bytes"
    ],
    "numpy.compat.py3k.open_latin1": [
        "numpy.lib._datasource.open",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.compat.py3k.asunicode_nested": [
        "numpy.compat.py3k.asunicode"
    ],
    "numpy.compat.py3k.npy_load_module": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.compat._inspect.getargs": [
        "numpy.compat._inspect.iscode"
    ],
    "numpy.compat._inspect.getargspec": [
        "numpy.compat._inspect.getargs",
        "numpy.compat._inspect.ismethod",
        "numpy.compat._inspect.isfunction"
    ],
    "numpy.compat._inspect.getargvalues": [
        "numpy.compat._inspect.getargs"
    ],
    "numpy.compat._inspect.strseq": [
        "numpy.compat._inspect.joinseq"
    ],
    "numpy.compat._inspect.formatargspec": [
        "numpy.ma.append",
        "numpy.compat._inspect.joinseq",
        "numpy.compat._inspect.strseq",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.compat._inspect.formatargvalues": [
        "numpy.ma.append",
        "numpy.compat._inspect.joinseq",
        "numpy.compat._inspect.strseq",
        "numpy.append",
        "numpy.compat._inspect.formatargvalues.convert",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.compat.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.compat.tests.test_compat.test_isfileobj": [
        "numpy.testing.assert_",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.core.fromnumeric._wrapit": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ndarray",
        "numpy.core.numeric.asarray"
    ],
    "numpy.core.fromnumeric._wrapfunc": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.fromnumeric._wrapit"
    ],
    "numpy.core.fromnumeric._wrapreduction": [
        "numpy.ndarray",
        "numpy.lib.npyio.NpzFile.items"
    ],
    "numpy.core.fromnumeric.take": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.reshape": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.choose": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.repeat": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.swapaxes": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.transpose": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.partition": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedArray.partition",
        "numpy.core.defchararray.partition",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.core.fromnumeric.partition",
        "numpy.core.defchararray.chararray.partition",
        "numpy.partition",
        "numpy.matrixlib.defmatrix.matrix.flatten",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.fromnumeric.argpartition": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.sort": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.matrixlib.defmatrix.matrix.flatten",
        "numpy.ma.copy",
        "numpy.ma.core.sort",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.fromnumeric.argsort": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.argmax": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.argmin": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.searchsorted": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.resize": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.int",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.zeros",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.ma.zeros",
        "numpy.matlib.zeros",
        "numpy.subtract.reduce",
        "numpy.core.fromnumeric.reshape",
        "numpy.logical_xor.reduce",
        "numpy.core.fromnumeric.ravel",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.fromnumeric.squeeze": [
        "numpy.core.fromnumeric._wrapit"
    ],
    "numpy.core.fromnumeric.diagonal": [
        "numpy.matrix",
        "numpy.core.fromnumeric.diagonal",
        "numpy.diagonal"
    ],
    "numpy.core.fromnumeric.trace": [
        "numpy.trace",
        "numpy.matrix",
        "numpy.core.fromnumeric.trace",
        "numpy.ma.core.MaskedArray.trace"
    ],
    "numpy.core.fromnumeric.ravel": [
        "numpy.matrix",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel"
    ],
    "numpy.core.fromnumeric.nonzero": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.shape": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.core.fromnumeric.compress": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.clip": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.sum": [
        "numpy.ndarray.sum",
        "numpy.sum",
        "numpy.add",
        "numpy.core.fromnumeric._wrapreduction",
        "numpy.ma.sum",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.core.fromnumeric.any": [
        "numpy.logical_or",
        "numpy.core.fromnumeric._wrapreduction"
    ],
    "numpy.core.fromnumeric.all": [
        "numpy.core.fromnumeric._wrapreduction",
        "numpy.logical_and"
    ],
    "numpy.core.fromnumeric.cumsum": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.ptp": [
        "numpy.ndarray",
        "numpy.core._methods._ptp"
    ],
    "numpy.core.fromnumeric.amax": [
        "numpy.core.fromnumeric._wrapreduction",
        "numpy.maximum"
    ],
    "numpy.core.fromnumeric.amin": [
        "numpy.minimum",
        "numpy.core.fromnumeric._wrapreduction"
    ],
    "numpy.core.fromnumeric.prod": [
        "numpy.core.fromnumeric._wrapreduction",
        "numpy.multiply"
    ],
    "numpy.core.fromnumeric.cumprod": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.ndim": [
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.core.fromnumeric.size": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.core.fromnumeric.size",
        "numpy.size"
    ],
    "numpy.core.fromnumeric.around": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.round_": [
        "numpy.core.fromnumeric.around"
    ],
    "numpy.core.fromnumeric.mean": [
        "numpy.core._methods._mean",
        "numpy.ndarray",
        "numpy.core.tests.test_multiarray._mean"
    ],
    "numpy.core.fromnumeric.std": [
        "numpy.ndarray",
        "numpy.core.tests.test_multiarray._std",
        "numpy.core._methods._std"
    ],
    "numpy.core.fromnumeric.var": [
        "numpy.core.tests.test_multiarray._var",
        "numpy.core._methods._var",
        "numpy.ndarray"
    ],
    "numpy.core.fromnumeric.product": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.fromnumeric.prod"
    ],
    "numpy.core.fromnumeric.cumproduct": [
        "numpy.core.fromnumeric.cumprod",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.fromnumeric.sometrue": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.fromnumeric.any"
    ],
    "numpy.core.fromnumeric.alltrue": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.fromnumeric.all"
    ],
    "numpy.core.fromnumeric.rank": [
        "numpy.core.fromnumeric.ndim",
        "numpy._globals.VisibleDeprecationWarning"
    ],
    "numpy.core.einsumfunc._find_contraction": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.einsumfunc._optimal_path": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.core.einsumfunc._compute_size_by_dict",
        "numpy.core.einsumfunc._find_contraction",
        "numpy.ma.append",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.einsumfunc._greedy_path": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.core.einsumfunc._compute_size_by_dict",
        "numpy.core.einsumfunc._find_contraction",
        "numpy.ma.append",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.einsumfunc._parse_einsum_input": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.getlimits.iinfo.max",
        "numpy.shape",
        "numpy.ma.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.int",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.fromnumeric.ndim",
        "numpy.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.einsumfunc.einsum_path": [
        "numpy.core.einsumfunc._compute_size_by_dict",
        "numpy.core.einsumfunc._find_contraction",
        "numpy.core.einsumfunc._optimal_path",
        "numpy.core.einsumfunc._greedy_path",
        "numpy.core.fromnumeric.shape",
        "numpy.core.einsumfunc._parse_einsum_input",
        "numpy.core.einsumfunc._can_dot",
        "numpy.core.fromnumeric.sum",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.sum",
        "numpy.lib._datasource._FileOpeners.keys",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.ma.append",
        "numpy.min",
        "numpy.ma.sum",
        "numpy.lib.function_base.append",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.min",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.int",
        "numpy.ma.core.shape",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.append",
        "numpy.ma.core.append",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.core.einsumfunc.einsum": [
        "numpy.core.einsumfunc.einsum_path",
        "numpy.core.defchararray.find",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.find",
        "numpy.core.numeric.tensordot",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.fromnumeric.any",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.core.defchararray.chararray.split",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.lib.shape_base.split",
        "numpy.split"
    ],
    "numpy.core.setup_common.get_api_versions": [
        "numpy.core.code_generators.genapi.fullapi_hash",
        "numpy.lib.function_base.insert",
        "numpy.core.code_generators.genapi.get_versions_hash",
        "numpy.insert"
    ],
    "numpy.core.setup_common.check_api_version": [
        "numpy.core.setup_common.get_api_versions",
        "numpy.core.setup_common.MismatchCAPIWarning"
    ],
    "numpy.core.setup_common.check_long_double_representation": [
        "numpy.distutils.misc_util.mingw32",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.startswith",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.setup_common.pyod",
        "numpy.core.setup_common.long_double_representation",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup_common.pyod._pyod2": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup_common.pyod._pyod3": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup_common.pyod": [
        "numpy.core.setup_common.pyod._pyod2",
        "numpy.core.setup_common.pyod._pyod3"
    ],
    "numpy.core.setup_common.long_double_representation": [
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.defchararray._use_unicode": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.defchararray._to_string_or_unicode_array": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray._clean_args": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.defchararray.add": [
        "numpy.core.defchararray._get_num_chars",
        "numpy.asarray",
        "numpy.core.defchararray._use_unicode"
    ],
    "numpy.core.defchararray.multiply": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.asarray",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.core.defchararray._get_num_chars"
    ],
    "numpy.core.defchararray.mod": [
        "numpy.core.defchararray._to_string_or_unicode_array"
    ],
    "numpy.core.defchararray.capitalize": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray.center": [
        "numpy.asarray",
        "numpy.issubdtype",
        "numpy.string_"
    ],
    "numpy.core.defchararray.count": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.decode": [
        "numpy.core.defchararray._to_string_or_unicode_array",
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.encode": [
        "numpy.core.defchararray._to_string_or_unicode_array",
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.endswith": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.expandtabs": [
        "numpy.core.defchararray._to_string_or_unicode_array"
    ],
    "numpy.core.defchararray.find": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.index": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.join": [
        "numpy.core.defchararray._to_string_or_unicode_array"
    ],
    "numpy.core.defchararray.ljust": [
        "numpy.asarray",
        "numpy.issubdtype",
        "numpy.string_"
    ],
    "numpy.core.defchararray.lower": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray.lstrip": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray.partition": [
        "numpy.core.defchararray._to_string_or_unicode_array"
    ],
    "numpy.core.defchararray.replace": [
        "numpy.core.defchararray._to_string_or_unicode_array",
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.rfind": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.rindex": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.rjust": [
        "numpy.asarray",
        "numpy.issubdtype",
        "numpy.string_"
    ],
    "numpy.core.defchararray.rpartition": [
        "numpy.core.defchararray._to_string_or_unicode_array"
    ],
    "numpy.core.defchararray.rsplit": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.rstrip": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray.split": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.splitlines": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.startswith": [
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.strip": [
        "numpy.core.defchararray._clean_args",
        "numpy.asarray"
    ],
    "numpy.core.defchararray.swapcase": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray.title": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray.translate": [
        "numpy.asarray",
        "numpy.core.defchararray._clean_args"
    ],
    "numpy.core.defchararray.upper": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray.zfill": [
        "numpy.asarray"
    ],
    "numpy.core.defchararray.isnumeric": [
        "numpy.core.defchararray._use_unicode"
    ],
    "numpy.core.defchararray.isdecimal": [
        "numpy.core.defchararray._use_unicode"
    ],
    "numpy.core.defchararray.chararray.__eq__": [
        "numpy.core.defchararray.equal"
    ],
    "numpy.core.defchararray.chararray.__ne__": [
        "numpy.core.defchararray.not_equal"
    ],
    "numpy.core.defchararray.chararray.__ge__": [
        "numpy.core.defchararray.greater_equal"
    ],
    "numpy.core.defchararray.chararray.__le__": [
        "numpy.core.defchararray.less_equal"
    ],
    "numpy.core.defchararray.chararray.__gt__": [
        "numpy.core.defchararray.greater"
    ],
    "numpy.core.defchararray.chararray.__lt__": [
        "numpy.core.defchararray.less"
    ],
    "numpy.core.defchararray.chararray.__add__": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.add"
    ],
    "numpy.core.defchararray.chararray.__radd__": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.add",
        "numpy.asarray"
    ],
    "numpy.core.defchararray.chararray.__mul__": [
        "numpy.core.defchararray.multiply",
        "numpy.core.defchararray.asarray"
    ],
    "numpy.core.defchararray.chararray.__rmul__": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.multiply"
    ],
    "numpy.core.defchararray.chararray.__mod__": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.mod"
    ],
    "numpy.core.defchararray.chararray.argsort": [
        "numpy.core.defchararray.chararray.argsort",
        "numpy.argsort",
        "numpy.ma.core.argsort",
        "numpy.core.fromnumeric.argsort",
        "numpy.ma.core.MaskedArray.argsort"
    ],
    "numpy.core.defchararray.chararray.capitalize": [
        "numpy.core.defchararray.chararray.capitalize",
        "numpy.core.defchararray.asarray"
    ],
    "numpy.core.defchararray.chararray.center": [
        "numpy.core.defchararray.chararray.center",
        "numpy.core.defchararray.asarray"
    ],
    "numpy.core.defchararray.chararray.count": [
        "numpy.core.defchararray.chararray.count"
    ],
    "numpy.core.defchararray.chararray.decode": [
        "numpy.core.defchararray.chararray.decode"
    ],
    "numpy.core.defchararray.chararray.encode": [
        "numpy.core.defchararray.chararray.encode"
    ],
    "numpy.core.defchararray.chararray.endswith": [
        "numpy.core.defchararray.chararray.endswith"
    ],
    "numpy.core.defchararray.chararray.expandtabs": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.expandtabs"
    ],
    "numpy.core.defchararray.chararray.find": [
        "numpy.core.defchararray.chararray.find"
    ],
    "numpy.core.defchararray.chararray.index": [
        "numpy.core.defchararray.chararray.index"
    ],
    "numpy.core.defchararray.chararray.isalnum": [
        "numpy.core.defchararray.chararray.isalnum"
    ],
    "numpy.core.defchararray.chararray.isalpha": [
        "numpy.core.defchararray.chararray.isalpha"
    ],
    "numpy.core.defchararray.chararray.isdigit": [
        "numpy.core.defchararray.chararray.isdigit"
    ],
    "numpy.core.defchararray.chararray.islower": [
        "numpy.core.defchararray.chararray.islower"
    ],
    "numpy.core.defchararray.chararray.isspace": [
        "numpy.core.defchararray.chararray.isspace"
    ],
    "numpy.core.defchararray.chararray.istitle": [
        "numpy.core.defchararray.chararray.istitle"
    ],
    "numpy.core.defchararray.chararray.isupper": [
        "numpy.core.defchararray.chararray.isupper"
    ],
    "numpy.core.defchararray.chararray.join": [
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.core.defchararray.chararray.ljust": [
        "numpy.core.defchararray.chararray.ljust",
        "numpy.core.defchararray.asarray"
    ],
    "numpy.core.defchararray.chararray.lower": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.lower"
    ],
    "numpy.core.defchararray.chararray.lstrip": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.lstrip"
    ],
    "numpy.core.defchararray.chararray.partition": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.partition"
    ],
    "numpy.core.defchararray.chararray.replace": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.asarray"
    ],
    "numpy.core.defchararray.chararray.rfind": [
        "numpy.core.defchararray.chararray.rfind"
    ],
    "numpy.core.defchararray.chararray.rindex": [
        "numpy.core.defchararray.chararray.rindex"
    ],
    "numpy.core.defchararray.chararray.rjust": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.rjust"
    ],
    "numpy.core.defchararray.chararray.rpartition": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.rpartition"
    ],
    "numpy.core.defchararray.chararray.rsplit": [
        "numpy.core.defchararray.chararray.rsplit"
    ],
    "numpy.core.defchararray.chararray.rstrip": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.rstrip"
    ],
    "numpy.core.defchararray.chararray.split": [
        "numpy.core.defchararray.chararray.split"
    ],
    "numpy.core.defchararray.chararray.splitlines": [
        "numpy.core.defchararray.chararray.splitlines"
    ],
    "numpy.core.defchararray.chararray.startswith": [
        "numpy.core.defchararray.chararray.startswith"
    ],
    "numpy.core.defchararray.chararray.strip": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.strip"
    ],
    "numpy.core.defchararray.chararray.swapcase": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.swapcase"
    ],
    "numpy.core.defchararray.chararray.title": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.title"
    ],
    "numpy.core.defchararray.chararray.translate": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.translate"
    ],
    "numpy.core.defchararray.chararray.upper": [
        "numpy.core.defchararray.asarray",
        "numpy.core.defchararray.chararray.upper"
    ],
    "numpy.core.defchararray.chararray.zfill": [
        "numpy.core.defchararray.chararray.zfill",
        "numpy.core.defchararray.asarray"
    ],
    "numpy.core.defchararray.chararray.isnumeric": [
        "numpy.core.defchararray.chararray.isnumeric"
    ],
    "numpy.core.defchararray.chararray.isdecimal": [
        "numpy.core.defchararray.chararray.isdecimal"
    ],
    "numpy.core.defchararray.array": [
        "numpy.asarray",
        "numpy.core.defchararray.chararray"
    ],
    "numpy.core.defchararray.asarray": [
        "numpy.core.defchararray.array"
    ],
    "numpy.core.shape_base.atleast_1d": [
        "numpy.core.numeric.asanyarray",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.shape_base.atleast_2d": [
        "numpy.core.numeric.asanyarray",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.shape_base.atleast_3d": [
        "numpy.core.numeric.asanyarray",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.shape_base.vstack": [
        "numpy.ma.concatenate",
        "numpy.concatenate",
        "numpy.ma.core.concatenate"
    ],
    "numpy.core.shape_base.hstack": [
        "numpy.ma.core.concatenate",
        "numpy.ma.concatenate",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.concatenate"
    ],
    "numpy.core.shape_base.stack": [
        "numpy.ma.core.concatenate",
        "numpy.ma.concatenate",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.concatenate"
    ],
    "numpy.core.shape_base._block_check_depths_match": [
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "npy_tempita.compat3.next",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.core.shape_base._block_check_depths_match.format_index"
    ],
    "numpy.core.shape_base._block.block_recursion": [
        "numpy.ma.concatenate",
        "numpy.core.shape_base._block.atleast_nd",
        "numpy.concatenate",
        "numpy.ma.core.concatenate"
    ],
    "numpy.core.shape_base._block": [
        "numpy.core.shape_base._block.block_recursion"
    ],
    "numpy.core.shape_base.block": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.shape_base._block_check_depths_match",
        "numpy.core.shape_base._block",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.function_base._index_deprecate": [
        "numpy.int"
    ],
    "numpy.core.function_base.linspace": [
        "numpy.core.function_base._index_deprecate",
        "numpy.core.numeric.asanyarray",
        "numpy.arange",
        "numpy.f2py.auxfuncs.isscalar",
        "numpy.core.numeric.isscalar",
        "numpy.isscalar",
        "numpy.ma.arange"
    ],
    "numpy.core.function_base.logspace": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.core.power",
        "numpy.lib.scimath.power",
        "numpy.core.function_base.linspace",
        "numpy.power",
        "numpy.random.power"
    ],
    "numpy.core.function_base.geomspace": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.log10",
        "numpy.issubdtype",
        "numpy.lib.scimath.log10",
        "numpy.core.numerictypes.issubdtype",
        "numpy.core.function_base.logspace",
        "numpy.sign"
    ],
    "numpy.core.arrayprint.set_printoptions": [
        "numpy.lib._iotools.StringConverter.update",
        "numpy.core.arrayprint._make_options_dict"
    ],
    "numpy.core.arrayprint.get_printoptions": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.core.arrayprint.printoptions": [
        "numpy.set_printoptions",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.get_printoptions"
    ],
    "numpy.core.arrayprint._leading_trailing": [
        "numpy.core.arrayprint._leading_trailing"
    ],
    "numpy.core.arrayprint._get_formatdict": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.core.arrayprint._get_formatdict.indirect",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.core.arrayprint._get_format_function": [
        "numpy.unicode_",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.object_",
        "numpy.testing._private.noseclasses.NumpyDoctest.options",
        "numpy.bool_",
        "numpy.void",
        "numpy.core.arrayprint.StructuredVoidFormat.from_data",
        "numpy.testing._private.noseclasses.Unplugger.options",
        "numpy.core.arrayprint._get_formatdict",
        "numpy.testing._private.noseclasses.KnownFailurePlugin.options",
        "numpy.string_"
    ],
    "numpy.core.arrayprint._recursive_guard.decorating_function": [
        "numpy.core.arrayprint._recursive_guard.decorating_function.wrapper"
    ],
    "numpy.core.arrayprint._recursive_guard.decorating_function.wrapper": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.add",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "clapack_scrub.LineQueue.add"
    ],
    "numpy.core.arrayprint._recursive_guard": [
        "numpy.core.arrayprint._recursive_guard.decorating_function"
    ],
    "numpy.core.arrayprint._array2string": [
        "numpy.core.arrayprint._leading_trailing",
        "numpy.core.arrayprint._formatArray",
        "numpy.core.arrayprint._get_format_function",
        "numpy.core.numeric.asarray"
    ],
    "numpy.core.arrayprint.array2string": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.core.arrayprint._make_options_dict",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.core.arrayprint._array2string",
        "numpy.copy"
    ],
    "numpy.core.arrayprint._formatArray.recurser": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.arrayprint._extendLine",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.arrayprint._formatArray.recurser",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.arrayprint._formatArray": [
        "numpy.core.arrayprint._formatArray.recurser"
    ],
    "numpy.core.arrayprint.FloatingFormat.__init__": [
        "numpy.core.arrayprint.FloatingFormat.fillFormat",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.core.arrayprint._none_or_positive_arg"
    ],
    "numpy.core.arrayprint.FloatingFormat.fillFormat": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.numeric.errstate.__init__",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.core.fromnumeric.any",
        "numpy.core.numeric.errstate",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.core.numeric.errstate.__enter__",
        "numpy.core.numeric.errstate.__exit__",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.signbit"
    ],
    "numpy.core.arrayprint.FloatingFormat.__call__": [
        "numpy.isfinite",
        "numpy.lib.arraysetops.unique",
        "numpy.core.numeric.errstate.__init__",
        "numpy.unique",
        "numpy.lib.function_base.unique",
        "numpy.ma.extras.unique",
        "numpy.core.numeric.errstate",
        "numpy.core.numeric.errstate.__enter__",
        "numpy.ma.core.MaskedArray.max",
        "numpy.polynomial._polybase.ABCPolyBase.trim",
        "numpy.core.numeric.errstate.__exit__",
        "numpy.polynomial.tests.test_laguerre.trim",
        "numpy.polynomial.tests.test_hermite_e.trim",
        "numpy.polynomial.tests.test_hermite.trim",
        "numpy.ma.core.max",
        "numpy.isnan",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.polynomial.tests.test_polynomial.trim",
        "numpy.polynomial.tests.test_legendre.trim",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.polynomial.tests.test_chebyshev.trim"
    ],
    "numpy.core.arrayprint.FloatFormat": [
        "numpy.core.arrayprint.FloatingFormat"
    ],
    "numpy.core.arrayprint.FloatFormat.__init__": [
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.arrayprint.LongFloatFormat": [
        "numpy.core.arrayprint.FloatingFormat"
    ],
    "numpy.core.arrayprint.LongFloatFormat.__init__": [
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.arrayprint.format_float_scientific": [
        "numpy.core.arrayprint._none_or_positive_arg"
    ],
    "numpy.core.arrayprint.format_float_positional": [
        "numpy.core.arrayprint._none_or_positive_arg"
    ],
    "numpy.core.arrayprint.IntegerFormat.__init__": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.arrayprint.ComplexFloatingFormat.__init__": [
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.core.arrayprint.FloatingFormat"
    ],
    "numpy.core.arrayprint.ComplexFloatingFormat.__call__": [
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.core.arrayprint.FloatingFormat",
        "numpy.core.defchararray.rstrip"
    ],
    "numpy.core.arrayprint.ComplexFormat": [
        "numpy.core.arrayprint.ComplexFloatingFormat"
    ],
    "numpy.core.arrayprint.ComplexFormat.__init__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__"
    ],
    "numpy.core.arrayprint.LongComplexFormat": [
        "numpy.core.arrayprint.ComplexFloatingFormat"
    ],
    "numpy.core.arrayprint.LongComplexFormat.__init__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__"
    ],
    "numpy.core.arrayprint._TimelikeFormat.__init__": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.core.arrayprint._TimelikeFormat._format_non_nat"
    ],
    "numpy.core.arrayprint._TimelikeFormat.__call__": [
        "numpy.core.arrayprint._TimelikeFormat._format_non_nat"
    ],
    "numpy.core.arrayprint.DatetimeFormat": [
        "numpy.core.arrayprint._TimelikeFormat"
    ],
    "numpy.core.arrayprint.DatetimeFormat.__init__": [
        "numpy.core.arrayprint._TimelikeFormat.__init__"
    ],
    "numpy.core.arrayprint.DatetimeFormat.__call__": [
        "numpy.core.arrayprint.DatetimeFormat._format_non_nat",
        "numpy.core.arrayprint._TimelikeFormat.__call__"
    ],
    "numpy.core.arrayprint.TimedeltaFormat": [
        "numpy.core.arrayprint._TimelikeFormat"
    ],
    "numpy.core.arrayprint.StructuredVoidFormat.from_data": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing._private.noseclasses.NumpyDoctest.options",
        "numpy.core.arrayprint.SubArrayFormat",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.testing._private.noseclasses.Unplugger.options",
        "numpy.testing._private.noseclasses.KnownFailurePlugin.options",
        "numpy.core.arrayprint._get_format_function",
        "numpy.ma.core.shape"
    ],
    "numpy.core.arrayprint.StructureFormat": [
        "numpy.core.arrayprint.StructuredVoidFormat"
    ],
    "numpy.core.arrayprint.StructureFormat.__init__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__"
    ],
    "numpy.core.arrayprint._void_scalar_repr": [
        "numpy.core.arrayprint.StructuredVoidFormat.from_data"
    ],
    "numpy.core.arrayprint.dtype_is_implied": [
        "numpy.dtype"
    ],
    "numpy.core.arrayprint.dtype_short_repr": [
        "numpy.core.defchararray.isalpha",
        "numpy.core.defchararray.chararray.isalpha"
    ],
    "numpy.core.arrayprint.array_repr": [
        "numpy.core.arrayprint.array2string",
        "numpy.core.arrayprint.dtype_is_implied",
        "numpy.core.arrayprint.dtype_short_repr"
    ],
    "numpy.core.arrayprint.array_str": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__",
        "numpy.lib.npyio.NpzFile.__getitem__",
        "numpy.core.records.record.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__",
        "numpy.lib.polynomial.poly1d.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__getitem__",
        "numpy.core.memmap.memmap.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__",
        "numpy.lib.user_array.container.__getitem__",
        "numpy.core.numerictypes._typedict.__getitem__",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__",
        "numpy.ndarray.__getitem__",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__",
        "numpy.core.defchararray.chararray.__getitem__",
        "numpy.lib.index_tricks.nd_grid.__getitem__",
        "numpy.core.arrayprint.array2string",
        "numpy.ma.mrecords.MaskedRecords.__getitem__",
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__",
        "npy_tempita.bunch.__getitem__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__",
        "numpy.matrixlib.defmatrix.matrix.__getitem__",
        "numpy.ma.core.MaskedIterator.__getitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__",
        "numpy.lib.index_tricks.IndexExpression.__getitem__",
        "numpy.core.arrayprint._recursive_guard",
        "numpy.lib._datasource._FileOpeners.__getitem__"
    ],
    "numpy.core.arrayprint.set_string_function": [
        "numpy.core.arrayprint.array_repr",
        "numpy.core.arrayprint.set_string_function",
        "numpy.set_string_function",
        "numpy.core.arrayprint.array_str"
    ],
    "numpy.core.numeric.loads": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.numeric.zeros_like": [
        "numpy.copyto"
    ],
    "numpy.core.numeric.ones": [
        "numpy.copyto"
    ],
    "numpy.core.numeric.ones_like": [
        "numpy.copyto"
    ],
    "numpy.core.numeric.full": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.copyto"
    ],
    "numpy.core.numeric.full_like": [
        "numpy.copyto"
    ],
    "numpy.core.numeric.count_nonzero": [
        "numpy.core.numeric.asanyarray",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.count_nonzero",
        "numpy.issubdtype",
        "numpy.intp",
        "numpy.bool_",
        "numpy.core.numeric.count_nonzero"
    ],
    "numpy.core.numeric.require": [
        "numpy.core.numeric.asanyarray",
        "numpy.lib.polynomial.poly1d.order"
    ],
    "numpy.core.numeric.argwhere": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.nonzero",
        "numpy.ma.nonzero",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.core.fromnumeric.nonzero",
        "numpy.core.fromnumeric.transpose"
    ],
    "numpy.core.numeric.flatnonzero": [
        "numpy.ravel",
        "numpy.nonzero"
    ],
    "numpy.core.numeric.correlate": [
        "numpy.core.numeric._mode_from_name"
    ],
    "numpy.core.numeric.convolve": [
        "numpy.core.numeric._mode_from_name",
        "numpy.correlate",
        "numpy.core.numeric.correlate",
        "numpy.ma.core.correlate"
    ],
    "numpy.core.numeric.outer": [
        "numpy.core.numeric.asarray"
    ],
    "numpy.core.numeric.tensordot": [
        "numpy.int",
        "numpy.core.numeric.asarray",
        "numpy.equal",
        "numpy.core.defchararray.equal"
    ],
    "numpy.core.numeric.roll": [
        "numpy.core.numeric.asanyarray",
        "numpy.ma.core.reshape",
        "numpy.core.numeric.normalize_axis_tuple",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.numeric.rollaxis": [
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.function_base.insert",
        "numpy.insert",
        "numpy.core._internal.AxisError"
    ],
    "numpy.core.numeric.moveaxis": [
        "numpy.lib.function_base.insert",
        "numpy.insert",
        "numpy.core.numeric.asarray",
        "numpy.core.numeric.normalize_axis_tuple",
        "numpy.lib.polynomial.poly1d.order"
    ],
    "numpy.core.numeric._move_axis_to_0": [
        "numpy.core.numeric.moveaxis"
    ],
    "numpy.core.numeric.cross": [
        "numpy.negative",
        "numpy.core.numeric.moveaxis",
        "numpy.core.numeric.asarray"
    ],
    "numpy.core.numeric.indices": [
        "numpy.int",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.numeric.fromfunction": [
        "numpy.core.numeric.indices"
    ],
    "numpy.core.numeric.binary_repr": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.core.numeric.binary_repr.warn_if_insufficient",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.defchararray.zfill",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.core.defchararray.chararray.zfill"
    ],
    "numpy.core.numeric.base_repr": [
        "numpy.abs",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.numeric.load": [
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.core.numeric.identity": [
        "numpy.eye",
        "numpy"
    ],
    "numpy.core.numeric.allclose": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.core.numeric.isclose",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.core.numeric.isclose.within_tol": [
        "numpy.core.defchararray.less_equal",
        "numpy.core.numeric.errstate.__enter__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.core.numeric.errstate.__exit__",
        "numpy.core.numeric.errstate",
        "numpy.abs",
        "numpy.less_equal"
    ],
    "numpy.core.numeric.isclose": [
        "numpy.isfinite",
        "numpy.core.numeric.isclose.within_tol",
        "numpy.core.numeric.ones_like",
        "numpy.core.fromnumeric.all",
        "numpy.core.numeric.asanyarray",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.result_type",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.isnan",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.core.numeric.zeros_like"
    ],
    "numpy.core.numeric.array_equal": [
        "numpy.core.fromnumeric.all",
        "numpy.core.numeric.asarray",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.core.numeric.array_equiv": [
        "numpy.core.fromnumeric.all",
        "numpy.core.numeric.asarray",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.broadcast",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.core.numeric.seterr": [
        "numpy.seterrobj",
        "numpy.geterrobj",
        "numpy.core.numeric.geterr"
    ],
    "numpy.core.numeric.geterr": [
        "numpy.geterrobj"
    ],
    "numpy.core.numeric.setbufsize": [
        "numpy.seterrobj",
        "numpy.core.numeric.getbufsize",
        "numpy.geterrobj"
    ],
    "numpy.core.numeric.getbufsize": [
        "numpy.geterrobj"
    ],
    "numpy.core.numeric.seterrcall": [
        "numpy.seterrobj",
        "numpy.core.numeric.geterrcall",
        "numpy.geterrobj"
    ],
    "numpy.core.numeric.geterrcall": [
        "numpy.geterrobj"
    ],
    "numpy.core.numeric.errstate.__init__": [
        "numpy.core.numeric._unspecified"
    ],
    "numpy.core.numeric.errstate.__enter__": [
        "numpy.core.numeric._unspecified",
        "numpy.core.numeric.seterr",
        "numpy.core.numeric.seterrcall"
    ],
    "numpy.core.numeric.errstate.__exit__": [
        "numpy.core.numeric._unspecified",
        "numpy.core.numeric.seterr",
        "numpy.core.numeric.seterrcall"
    ],
    "numpy.core.numeric._setdef": [
        "numpy.seterrobj"
    ],
    "numpy.core.numeric.extend_all": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core._internal._makenames_list": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.ma.append",
        "numpy.ma.core.sort",
        "numpy.append",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core._internal._usefields": [
        "numpy.core._internal._makenames_list"
    ],
    "numpy.core._internal._array_descr": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.core._internal._array_descr",
        "numpy.ma.append",
        "numpy.ma.copy",
        "numpy.append",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core._internal._commastring": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.append"
    ],
    "numpy.core._internal._getintp_ctype": [
        "numpy.core._internal.dummy_ctype",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.intp"
    ],
    "numpy.core._internal._ctypes": [
        "numpy.core._internal._ctypes.get_data",
        "numpy.core._internal._ctypes.get_shape",
        "numpy.core._internal._ctypes.get_strides",
        "numpy.core._internal._ctypes.get_as_parameter"
    ],
    "numpy.core._internal._ctypes.__init__": [
        "numpy.core._internal._missing_ctypes"
    ],
    "numpy.core._internal._ctypes.data_as": [
        "numpy.core._internal._missing_ctypes.cast"
    ],
    "numpy.core._internal._ctypes.get_shape": [
        "numpy.core._internal._getintp_ctype",
        "numpy.core._internal._ctypes.shape_as"
    ],
    "numpy.core._internal._ctypes.get_strides": [
        "numpy.core._internal._ctypes.strides_as",
        "numpy.core._internal._getintp_ctype"
    ],
    "numpy.core._internal._ctypes.get_as_parameter": [
        "numpy.core._internal._missing_ctypes.c_void_p"
    ],
    "numpy.core._internal._newnames": [
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "clapack_scrub.LineQueue.add"
    ],
    "numpy.core._internal._dtype_from_pep3118.Stream": [
        "numpy.core._internal._dtype_from_pep3118.Stream.__bool__"
    ],
    "numpy.core._internal._dtype_from_pep3118.Stream.consume": [
        "numpy.core._internal._dtype_from_pep3118.Stream.advance"
    ],
    "numpy.core._internal._dtype_from_pep3118.Stream.consume_until": [
        "numpy.core._internal._dtype_from_pep3118.Stream.advance"
    ],
    "numpy.core._internal._dtype_from_pep3118": [
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "numpy.core._internal.__dtype_from_pep3118",
        "numpy.core._internal._dtype_from_pep3118.Stream"
    ],
    "numpy.core._internal.__dtype_from_pep3118": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.append",
        "numpy.core._internal._fix_names",
        "numpy.core._internal._add_trailing_padding",
        "numpy.core._internal._prod",
        "numpy.core._internal._lcm",
        "numpy.append",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.core._internal.__dtype_from_pep3118",
        "numpy.ma.core.append"
    ],
    "numpy.core._internal._lcm": [
        "numpy.core._internal._gcd"
    ],
    "numpy.core._internal.array_ufunc_errmsg_formatter": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.core.memmap.memmap.__new__": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.memmap.memmap.flush",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.distutils.command.config.GrabStdout.flush",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.core.memmap.memmap.__array_finalize__": [
        "numpy.may_share_memory"
    ],
    "numpy.core.memmap.memmap.flush": [
        "numpy.distutils.command.config.GrabStdout.flush",
        "numpy.core.memmap.memmap.flush"
    ],
    "numpy.core.memmap.memmap.__array_wrap__": [
        "numpy.ndarray"
    ],
    "numpy.core.getlimits.MachArLike.__init__": [
        "numpy.int",
        "numpy.lib._iotools.StringConverter.update"
    ],
    "numpy.core.getlimits._get_machar": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.core.MaskedArray.tobytes",
        "numpy.longdouble",
        "numpy.core.getlimits._discovered_machar",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.core.getlimits._discovered_machar": [
        "numpy.core.machar.MachAr",
        "numpy.core.machar.MachAr.__init__"
    ],
    "numpy.core.getlimits.finfo.__new__": [
        "numpy.core.getlimits.finfo._init",
        "numpy.f2py.tests.test_array_from_pyobj.Type._init",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.core.numerictypes.obj2sctype",
        "numpy.ma.append",
        "numpy.lib.function_base.append",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.obj2sctype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.getlimits.finfo._init": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.dtype",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.strip",
        "numpy.core.getlimits._get_machar"
    ],
    "numpy.core.getlimits.finfo.__repr__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.getlimits.iinfo": [
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max"
    ],
    "numpy.core.getlimits.iinfo.__init__": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.getlimits.iinfo.min": [
        "numpy.int"
    ],
    "numpy.core.getlimits.iinfo.max": [
        "numpy.int"
    ],
    "numpy.core.getlimits.iinfo.__str__": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.getlimits.iinfo.__repr__": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core._ufunc_reduce": [
        "numpy.core._ufunc_reconstruct"
    ],
    "numpy.core.machar.MachAr.__init__": [
        "numpy.int",
        "numpy.core.numeric.errstate.__enter__",
        "numpy.core.machar.MachAr._do_init",
        "numpy.core.numeric.errstate.__init__",
        "numpy.core.numeric.errstate.__exit__",
        "numpy.core.numeric.errstate"
    ],
    "numpy.core.machar.MachAr._do_init": [
        "numpy.core.fromnumeric.any",
        "numpy.int",
        "numpy.abs"
    ],
    "numpy.core.numerictypes.english_capitalize": [
        "numpy.core.numerictypes.english_upper"
    ],
    "numpy.core.numerictypes.bitname": [
        "numpy.core.numerictypes.english_upper",
        "numpy.core.numerictypes._evalname"
    ],
    "numpy.core.numerictypes._add_types": [
        "numpy.core.numerictypes.english_lower"
    ],
    "numpy.core.numerictypes._add_aliases": [
        "numpy.core.numerictypes.english_lower",
        "numpy.core.numerictypes.bitname",
        "numpy.core.numerictypes.english_capitalize"
    ],
    "numpy.core.numerictypes._add_integer_aliases": [
        "numpy.core._internal._ctypes",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.core.numerictypes._set_up_aliases": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.numerictypes._add_array_type": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.numerictypes._set_array_types": [
        "numpy.lib.function_base.insert",
        "numpy.insert",
        "numpy.core.numerictypes._add_array_type"
    ],
    "numpy.core.numerictypes.maximum_sctype": [
        "numpy.core.numerictypes.obj2sctype",
        "numpy.core.numerictypes._evalname"
    ],
    "numpy.core.numerictypes.issctype": [
        "numpy.object_",
        "numpy.core.numerictypes.obj2sctype"
    ],
    "numpy.core.numerictypes.issubsctype": [
        "numpy.core.numerictypes.obj2sctype"
    ],
    "numpy.core.numerictypes.issubdtype": [
        "numpy.core.numerictypes.issubdtype.type_repr",
        "numpy.core.numerictypes.issubclass_"
    ],
    "numpy.core.numerictypes._typedict.__getitem__": [
        "numpy.core.numerictypes._typedict.__getitem__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__",
        "numpy.lib.npyio.NpzFile.__getitem__",
        "npy_tempita.bunch.__getitem__",
        "numpy.lib.index_tricks.nd_grid.__getitem__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__",
        "numpy.matrixlib.defmatrix.matrix.__getitem__",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__",
        "numpy.ndarray.__getitem__",
        "numpy.core.records.record.__getitem__",
        "numpy.lib._datasource._FileOpeners.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__getitem__",
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__",
        "numpy.lib.polynomial.poly1d.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__",
        "numpy.ma.core.MaskedIterator.__getitem__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__getitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__",
        "numpy.core.memmap.memmap.__getitem__",
        "numpy.lib.index_tricks.IndexExpression.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__",
        "numpy.lib.user_array.container.__getitem__",
        "numpy.core.numerictypes.obj2sctype",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__",
        "numpy.core.defchararray.chararray.__getitem__"
    ],
    "numpy.core.numerictypes._construct_lookups": [
        "numpy.core.numerictypes._typedict"
    ],
    "numpy.core.numerictypes.sctype2char": [
        "numpy.core.numerictypes.obj2sctype"
    ],
    "numpy.core.numerictypes._find_common_coerce": [
        "numpy.char.index",
        "numpy.core.numerictypes._can_coerce_all",
        "numpy.core.defchararray.chararray.index",
        "npy_tempita._looper.loop_pos.index",
        "numpy.core.defchararray.index"
    ],
    "numpy.core.numerictypes._register_types": [
        "npy_tempita._looper.loop_pos.number"
    ],
    "numpy.core.numerictypes.find_common_type": [
        "numpy.char.index",
        "numpy.core.numerictypes._can_coerce_all",
        "numpy.core.defchararray.chararray.index",
        "numpy.core.numerictypes._find_common_coerce",
        "npy_tempita._looper.loop_pos.index",
        "numpy.core.defchararray.index"
    ],
    "numpy.core._methods._amax": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core._methods._amin": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core._methods._sum": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core._methods._prod": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core._methods._any": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core._methods._all": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core._methods._mean": [
        "numpy.core._methods._count_reduce_items",
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.core.numeric.asanyarray",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core._methods._var": [
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.core.numeric.asanyarray",
        "numpy.ma.core.MaskedArray.max",
        "numpy.logical_xor.reduce",
        "numpy.multiply.reduce",
        "numpy.lib.type_check.real",
        "numpy.real",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.core.getlimits.iinfo.max",
        "numpy.core._methods._count_reduce_items",
        "numpy.minimum.reduce",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core._methods._std": [
        "numpy.core._methods._var"
    ],
    "numpy.core._methods._ptp": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.records.find_duplicate": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.records.format_parser.__init__": [
        "numpy.core.records.format_parser._setfieldnames",
        "numpy.core.records.format_parser._createdescr",
        "numpy.core.records.format_parser._parseFormats"
    ],
    "numpy.core.records.format_parser._parseFormats": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.records.format_parser._setfieldnames": [
        "numpy.core.records.find_duplicate"
    ],
    "numpy.core.records.format_parser._createdescr": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.records.record": [
        "numpy.void"
    ],
    "numpy.core.records.record.__repr__": [
        "numpy.core.arrayprint.get_printoptions",
        "numpy.core.records.record.__str__"
    ],
    "numpy.core.records.record.__str__": [
        "numpy.core.arrayprint.get_printoptions",
        "npy_tempita._looper.loop_pos.item"
    ],
    "numpy.core.records.record.__getattribute__": [
        "numpy.core.records.record.__getattribute__",
        "numpy.core.records.recarray.__getattribute__",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.__getattribute__",
        "numpy.__getattribute__",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.mrecords.MaskedRecords.__getattribute__",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.lib.npyio.BagObj.__getattribute__"
    ],
    "numpy.core.records.record.__setattr__": [
        "numpy.lib.user_array.container.__setattr__",
        "numpy.core.records.record.__setattr__",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.records.recarray.__setattr__",
        "numpy.ma.core.MaskedArray.__setattr__",
        "numpy.ma.mrecords.MaskedRecords.__setattr__",
        "npy_tempita.bunch.__setattr__",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.core.records.record.__getitem__": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__",
        "numpy.lib.npyio.NpzFile.__getitem__",
        "numpy.core.records.record.__getitem__",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__",
        "numpy.lib.polynomial.poly1d.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__getitem__",
        "numpy.core.memmap.memmap.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__",
        "numpy.lib.user_array.container.__getitem__",
        "numpy.core.numerictypes._typedict.__getitem__",
        "numpy.ma.masked.view",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__",
        "numpy.ndarray.__getitem__",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__",
        "numpy.core.defchararray.chararray.__getitem__",
        "numpy.lib.index_tricks.nd_grid.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.__getitem__",
        "numpy.void",
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.view",
        "npy_tempita.bunch.__getitem__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__",
        "numpy.matrixlib.defmatrix.matrix.__getitem__",
        "numpy.lib._datasource._FileOpeners.__getitem__",
        "numpy.ma.core.MaskedIterator.__getitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__",
        "numpy.lib.index_tricks.IndexExpression.__getitem__"
    ],
    "numpy.core.records.record.pprint": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.append",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.records.recarray": [
        "numpy.ndarray"
    ],
    "numpy.core.records.recarray.__new__": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.ma.MaskedArray.__new__",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.core.records.record",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.memmap.memmap.__new__",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy._globals._NoValueType.__new__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__"
    ],
    "numpy.core.records.recarray.__array_finalize__": [
        "numpy.core.records.record"
    ],
    "numpy.core.records.recarray.__getattribute__": [
        "numpy.ma.__getattribute__",
        "numpy.core.records.record.__getattribute__",
        "numpy.__getattribute__",
        "numpy.ndarray",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.core.records.recarray.__getattribute__",
        "numpy.dtype",
        "numpy.ma.masked.view",
        "numpy.ma.mrecords.MaskedRecords.__getattribute__",
        "numpy.void",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.lib.npyio.BagObj.__getattribute__"
    ],
    "numpy.core.records.recarray.__setattr__": [
        "numpy.lib.user_array.container.__setattr__",
        "numpy.core.records.record.__setattr__",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.records.recarray.__setattr__",
        "numpy.ma.core.MaskedArray.__setattr__",
        "numpy.core.records.record",
        "numpy.ma.mrecords.MaskedRecords.__setattr__",
        "numpy.void",
        "npy_tempita.bunch.__setattr__"
    ],
    "numpy.core.records.recarray.__getitem__": [
        "numpy.ndarray",
        "numpy.void"
    ],
    "numpy.core.records.recarray.__repr__": [
        "numpy.core.fromnumeric.shape",
        "numpy.void",
        "numpy.array2string",
        "numpy.shape",
        "numpy.core.arrayprint.array2string",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.records.record",
        "numpy.core.arrayprint.get_printoptions",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.fromnumeric.size",
        "numpy.size"
    ],
    "numpy.core.records.recarray.field": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.int"
    ],
    "numpy.core.records.fromarrays": [
        "numpy.core.fromnumeric.shape",
        "numpy.ndarray",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.records.format_parser",
        "numpy.core.records.format_parser.__init__",
        "numpy.core.records.recarray",
        "numpy.int",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.core.records.fromrecords": [
        "numpy.rec.array",
        "numpy.core.fromnumeric.shape",
        "numpy.core.records.array",
        "numpy.ma.core.MaskedArray.view",
        "numpy.char.array",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.ma.array",
        "numpy.array",
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.records.record",
        "numpy.core.defchararray.array",
        "numpy.core.records.recarray",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.int",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.records.fromarrays",
        "numpy.core.fromnumeric.size",
        "numpy.size"
    ],
    "numpy.core.records.fromstring": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.records.recarray"
    ],
    "numpy.core.records.fromfile": [
        "numpy.core.records.get_remaining_size",
        "numpy.prod",
        "npy_tempita._looper.loop_pos.index",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.chararray.index",
        "numpy.ma.core.MaskedArray.prod",
        "numpy.core.defchararray.index",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.records.recarray",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.int",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.char.index",
        "numpy.matrixlib.defmatrix.matrix.prod",
        "numpy.core.fromnumeric.prod"
    ],
    "numpy.core.records.array": [
        "numpy.ndarray",
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.masked.view",
        "numpy.core.records.fromstring",
        "numpy.core.records.fromfile",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.recarray",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.core.records.fromarrays",
        "numpy.core.records.fromrecords",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.setup.CallOnceOnly.check_types": [
        "numpy.core.setup.CallOnceOnly.check_types"
    ],
    "numpy.core.setup.CallOnceOnly.check_ieee_macros": [
        "numpy.core.setup.CallOnceOnly.check_ieee_macros"
    ],
    "numpy.core.setup.CallOnceOnly.check_complex": [
        "numpy.core.setup.CallOnceOnly.check_complex"
    ],
    "numpy.core.setup.pythonlib_dir": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.core.setup.win32_checks": [
        "numpy.distutils.misc_util"
    ],
    "numpy.core.setup.check_math_capabilities.check_funcs": [
        "numpy.core.setup.check_math_capabilities.check_funcs_once",
        "numpy.core.setup_common.fname2def",
        "numpy.core.setup.check_math_capabilities.check_func"
    ],
    "numpy.core.setup.check_math_capabilities": [
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.setup.check_math_capabilities.check_funcs_once",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.setup.check_math_capabilities.check_funcs",
        "numpy.core.setup_common.fname2def",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.replace"
    ],
    "numpy.core.setup.check_complex": [
        "numpy.core.setup.check_complex.check_prec",
        "numpy.core.setup_common.type2def",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup.check_complex.check_prec": [
        "numpy.core.setup_common.fname2def",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup.check_ieee_macros._add_decl": [
        "numpy.core.setup_common.fname2def",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup.check_ieee_macros": [
        "numpy.core.setup.check_ieee_macros._add_decl",
        "numpy.core.setup_common.fname2def",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup.check_types": [
        "numpy.core.setup_common.sym2def",
        "numpy.ma.append",
        "numpy.append",
        "numpy.core.setup.pythonlib_dir",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup.check_mathlib": [
        "numpy.insert",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.function_base.insert",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.core.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_define_macros",
        "numpy.distutils.misc_util.Configuration.add_library",
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.core.setup_common.check_api_version",
        "numpy.distutils.system_info",
        "numpy.core.setup.configuration.get_mathlib_info",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.distutils.misc_util.Configuration.add_installed_library",
        "numpy._build_utils.apple_accelerate.uses_accelerate_framework",
        "numpy._build_utils.apple_accelerate.get_sgemv_fix",
        "numpy.distutils.misc_util.get_path_from_frame",
        "numpy.core.setup.configuration.generate_umath_c",
        "numpy.core.setup.CallOnceOnly",
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.distutils.misc_util.Configuration.add_npy_pkg_config",
        "numpy.distutils.misc_util.Configuration.add_extension",
        "numpy.distutils.misc_util.Configuration.make_svn_version_py",
        "numpy.distutils.misc_util.Configuration.add_include_dirs",
        "numpy.core.setup.configuration.generate_config_h",
        "numpy.distutils.misc_util.dot_join",
        "numpy.core.setup.configuration.generate_numpyconfig_h",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.core.setup_common.MismatchCAPIWarning",
        "numpy.core.setup.configuration.generate_api_func",
        "numpy.core.setup_common.is_released"
    ],
    "numpy.core.setup.configuration.generate_config_h": [
        "numpy.split",
        "numpy.core.setup.CallOnceOnly.check_types",
        "numpy.core.setup.CallOnceOnly.check_ieee_macros",
        "numpy.lib._datasource.open",
        "numpy.core.setup.CallOnceOnly.check_complex",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.core.setup.is_npy_no_signal",
        "numpy.core.setup.win32_checks",
        "numpy.core.setup.check_math_capabilities",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.core.setup_common.check_long_double_representation",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.function_base.append",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.core.setup.check_mathlib",
        "numpy.distutils.misc_util.Configuration.get_config_cmd",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.ma.core.append"
    ],
    "numpy.core.setup.configuration.generate_numpyconfig_h": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.misc_util.Configuration.add_include_dirs",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.core.setup.check_mathlib",
        "numpy.core.setup.visibility_define",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.distutils.misc_util.Configuration.get_config_cmd",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.core.setup.CallOnceOnly.check_types",
        "numpy.core.setup.CallOnceOnly.check_ieee_macros",
        "numpy.lib._datasource.open",
        "numpy.core.setup.CallOnceOnly.check_complex",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.core.setup.is_npy_no_signal",
        "numpy.core.setup.is_npy_no_smp"
    ],
    "numpy.core.setup.configuration.generate_api_func.generate_api": [
        "numpy.lib.function_base.insert",
        "numpy.insert",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.core.setup.configuration.generate_api_func.generate_api",
        "numpy.core.defchararray.join",
        "numpy.core.code_generators.generate_numpy_api.generate_api",
        "numpy.core.code_generators.generate_ufunc_api.generate_api",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.core.setup.configuration.generate_api_func": [
        "numpy.core.setup.configuration.generate_api_func.generate_api"
    ],
    "numpy.core.setup.configuration.get_mathlib_info": [
        "numpy.core.setup.check_mathlib",
        "numpy.distutils.misc_util.Configuration.get_config_cmd"
    ],
    "numpy.core.setup.configuration.generate_umath_c": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.core.code_generators.ufunc_docstrings.get": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.core.code_generators.ufunc_docstrings.add_newdoc": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.strip",
        "numpy.f2py.auxfuncs.replace",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.strip"
    ],
    "numpy.core.code_generators.generate_numpy_api.generate_api": [
        "numpy.core.code_generators.genapi.should_rebuild",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.code_generators.generate_numpy_api.do_generate_api"
    ],
    "numpy.core.code_generators.generate_numpy_api.do_generate_api": [
        "numpy.ma.append",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.core.code_generators.genapi.TypeApi",
        "numpy.core.code_generators.genapi.GlobalVarApi",
        "numpy.core.code_generators.genapi.FunctionApi",
        "numpy.core.code_generators.genapi.BoolValuesApi",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "numpy.append",
        "numpy.core.code_generators.genapi.check_api_dict",
        "numpy.core.code_generators.genapi.merge_api_dicts",
        "numpy.core.code_generators.genapi.get_api_functions",
        "numpy.core.code_generators.genapi.order_dict",
        "numpy.core.code_generators.genapi.write_file",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.code_generators.generate_umath.build_func_data": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.append"
    ],
    "numpy.core.code_generators.generate_umath.TD": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.core.code_generators.generate_umath.TypeDescription",
        "numpy.core.code_generators.generate_umath.build_func_data",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.code_generators.generate_umath.Ufunc.__init__": [
        "numpy.core.code_generators.generate_umath.TypeDescription.finish_signature"
    ],
    "numpy.core.code_generators.generate_umath.make_arrays": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.defchararray.upper",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.upper",
        "numpy.core.code_generators.generate_umath.FullTypeDescr",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix",
        "numpy.append",
        "numpy.core.code_generators.generate_umath.english_upper",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.code_generators.generate_umath.make_ufuncs": [
        "numpy.core.defchararray.replace",
        "numpy.polynomial._polybase.ABCPolyBase.identity",
        "numpy.core.defchararray.chararray.decode",
        "numpy.core.defchararray.chararray.encode",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.strip",
        "numpy.f2py.auxfuncs.replace",
        "numpy.matlib.identity",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.identity",
        "numpy.core.numeric.identity",
        "numpy.core.defchararray.decode",
        "numpy.ma.core.append",
        "numpy.core.defchararray.encode"
    ],
    "numpy.core.code_generators.generate_umath.make_code": [
        "numpy.core.code_generators.generate_umath.make_arrays",
        "numpy.core.code_generators.generate_umath.indent",
        "numpy.core.code_generators.generate_umath.make_ufuncs"
    ],
    "numpy.core.code_generators.generate_ufunc_api.generate_api": [
        "numpy.core.code_generators.genapi.should_rebuild",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.core.code_generators.generate_ufunc_api.do_generate_api"
    ],
    "numpy.core.code_generators.generate_ufunc_api.do_generate_api": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.ma.append",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.core.code_generators.genapi.TypeApi",
        "numpy.core.code_generators.genapi.FunctionApi",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "numpy.append",
        "numpy.core.code_generators.genapi.check_api_dict",
        "numpy.core.code_generators.genapi.merge_api_dicts",
        "numpy.core.code_generators.genapi.get_api_functions",
        "numpy.core.code_generators.genapi.order_dict",
        "numpy.core.code_generators.genapi.write_file",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.code_generators.genapi.file_in_this_dir": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.core.code_generators.genapi.Function.__init__": [
        "numpy.core.code_generators.genapi._repl"
    ],
    "numpy.core.code_generators.genapi.Function.__str__": [
        "numpy.core.code_generators.genapi._repl"
    ],
    "numpy.core.code_generators.genapi.Function.to_ReST": [
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.core.code_generators.genapi._repl",
        "numpy.core.defchararray.rstrip"
    ],
    "numpy.core.code_generators.genapi.Function.api_hash": [
        "numpy.core.code_generators.genapi.remove_whitespace",
        "numpy.core.code_generators.genapi._repl"
    ],
    "numpy.core.code_generators.genapi.skip_brackets": [
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.core.defchararray.count",
        "numpy.ma.core.MaskedArray.count",
        "numpy.core.defchararray.chararray.count"
    ],
    "numpy.core.code_generators.genapi.split_arguments.finish_arg": [
        "numpy.core.defchararray.strip",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.code_generators.genapi.split_arguments": [
        "numpy.core.code_generators.genapi.split_arguments.finish_arg",
        "numpy.core.code_generators.genapi.skip_brackets"
    ],
    "numpy.core.code_generators.genapi.find_functions": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.lstrip",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.rstrip",
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.lstrip",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.core.defchararray.chararray.strip",
        "numpy.core.code_generators.genapi.Function",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.core.code_generators.genapi.ParseError",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "numpy.core.code_generators.genapi.split_arguments",
        "numpy.ma.core.append",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.core.code_generators.genapi.should_rebuild": [
        "numpy.lib._datasource.DataSource.exists"
    ],
    "numpy.core.code_generators.genapi.write_file": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.core.code_generators.genapi.FunctionApi.define_from_array_api_string": [
        "numpy.core.code_generators.genapi.FunctionApi._argtypes_string"
    ],
    "numpy.core.code_generators.genapi.FunctionApi.internal_define": [
        "numpy.core.code_generators.genapi.FunctionApi._argtypes_string"
    ],
    "numpy.core.code_generators.genapi.order_dict": [
        "numpy.core.code_generators.genapi.order_dict._key"
    ],
    "numpy.core.code_generators.genapi.check_api_dict": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.code_generators.genapi.get_api_functions": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.ma.append",
        "numpy.ma.core.sort",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.core.code_generators.genapi.find_functions"
    ],
    "numpy.core.code_generators.genapi.fullapi_hash": [
        "numpy.core.code_generators.genapi.order_dict"
    ],
    "numpy.core.code_generators.genapi.get_versions_hash": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.char.join",
        "numpy.ma.core.append"
    ],
    "numpy.core.code_generators.genapi.main": [
        "numpy.int",
        "numpy.core.code_generators.genapi.get_api_functions"
    ],
    "numpy.core.tests.test_scalarinherit.B": [
        "numpy.float64",
        "numpy.core.tests.test_scalarinherit.A"
    ],
    "numpy.core.tests.test_scalarinherit.C": [
        "numpy.core.tests.test_scalarinherit.B"
    ],
    "numpy.core.tests.test_scalarinherit.D": [
        "numpy.core.tests.test_scalarinherit.C",
        "numpy.core.tests.test_scalarinherit.B"
    ],
    "numpy.core.tests.test_scalarinherit.B0": [
        "numpy.float64",
        "numpy.core.tests.test_scalarinherit.A"
    ],
    "numpy.core.tests.test_scalarinherit.C0": [
        "numpy.core.tests.test_scalarinherit.B0"
    ],
    "numpy.core.tests.test_scalarinherit.TestInherit.test_init": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarinherit.B",
        "numpy.core.tests.test_scalarinherit.C",
        "numpy.core.tests.test_scalarinherit.D"
    ],
    "numpy.core.tests.test_scalarinherit.TestInherit.test_init2": [
        "numpy.core.tests.test_scalarinherit.B0",
        "numpy.core.tests.test_scalarinherit.C0",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_scalarinherit.TestCharacter.test_char_radd": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.string_",
        "numpy.core.tests.test_scalarinherit.TestCharacter.test_char_radd.Mystr"
    ],
    "numpy.core.tests.test_scalarinherit.TestCharacter.test_char_repeat": [
        "numpy.unicode_",
        "numpy.string_",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_indexerrors.TestIndexErrors.test_arraytypes_fasttake": [
        "numpy.empty"
    ],
    "numpy.core.tests.test_indexerrors.TestIndexErrors.test_take_from_object": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_indexerrors.TestIndexErrors.test_multiindex_exceptions": [
        "numpy.empty"
    ],
    "numpy.core.tests.test_indexerrors.TestIndexErrors.test_put_exceptions": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_indexerrors.TestIndexErrors.test_iterators_exceptions": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_indexerrors.TestIndexErrors.test_mapping": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_indexerrors.TestIndexErrors.test_methods": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_nditer.iter_multi_index": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_nditer.iter_indices": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_nditer.iter_iterindices": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_nditer.test_iter_refcount": [
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.dtype",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order": [
        "numpy.arange",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.prod",
        "numpy.nditer",
        "numpy.ma.core.shape",
        "numpy.swapaxes"
    ],
    "numpy.core.tests.test_nditer.test_iter_c_order": [
        "numpy.core.fromnumeric.swapaxes",
        "numpy.core.fromnumeric.ravel",
        "numpy.core.fromnumeric.shape",
        "numpy.prod",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.arange",
        "numpy.ravel",
        "numpy.shape",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.swapaxes",
        "numpy.testing.assert_equal",
        "numpy.matrixlib.defmatrix.matrix.ravel"
    ],
    "numpy.core.tests.test_nditer.test_iter_f_order": [
        "numpy.core.fromnumeric.swapaxes",
        "numpy.core.fromnumeric.ravel",
        "numpy.core.fromnumeric.shape",
        "numpy.prod",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.arange",
        "numpy.ravel",
        "numpy.shape",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.swapaxes",
        "numpy.testing.assert_equal",
        "numpy.matrixlib.defmatrix.matrix.ravel"
    ],
    "numpy.core.tests.test_nditer.test_iter_c_or_f_order": [
        "numpy.core.fromnumeric.swapaxes",
        "numpy.core.fromnumeric.ravel",
        "numpy.core.fromnumeric.shape",
        "numpy.prod",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.arange",
        "numpy.ravel",
        "numpy.shape",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.swapaxes",
        "numpy.testing.assert_equal",
        "numpy.matrixlib.defmatrix.matrix.ravel"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_multi_index_1d": [
        "numpy.core.tests.test_nditer.iter_multi_index",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_multi_index_2d": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.core.tests.test_nditer.iter_multi_index",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.copy",
        "numpy.True_.copy"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_multi_index_3d": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.core.tests.test_nditer.iter_multi_index",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.copy",
        "numpy.True_.copy"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_c_index_1d": [
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.core.tests.test_nditer.iter_indices"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_c_index_2d": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.True_.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.core.tests.test_nditer.iter_indices"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_c_index_3d": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.True_.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.core.tests.test_nditer.iter_indices"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_f_index_1d": [
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.core.tests.test_nditer.iter_indices"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_f_index_2d": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.True_.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.core.tests.test_nditer.iter_indices"
    ],
    "numpy.core.tests.test_nditer.test_iter_best_order_f_index_3d": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.True_.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.core.tests.test_nditer.iter_indices"
    ],
    "numpy.core.tests.test_nditer.test_iter_no_inner_full_coalesce": [
        "numpy.arange",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.prod",
        "numpy.nditer",
        "numpy.ma.core.shape",
        "numpy.swapaxes"
    ],
    "numpy.core.tests.test_nditer.test_iter_no_inner_dim_coalescing": [
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_dim_coalescing": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.swapaxes",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_broadcasting": [
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.int32",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_itershape": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.ones",
        "numpy.shape",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_broadcasting_errors": [
        "numpy.core.defchararray.find",
        "numpy.core.defchararray.chararray.find",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.zeros",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_flags_errors": [
        "numpy.int32",
        "numpy.core.tests.test_nditer.test_iter_flags_errors.assign_multi_index",
        "numpy.array",
        "numpy.nditer",
        "numpy.core.tests.test_nditer.test_iter_flags_errors.assign_index",
        "numpy.arange",
        "numpy.core.tests.test_nditer.test_iter_flags_errors.assign_iterindex",
        "numpy.core.tests.test_nditer.test_iter_flags_errors.assign_iterrange"
    ],
    "numpy.core.tests.test_nditer.test_iter_slice": [
        "numpy.nditer",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_assign_mapping": [
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_nditer.test_iter_nbo_align_contig": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.arange",
        "numpy.zeros",
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned"
    ],
    "numpy.core.tests.test_nditer.test_iter_array_cast": [
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.dtype",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.swapaxes",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_array_cast_errors": [
        "numpy.nditer",
        "numpy.dtype",
        "numpy.arange"
    ],
    "numpy.core.tests.test_nditer.test_iter_scalar_cast": [
        "numpy.float32",
        "numpy.nditer",
        "numpy.dtype",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_scalar_cast_errors": [
        "numpy.float32",
        "numpy.nditer",
        "numpy.dtype",
        "numpy.float64"
    ],
    "numpy.core.tests.test_nditer.test_iter_object_arrays_basic": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel",
        "numpy.array"
    ],
    "numpy.core.tests.test_nditer.test_iter_object_arrays_conversions": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_common_dtype": [
        "numpy.nditer",
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_copy_if_overlap": [
        "numpy.int8",
        "numpy.int32",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.nditer",
        "numpy.arange",
        "numpy.shares_memory"
    ],
    "numpy.core.tests.test_nditer.test_iter_op_axes": [
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ravel",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_op_axes_errors": [
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_copy": [
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ravel",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.nditer",
        "numpy.ma.core.MaskedArray.ravel",
        "npy_tempita.compat3.next",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_simple": [
        "numpy.nditer",
        "numpy.dtype",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_buffered_readwrite": [
        "numpy.nditer",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_itorder": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.swapaxes",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_opaxes": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_types_promotion": [
        "numpy.nditer",
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_types_byte_order": [
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_types_scalar": [
        "numpy.float32",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.complex128",
        "numpy.nditer",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_subtype.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_subtype": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.shape",
        "numpy.core.tests.test_nditer.test_iter_allocate_output_subtype.MyNDArray",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocate_output_errors": [
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dtype",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_remove_axis": [
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ravel",
        "numpy.nditer",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_remove_multi_index_inner_loop": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.arange",
        "numpy.shape",
        "numpy.nditer",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_iterindex": [
        "numpy.core.tests.test_nditer.iter_iterindices",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_iterrange": [
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.core.tests.test_nditer.test_iter_iterrange.get_array",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ravel",
        "numpy.nditer",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_iterrange.get_array": [
        "numpy.array",
        "numpy.concatenate"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffering": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ravel",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ravel",
        "numpy.ma.append",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.size",
        "numpy.append",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.append",
        "numpy.zeros",
        "numpy.size",
        "numpy.ma.core.append",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.size",
        "numpy.concatenate",
        "numpy.copy",
        "numpy.lib.user_array.container.byteswap"
    ],
    "numpy.core.tests.test_nditer.test_iter_write_buffering": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.testing.assert_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel",
        "numpy.lib.user_array.container.byteswap"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffering_delayed_alloc": [
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.core.tests.test_nditer.test_iter_buffering_delayed_alloc.assign_iter",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffered_cast_simple": [
        "numpy.nditer",
        "numpy.dtype",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffered_cast_byteswapped": [
        "numpy.nditer",
        "numpy.arange",
        "numpy.lib.user_array.container.byteswap",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffered_cast_byteswapped_complex": [
        "numpy.longdouble",
        "numpy.nditer",
        "numpy.dtype",
        "numpy.arange",
        "numpy.clongdouble",
        "numpy.lib.user_array.container.byteswap",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffered_cast_structured_type": [
        "numpy.zeros",
        "numpy.nditer",
        "numpy.dtype",
        "numpy.arange",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffered_cast_subarray": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.zeros",
        "numpy.ones",
        "numpy.core.fromnumeric.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.dtype",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffering_badwriteback": [
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffering_string": [
        "numpy.bytes_",
        "numpy.nditer",
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffering_growinner": [
        "numpy.nditer",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffered_reduce_reuse": [
        "numpy.core.tests.test_nditer.test_iter_buffered_reduce_reuse.get_params",
        "numpy.testing.assert_array_equal",
        "numpy.nditer",
        "numpy.arange",
        "numpy.int_"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffered_reduce_reuse.get_params": [
        "numpy.arange",
        "numpy.core.tests.test_nditer.test_iter_buffered_reduce_reuse.get_params",
        "numpy.lib.stride_tricks.as_strided"
    ],
    "numpy.core.tests.test_nditer.test_iter_no_broadcast": [
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.TestIterNested.test_basic": [
        "numpy.nested_iters",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_nditer.TestIterNested.test_reorder": [
        "numpy.nested_iters",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_nditer.TestIterNested.test_flip_axes": [
        "numpy.nested_iters",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_nditer.TestIterNested.test_broadcast": [
        "numpy.nested_iters",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_nditer.TestIterNested.test_dtype_copy": [
        "numpy.nested_iters",
        "numpy.core.fromnumeric.reshape",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_nditer.TestIterNested.test_dtype_buffered": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.nested_iters",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dtype",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.TestIterNested.test_0d": [
        "numpy.nested_iters",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_nditer.TestIterNested.test_iter_nested_iters_dtype_buffered": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.nested_iters",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dtype",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_reduction_error": [
        "numpy.nditer",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_reduction": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.ones",
        "numpy.sum",
        "numpy.arange",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.nditer",
        "numpy.ma.sum",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim",
        "numpy.reshape",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffering_reduction": [
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.transpose",
        "numpy.core.fromnumeric.shape",
        "numpy.transpose",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.sum",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.arange",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.shape",
        "numpy.nditer",
        "numpy.copy",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.lib.function_base.copy",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_nditer.test_iter_buffering_reduction_reuse_reduce_loops": [
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.ma.append",
        "numpy.core.fromnumeric.sum",
        "numpy.nditer",
        "numpy.ma.sum",
        "numpy.append",
        "numpy.sum",
        "numpy.lib.function_base.append",
        "numpy.zeros",
        "numpy.ma.core.append",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.core.tests.test_nditer.test_iter_writemasked_badinput": [
        "numpy.zeros",
        "numpy.array",
        "numpy.nditer"
    ],
    "numpy.core.tests.test_nditer.test_iter_writemasked": [
        "numpy.zeros",
        "numpy.nditer",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_non_writable_attribute_deletion": [
        "numpy.ones",
        "numpy.nditer",
        "npy_tempita.attr"
    ],
    "numpy.core.tests.test_nditer.test_iter_writable_attribute_deletion": [
        "numpy.ones",
        "numpy.nditer",
        "npy_tempita.attr"
    ],
    "numpy.core.tests.test_nditer.test_iter_element_deletion": [
        "numpy.ones",
        "numpy.nditer"
    ],
    "numpy.core.tests.test_nditer.test_iter_allocated_array_dtypes": [
        "numpy.nditer",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_0d_iter": [
        "npy_tempita.compat3.next",
        "numpy.array",
        "numpy.nditer",
        "numpy.arange",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_iter_too_large": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.nditer",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_nditer.test_iter_too_large_with_multiindex": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.append",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.empty",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_nditer.test_writebacks": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.nditer",
        "numpy.arange",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_nditer.test_close_equivalent.add_close": [
        "numpy.nditer",
        "numpy.add"
    ],
    "numpy.core.tests.test_nditer.test_close_equivalent.add_context": [
        "numpy.nditer",
        "numpy.add"
    ],
    "numpy.core.tests.test_nditer.test_close_equivalent": [
        "numpy.core.tests.test_nditer.test_close_equivalent.add_context",
        "numpy.core.tests.test_nditer.test_close_equivalent.add_close",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_close_raises": [
        "npy_tempita.compat3.next",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.nditer",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_nditer.test_warn_noclose": [
        "numpy.dtype",
        "numpy.arange"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_fromrecords": [
        "numpy.testing.assert_equal",
        "numpy.rec.fromrecords",
        "numpy.core.records.fromrecords",
        "npy_tempita._looper.loop_pos.item",
        "numpy.ma.mrecords.fromrecords"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_fromrecords_0len": [
        "numpy.rec.fromrecords",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.core.records.fromrecords",
        "numpy.ma.core.shape",
        "numpy.ma.mrecords.fromrecords"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_fromrecords_2d": [
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.rec.fromrecords",
        "numpy.core.records.fromrecords",
        "numpy.ma.mrecords.fromrecords"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_method_array": [
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "npy_tempita._looper.loop_pos.item",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_method_array2": [
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "npy_tempita._looper.loop_pos.item",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_slices": [
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "npy_tempita._looper.loop_pos.item",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_fromarrays": [
        "numpy.testing.assert_equal",
        "numpy.core.records.fromarrays",
        "numpy.ma.mrecords.fromarrays",
        "npy_tempita._looper.loop_pos.item",
        "numpy.rec.fromarrays",
        "numpy.array"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_fromfile": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.fromfile",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.ma.core.fromfile",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.records.fromfile",
        "numpy.core.defchararray.array",
        "numpy.rec.fromfile",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_from_obj": [
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.testing.assert_",
        "numpy.core.records.fromarrays",
        "numpy.zeros",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.ma.mrecords.fromarrays",
        "numpy.core.defchararray.count",
        "numpy.ma.core.MaskedArray.count",
        "numpy.rec.fromarrays",
        "numpy.core.defchararray.chararray.count"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_repr": [
        "numpy.core.defchararray.find",
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.core.defchararray.chararray.find",
        "numpy.testing.assert_",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.ones",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_0d_recarray_repr": [
        "numpy.set_printoptions",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_from_repr": [
        "numpy.ndarray",
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.recarray",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.dtype",
        "numpy.core.records.array",
        "numpy.array",
        "numpy"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_views": [
        "numpy.ndarray",
        "numpy.ma.core.array",
        "numpy.float32",
        "numpy.int64",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_multiarray.TestIO.test_dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_records.TestFromrecords.test_recarray_views.C",
        "numpy.core.tests.test_function_base.TestLogspace.test_dtype",
        "numpy.lib.tests.test_twodim_base.TestTri.test_dtype",
        "numpy.ma.array",
        "numpy.int32",
        "numpy.core.tests.test_function_base.TestGeomspace.test_dtype",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.tests.test_ctypeslib.TestNdpointer.test_dtype",
        "numpy.array",
        "numpy.core.tests.test_function_base.TestLinspace.test_dtype",
        "numpy.recarray",
        "numpy.void",
        "numpy.ones",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.int",
        "numpy.core.tests.test_dtype.TestBuiltin.test_dtype"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_views.C": [
        "numpy.recarray"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_from_names": [
        "numpy.rec.fromrecords",
        "numpy.rec.array",
        "numpy.core.fromnumeric.shape",
        "numpy.core.records.array",
        "numpy.testing.assert_",
        "npy_tempita._looper.loop_pos.item",
        "numpy.char.array",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.array",
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.defchararray.array",
        "numpy.ma.core.shape",
        "numpy.ma.mrecords.fromrecords",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.records.fromrecords"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_conflict_fields": [
        "numpy.rec.array",
        "numpy.core.records.recarray.field",
        "numpy.core.fromnumeric.shape",
        "numpy.core.records.array",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.mean",
        "numpy.var",
        "numpy.char.array",
        "numpy.shape",
        "numpy.ma.array",
        "numpy.array",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.ma.core.MaskedArray.var",
        "numpy.ma.core.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.defchararray.array",
        "numpy.ma.mean",
        "numpy.ma.core.shape",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.matrixlib.defmatrix.matrix.var",
        "numpy.core.fromnumeric.mean",
        "numpy.core.fromnumeric.var"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_fromrecords_with_explicit_dtype": [
        "numpy.int",
        "numpy.core.records.fromrecords",
        "npy_tempita.compat3.b",
        "numpy.ma.mrecords.fromrecords",
        "numpy.rec.fromrecords",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_stringtypes": [
        "numpy.int",
        "numpy.recarray",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_recarray_returntypes": [
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.ndarray",
        "numpy.ma.core.array",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "example.foo",
        "numpy.rec.array",
        "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo",
        "numpy.char.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank1.foo",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.dtype",
        "numpy.testing.tests.test_utils.TestArrayEqual.test_generic_rank3.foo",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A",
        "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo",
        "numpy.core.tests.test_scalarinherit.A",
        "numpy.recarray",
        "numpy.core.tests.test_scalarinherit.D",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156.Foo.bar",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.int",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo"
    ],
    "numpy.core.tests.test_records.TestFromrecords.test_zero_width_strings": [
        "numpy.testing.assert_equal",
        "numpy.core.records.fromarrays",
        "numpy.ma.mrecords.fromarrays",
        "numpy.dtype",
        "numpy.rec.fromarrays"
    ],
    "numpy.core.tests.test_records.TestRecord.setup": [
        "numpy.core.records.fromrecords",
        "numpy.rec.fromrecords",
        "numpy.ma.mrecords.fromrecords"
    ],
    "numpy.core.tests.test_records.TestRecord.test_assignment1": [
        "numpy.core.records.fromrecords",
        "numpy.ma.mrecords.fromrecords",
        "numpy.rec.fromrecords",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_records.TestRecord.test_assignment2": [
        "numpy.core.records.fromrecords",
        "numpy.ma.mrecords.fromrecords",
        "numpy.rec.fromrecords",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_records.TestRecord.test_invalid_assignment": [
        "numpy.core.records.fromrecords",
        "numpy.ma.mrecords.fromrecords",
        "numpy.rec.fromrecords",
        "numpy.core.tests.test_records.TestRecord.test_invalid_assignment.assign_invalid_column"
    ],
    "numpy.core.tests.test_records.TestRecord.test_nonwriteable_setfield": [
        "numpy.ma.core.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_records.TestRecord.test_out_of_order_fields": [
        "numpy.testing.assert_equal",
        "numpy.rec.fromrecords",
        "numpy.core.records.fromrecords",
        "numpy.ma.mrecords.fromrecords"
    ],
    "numpy.core.tests.test_records.TestRecord.test_pickle_1": [
        "numpy.int32",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_records.TestRecord.test_pickle_2": [
        "numpy.core.records.fromrecords",
        "numpy.ma.mrecords.fromrecords",
        "numpy.rec.fromrecords",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_records.TestRecord.test_pickle_3": [
        "numpy.core.records.fromrecords",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.fromrecords",
        "numpy.rec.fromrecords",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned"
    ],
    "numpy.core.tests.test_records.TestRecord.test_objview_record": [
        "numpy.ma.masked.view",
        "numpy.int",
        "numpy.ma.core.MaskedArray.view",
        "numpy.recarray",
        "numpy.dtype",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.array"
    ],
    "numpy.core.tests.test_records.TestRecord.test_record_scalar_setitem": [
        "numpy.ones",
        "numpy.recarray",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_records.TestRecord.test_missing_field": [
        "numpy.int",
        "numpy.zeros"
    ],
    "numpy.core.tests.test_records.test_find_duplicate": [
        "numpy.rec.find_duplicate",
        "numpy.testing.assert_",
        "numpy.core.records.find_duplicate"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast1d.test_0D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast1d.test_1D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast1d.test_2D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast1d.test_3D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast1d.test_r1array": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast2d.test_0D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast2d.test_1D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast2d.test_2D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast2d.test_3D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast2d.test_r2array": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast3d.test_0D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast3d.test_1D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast3d.test_2D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestAtleast3d.test_3D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestHstack.test_0D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestHstack.test_1D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestHstack.test_2D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestVstack.test_0D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestVstack.test_1D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestVstack.test_2D_array": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestVstack.test_2D_array2": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_shape_base.TestConcatenate.test_exceptions": [
        "numpy.append",
        "numpy.ma.append",
        "numpy.array",
        "numpy.AxisError",
        "numpy.ones",
        "numpy.core.fromnumeric.ndim",
        "numpy.moveaxis",
        "numpy.lib.function_base.append",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.append",
        "numpy.concatenate"
    ],
    "numpy.core.tests.test_shape_base.TestConcatenate.test_concatenate_axis_None": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.size",
        "numpy.ma.core.reshape",
        "numpy.zeros",
        "numpy.size",
        "numpy.reshape",
        "numpy.ma.core.size",
        "numpy.concatenate",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_shape_base.TestConcatenate.test_large_concatenate_axis_None": [
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.concatenate"
    ],
    "numpy.core.tests.test_shape_base.TestConcatenate.test_concatenate": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_shape_base.TestConcatenate.test_bad_out_shape": [
        "numpy.empty"
    ],
    "numpy.core.tests.test_shape_base.TestConcatenate.test_out_dtype": [
        "numpy.float32",
        "numpy.int32",
        "numpy.testing.assert_",
        "numpy.complex64",
        "numpy.empty"
    ],
    "numpy.core.tests.test_shape_base.test_stack": [
        "numpy.arange",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.int32",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.AxisError",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.stack",
        "numpy.zeros",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_block_simple_row_wise": [
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_block_simple_column_wise": [
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_row_wise": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_multiple_rows": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_block_with_1d_arrays_column_wise": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_block_mixed_1d_and_2d": [
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_block_complicated": [
        "numpy.zeros",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_nested": [
        "numpy.block",
        "numpy.zeros",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_3d": [
        "numpy.int",
        "numpy.testing.assert_array_equal",
        "numpy.block",
        "numpy.ones"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_block_with_mismatched_shape": [
        "numpy.block",
        "numpy.array",
        "numpy.eye"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_no_lists": [
        "numpy.block",
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.eye"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_invalid_nesting": [
        "numpy.block"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_empty_lists": [
        "numpy.block"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_tuple": [
        "numpy.block"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_different_ndims": [
        "numpy.block",
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_shape_base.TestBlock.test_different_ndims_depths": [
        "numpy.block",
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.assert_dtype_equal": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.assert_dtype_not_equal": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_dtype.TestBuiltin.test_run": [
        "numpy.int",
        "numpy.int32",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestBuiltin.test_dtype": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.core.tests.test_dtype.assert_dtype_equal"
    ],
    "numpy.core.tests.test_dtype.TestBuiltin.test_equivalent_dtype_hashing": [
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.uint32"
    ],
    "numpy.core.tests.test_dtype.TestBuiltin.test_invalid_types": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestBuiltin.test_bad_param": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestBuiltin.test_field_order_equality": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_equivalent_record": [
        "numpy.int",
        "numpy.dtype",
        "numpy.core.tests.test_dtype.assert_dtype_equal"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_different_names": [
        "numpy.int",
        "numpy.core.tests.test_dtype.assert_dtype_not_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_different_titles": [
        "numpy.core.tests.test_dtype.assert_dtype_not_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_mutate": [
        "numpy.int",
        "numpy.core.tests.test_dtype.assert_dtype_not_equal",
        "numpy.dtype",
        "numpy.core.tests.test_dtype.assert_dtype_equal"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_not_lists": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_aligned_size": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_union_struct": [
        "numpy.testing.assert_equal",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_comma_datetime": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_from_dictproxy": [
        "numpy.dtype",
        "numpy.core.tests.test_dtype.assert_dtype_equal",
        "numpy.void",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_from_dict_with_zero_width_field": [
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_dtype.assert_dtype_equal",
        "numpy.float32",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_bool_commastring": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_nonint_offsets.make_dtype": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_nonint_offsets": [
        "numpy.uint32",
        "npy_tempita._looper.loop_pos.item",
        "numpy.core.tests.test_dtype.TestRecord.test_nonint_offsets.make_dtype"
    ],
    "numpy.core.tests.test_dtype.TestRecord.test_fields_by_index": [
        "numpy.int8",
        "numpy.float32",
        "numpy.testing.assert_equal",
        "numpy.dtype",
        "numpy.core.tests.test_dtype.assert_dtype_equal"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_single_subarray": [
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_dtype.assert_dtype_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_equivalent_record": [
        "numpy.int",
        "numpy.dtype",
        "numpy.core.tests.test_dtype.assert_dtype_equal"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_nonequivalent_record": [
        "numpy.int",
        "numpy.core.tests.test_dtype.assert_dtype_not_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_shape_equal": [
        "numpy.int",
        "numpy.dtype",
        "numpy.core.tests.test_dtype.assert_dtype_equal"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_shape_simple": [
        "numpy.core.tests.test_dtype.assert_dtype_not_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_shape_monster": [
        "numpy.core.tests.test_dtype.assert_dtype_not_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_shape_sequence": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.dtype",
        "numpy.shape",
        "numpy.int16",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.int",
        "numpy.core.tests.test_dtype.TestSubarray.test_shape_sequence.IntLike",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_shape_matches_ndim": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_shape_invalid": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.dtype",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_dtype.TestSubarray.test_alignment": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestMonsterType.test1": [
        "numpy.int",
        "numpy.dtype",
        "numpy.core.tests.test_dtype.assert_dtype_equal"
    ],
    "numpy.core.tests.test_dtype.TestMetadata.test_no_metadata": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestMetadata.test_metadata_takes_dict": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestMetadata.test_metadata_rejects_nondict": [
        "numpy.int",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestMetadata.test_nested_metadata": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestMetadata.test_base_metadata_copied": [
        "numpy.dtype",
        "numpy.void",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_dtype.TestString": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_dtype.TestString.test_complex_dtype_str": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestString.test_complex_dtype_repr": [
        "numpy.testing.assert_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestString.test_dtype_str_with_long_in_shape": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestString.test_base_dtype_with_object_type": [
        "numpy.lib.user_array.container.astype"
    ],
    "numpy.core.tests.test_dtype.TestString.test_empty_string_to_object": [
        "numpy.lib.user_array.container.astype"
    ],
    "numpy.core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_non_writable_attributes_deletion": [
        "numpy.double",
        "numpy.dtype",
        "npy_tempita.attr"
    ],
    "numpy.core.tests.test_dtype.TestDtypeAttributeDeletion.test_dtype_writable_attributes_deletion": [
        "numpy.double",
        "numpy.dtype",
        "npy_tempita.attr"
    ],
    "numpy.core.tests.test_dtype.TestDtypeAttributes.test_descr_has_trailing_void": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestDtypeAttributes.test_name_builtin": [
        "numpy.sctypes.values",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.testing.assert_equal",
        "numpy.sctypeDict.values",
        "numpy.typeDict.values",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.core.tests.test_dtype.TestDtypeAttributes.test_name_dtype_subclass.user_def_subcls": [
        "numpy.void"
    ],
    "numpy.core.tests.test_dtype.TestDtypeAttributes.test_name_dtype_subclass": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestPickling.check_pickling": [
        "numpy.zeros",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_dtype.TestPickling.test_builtin": [
        "numpy.int",
        "numpy.int32",
        "numpy.core.tests.test_dtype.TestPickling.check_pickling",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestPickling.test_structured": [
        "numpy.core.tests.test_dtype.TestPickling.check_pickling",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestPickling.test_datetime": [
        "numpy.core.tests.test_dtype.TestPickling.check_pickling",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.TestPickling.test_metadata": [
        "numpy.int",
        "numpy.core.tests.test_dtype.TestPickling.check_pickling",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.test_rational_dtype": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.test_dtypes_are_true": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_dtype.test_invalid_dtype_string": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_print.check_float_type": [
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_print.test_float_types": [
        "numpy.double",
        "numpy.core.tests.test_print.check_float_type",
        "numpy.float32",
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_print.check_nan_inf_float": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_print.test_nan_inf_float": [
        "numpy.double",
        "numpy.float32",
        "numpy.core.tests.test_print.check_nan_inf_float",
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_print.check_complex_type": [
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_print.test_complex_types": [
        "numpy.core.tests.test_print.check_complex_type",
        "numpy.cdouble",
        "numpy.complex64",
        "numpy.clongdouble"
    ],
    "numpy.core.tests.test_print.test_complex_inf_nan": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.clongdouble",
        "numpy.complex64",
        "numpy.cdouble",
        "numpy.core.tests.test_print._check_complex_inf_nan"
    ],
    "numpy.core.tests.test_print._check_complex_inf_nan": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_print._test_redirected_print": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_print.check_float_type_print": [
        "numpy.core.tests.test_print._test_redirected_print",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_print.check_complex_type_print": [
        "numpy.core.tests.test_print._test_redirected_print",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_print.test_float_type_print": [
        "numpy.double",
        "numpy.float32",
        "numpy.core.tests.test_print.check_float_type_print",
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_print.test_complex_type_print": [
        "numpy.cdouble",
        "numpy.complex64",
        "numpy.clongdouble",
        "numpy.core.tests.test_print.check_complex_type_print"
    ],
    "numpy.core.tests.test_print.test_scalar_format": [
        "numpy.uint8",
        "numpy.float16",
        "numpy.testing.assert_equal",
        "numpy.float32",
        "numpy.int64",
        "numpy.testing.assert_",
        "numpy.clongdouble",
        "numpy.bool_",
        "numpy.uint16",
        "numpy.complex128",
        "numpy.uint64",
        "numpy.complex64",
        "numpy.uint32",
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.longdouble",
        "numpy.float64"
    ],
    "numpy.core.tests.test_print.TestCommaDecimalPointLocale": [
        "numpy.core.tests._locales.CommaDecimalPointLocale"
    ],
    "numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_single": [
        "numpy.float32",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_double": [
        "numpy.double",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_print.TestCommaDecimalPointLocale.test_locale_longdouble": [
        "numpy.longdouble",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_machar.TestMachAr._run_machar_highprec": [
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.machar.MachAr"
    ],
    "numpy.core.tests.test_machar.TestMachAr.test_underlow": [
        "numpy.errstate",
        "numpy.core.tests.test_machar.TestMachAr._run_machar_highprec"
    ],
    "numpy.core.tests.test_function_base.PhysicalQuantity": [
        "numpy.core.tests.test_function_base.PhysicalQuantity.__mul__",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__add__"
    ],
    "numpy.core.tests.test_function_base.PhysicalQuantity.__new__": [
        "numpy._globals._NoValueType.__new__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.ma.MaskedArray.__new__",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.core.memmap.memmap.__new__"
    ],
    "numpy.core.tests.test_function_base.PhysicalQuantity.__add__": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_function_base.PhysicalQuantity.__sub__": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_function_base.PhysicalQuantity.__rsub__": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_function_base.PhysicalQuantity2": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_function_base.TestLogspace.test_basic": [
        "numpy.testing.assert_array_equal",
        "numpy.logspace",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_function_base.TestLogspace.test_dtype": [
        "numpy.testing.assert_equal",
        "numpy.dtype",
        "numpy.logspace"
    ],
    "numpy.core.tests.test_function_base.TestLogspace.test_physical_quantities": [
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_function_base.PhysicalQuantity",
        "numpy.logspace"
    ],
    "numpy.core.tests.test_function_base.TestLogspace.test_subclass": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.logspace",
        "numpy.core.tests.test_function_base.PhysicalQuantity2",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_function_base.TestGeomspace.test_basic": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_function_base.TestGeomspace.test_complex": [
        "numpy.sqrt",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_function_base.TestGeomspace.test_dtype": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_function_base.TestGeomspace.test_array_scalar": [
        "numpy.array"
    ],
    "numpy.core.tests.test_function_base.TestGeomspace.test_physical_quantities": [
        "numpy.core.tests.test_function_base.PhysicalQuantity",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_function_base.TestGeomspace.test_subclass": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_function_base.PhysicalQuantity2",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_basic": [
        "numpy.testing.assert_",
        "numpy.linspace"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_corner": [
        "numpy.testing.assert_",
        "numpy.linspace"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_type": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_dtype": [
        "numpy.linspace",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_array_scalar": [
        "numpy.linspace",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_complex": [
        "numpy.linspace",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_physical_quantities": [
        "numpy.linspace",
        "numpy.core.tests.test_function_base.PhysicalQuantity",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_subclass": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_function_base.PhysicalQuantity2",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.linspace",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_array_interface": [
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.linspace",
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_denormal_numbers": [
        "numpy.core.fromnumeric.any",
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.nextafter"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_equivalent_to_arange": [
        "numpy.int",
        "numpy.linspace",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_function_base.TestLinspace.test_retstep": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.linspace"
    ],
    "numpy.core.tests.test_half.assert_raises_fpe": [
        "numpy.core.defchararray.find",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.defchararray.chararray.find",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_half.TestHalf": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_half.TestHalf.setup": [
        "numpy.float32",
        "numpy.arange",
        "numpy.float16",
        "numpy.float64",
        "numpy.concatenate",
        "numpy.uint16",
        "numpy.array"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_conversions": [
        "numpy.int",
        "numpy.longdouble",
        "numpy.arange",
        "numpy.float16",
        "numpy.concatenate",
        "numpy.uint16",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_half.TestHalf.test_nans_infs": [
        "numpy.isfinite",
        "numpy.core.fromnumeric.all",
        "numpy.float16",
        "numpy.core.fromnumeric.any",
        "numpy.testing.assert_equal",
        "numpy.errstate",
        "numpy.isinf",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.arange",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.isnan",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.MaskedArray.any",
        "numpy.signbit",
        "numpy.any",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.spacing",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_values": [
        "numpy.float16",
        "numpy.uint16",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_rounding": [
        "numpy.float32",
        "numpy.float64",
        "numpy.float16",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_correctness": [
        "numpy.int32",
        "numpy.concatenate",
        "numpy.nonzero",
        "numpy.uint16",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_ordering": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.float32",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.array",
        "numpy.core.fromnumeric.all",
        "numpy.core.fromnumeric.any",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.core.fromnumeric.size",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.size",
        "numpy.all",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.size",
        "numpy.copy"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_funcs": [
        "numpy.float16",
        "numpy.testing.assert_equal",
        "numpy.float32",
        "numpy.arange",
        "numpy.nonzero",
        "numpy.zeros",
        "numpy.array",
        "numpy.ones",
        "numpy.ma.nonzero",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.core.fromnumeric.nonzero",
        "numpy.dot"
    ],
    "numpy.core.tests.test_half.TestHalf.test_spacing_nextafter": [
        "numpy.arange",
        "numpy.nextafter",
        "numpy.float16",
        "numpy.spacing",
        "numpy.uint16",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_ufuncs": [
        "numpy.isfinite",
        "numpy.maximum",
        "numpy.ones_like",
        "numpy.float16",
        "numpy.logical_xor",
        "numpy.fmax",
        "numpy.copysign",
        "numpy.equal",
        "numpy.logical_and",
        "numpy.testing.assert_equal",
        "numpy.fmin",
        "numpy.isinf",
        "numpy.remainder",
        "numpy.divmod",
        "numpy.testing.assert_",
        "numpy.negative",
        "numpy.add",
        "numpy.square",
        "numpy.reciprocal",
        "numpy.divide",
        "numpy.positive",
        "numpy.multiply",
        "numpy.sign",
        "numpy.absolute",
        "numpy.less_equal",
        "numpy.ldexp",
        "numpy.less",
        "numpy.isnan",
        "numpy.floor_divide",
        "numpy.not_equal",
        "numpy.minimum",
        "numpy.modf",
        "numpy.frexp",
        "numpy.subtract",
        "numpy.greater_equal",
        "numpy.conjugate",
        "numpy.signbit",
        "numpy.greater",
        "numpy.logical_or",
        "numpy.array",
        "numpy.logical_not"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_coercion": [
        "numpy.float16",
        "numpy.float32",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_fpe": [
        "numpy.errstate",
        "numpy.core.tests.test_half.assert_raises_fpe",
        "numpy.nextafter",
        "numpy.float16",
        "numpy.spacing",
        "numpy.divide",
        "numpy.array"
    ],
    "numpy.core.tests.test_half.TestHalf.test_half_array_interface": [
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.float16",
        "numpy.core.tests.test_half.TestHalf.test_half_array_interface.Dummy",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray._aligned_zeros": [
        "numpy.zeros",
        "numpy.dtype",
        "numpy.uint8",
        "numpy.ndarray",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestFlags.setup": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestFlags.test_writeable": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestFlags.test_otherflags": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestFlags.test_string_align": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned"
    ],
    "numpy.core.tests.test_multiarray.TestFlags.test_void_align": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned"
    ],
    "numpy.core.tests.test_multiarray.TestHash.test_int": [
        "numpy.uint8",
        "numpy.testing.assert_equal",
        "numpy.int64",
        "numpy.ma.core.MaskedArray.max",
        "numpy.uint16",
        "numpy.uint64",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.uint32",
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.setup": [
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_attributes": [
        "numpy.core.fromnumeric.shape",
        "numpy.arange",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim",
        "numpy.core.fromnumeric.size",
        "numpy.size"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_dtypeattr": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.int_",
        "numpy.dtype",
        "numpy.float_"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_int_subclassing": [
        "numpy.int",
        "numpy.int_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_stridesattr": [
        "numpy.core.tests.test_multiarray.TestAttributes.test_stridesattr.make_array",
        "numpy.arange",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_stridesattr.make_array": [
        "numpy.int",
        "numpy.arange",
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr": [
        "numpy.testing.assert_equal",
        "numpy.arange",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.int8",
        "numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr.make_array",
        "numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr.set_strides",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_set_stridesattr.make_array": [
        "numpy.int",
        "numpy.arange",
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_fill": [
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t",
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_fill_max_uint64": [
        "numpy.testing.assert_array_equal",
        "numpy.empty",
        "numpy.uint64"
    ],
    "numpy.core.tests.test_multiarray.TestAttributes.test_fill_struct_array": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array": [
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_empty": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_copy_false": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_copy_true": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArrayConstruction.test_array_cont": [
        "numpy.ones",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_broadcasting": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_broadcasting.assign",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_errors": [
        "numpy.zeros",
        "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_errors.assign",
        "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_errors.C"
    ],
    "numpy.core.tests.test_multiarray.TestAssignment.test_assignment_errors.assign": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_multiarray.TestAssignment.test_unicode_assignment": [
        "numpy.core.tests.test_multiarray.TestAssignment.test_unicode_assignment.inject_str",
        "numpy.core.numeric",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list": [
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestAssignment.test_longdouble_assignment": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.longdouble",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestAssignment.test_cast_to_string": [
        "numpy.zeros",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestDtypedescr.test_construction": [
        "numpy.float64",
        "numpy.int32",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestDtypedescr.test_byteorders": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestDtypedescr.test_structured_non_void": [
        "numpy.testing.assert_equal",
        "numpy.zeros",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.setup": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_empty_subscript": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_ellipsis_subscript_assignment": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_empty_subscript_assignment": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment": [
        "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_subscript_assignment.assign",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_newaxis": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_newaxis": [
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestZeroRank.test_invalid_newaxis.subscript"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_constructor": [
        "numpy.testing.assert_equal",
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestZeroRank.test_output": [
        "numpy.add",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestScalarIndexing.setup": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestScalarIndexing.test_ellipsis_subscript": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestScalarIndexing.test_empty_subscript": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment": [
        "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_subscript_assignment.assign",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestScalarIndexing.test_newaxis": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis": [
        "numpy.core.tests.test_multiarray.TestScalarIndexing.test_invalid_newaxis.subscript",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestScalarIndexing.test_overlapping_assignment": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestCreation": [
        "numpy.testing._private.decorators.skipif",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute": [
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_from_string": [
        "numpy.int",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_void": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_too_big_error": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.ma.core.max",
        "numpy.int8",
        "numpy.core.fromnumeric.shape",
        "numpy.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ones",
        "numpy.core.getlimits.iinfo.max",
        "numpy.empty",
        "numpy.zeros",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_zeros": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.count_nonzero",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_zeros_big": [
        "numpy.zeros",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_zeros_obj": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.count_nonzero",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_zeros_obj_obj": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_zeros_like_like_zeros": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.zeros_like",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_empty_unicode": [
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_sequence_non_homogenous": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_sequence_long": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail",
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type": [
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence": [
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence": [
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCreation.test_array_too_big": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.zeros",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.dtype",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_subarray_field_access": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.transpose",
        "numpy.core.fromnumeric.shape",
        "numpy.transpose",
        "numpy.testing.assert_array_equal",
        "numpy.zeros",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_subarray_comparison": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.rec.fromrecords",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.core.records.fromrecords",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.zeros",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.mrecords.fromrecords",
        "numpy.copy"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_casting": [
        "numpy.testing.assert_",
        "numpy.can_cast",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_objview": [
        "numpy.zeros",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_setfield": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_setfield_object": [
        "numpy.zeros",
        "numpy.arange",
        "numpy.core.tests.test_multiarray.TestStructured.test_setfield_object.testassign",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_setfield_object.testassign": [
        "numpy.zeros",
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_zero_width_string": [
        "numpy.ndarray",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.save",
        "numpy.load",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.int",
        "numpy.ma.core.reshape",
        "numpy.zeros",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_base_attr": [
        "numpy.zeros",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_assignment": [
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_multiarray.TestStructured.test_assignment.testassign",
        "numpy.ones",
        "npy_tempita._looper.loop_pos.item",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_structuredscalar_indexing": [
        "numpy.testing.assert_equal",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestStructured.test_multiindex_titles": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_multiarray.TestBool": [
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.core.tests.test_multiarray.TestBool.test_test_interning": [
        "numpy.bool_",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestBool.test_sum": [
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.sum",
        "numpy.ones",
        "numpy.ma.sum",
        "numpy.core.fromnumeric.size",
        "numpy.sum",
        "numpy.size",
        "numpy.frombuffer",
        "numpy.ma.core.size",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.core.tests.test_multiarray.TestBool.check_count_nonzero": [
        "numpy.uint8",
        "numpy.count_nonzero",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestBool.test_count_nonzero": [
        "numpy.core.tests.test_multiarray.TestBool.check_count_nonzero"
    ],
    "numpy.core.tests.test_multiarray.TestBool.test_count_nonzero_all": [
        "numpy.core.tests.test_multiarray.TestBool.check_count_nonzero"
    ],
    "numpy.core.tests.test_multiarray.TestBool.test_count_nonzero_unaligned": [
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.testing.assert_equal",
        "numpy.zeros",
        "numpy.ones",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.count_nonzero"
    ],
    "numpy.core.tests.test_multiarray.TestBool._test_cast_from_flexible": [
        "numpy.lib.user_array.container.astype",
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestBool.test_cast_from_void": [
        "numpy.void",
        "numpy.core.tests.test_multiarray.TestBool._test_cast_from_flexible"
    ],
    "numpy.core.tests.test_multiarray.TestBool.test_cast_from_unicode": [
        "numpy.unicode_",
        "numpy.core.tests.test_multiarray.TestBool._test_cast_from_flexible"
    ],
    "numpy.core.tests.test_multiarray.TestBool.test_cast_from_bytes": [
        "numpy.bytes_",
        "numpy.core.tests.test_multiarray.TestBool._test_cast_from_flexible"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_create": [
        "numpy.random.bytes",
        "numpy.void",
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._zeros",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition": [
        "numpy.random.bytes",
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._zeros",
        "numpy.void",
        "numpy"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_sort": [
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_argsort": [
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_partition": [
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_argpartition": [
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._test_sort_partition"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_resize": [
        "numpy.random.bytes",
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._zeros",
        "numpy.void"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_view": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.dtype",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.random.bytes",
        "numpy.void",
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._zeros",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestZeroSizeFlexible.test_pickle": [
        "numpy.dtype",
        "numpy.random.bytes",
        "numpy.core.tests.test_multiarray.TestZeroSizeFlexible._zeros",
        "numpy.void",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_compress": [
        "numpy.ma.compress",
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.compress",
        "numpy.ma.core.MaskedArray.compress",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.core.fromnumeric.compress",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_choose": [
        "numpy.int",
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_prod": [
        "numpy.int16",
        "numpy.float32",
        "numpy.int32",
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.complex64",
        "numpy.uint32",
        "numpy.uint16",
        "numpy.complex128",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_repeat": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_reshape": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_round.check_round": [
        "numpy.zeros_like",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_round": [
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestMethods.test_round.check_round"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_squeeze": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_transpose": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_sort": [
        "numpy.int",
        "numpy.core.tests.test_multiarray.TestMethods.test_sort.Boom",
        "numpy.testing.assert_equal",
        "numpy.sort",
        "numpy.arange",
        "numpy.empty",
        "numpy.complex128",
        "numpy.zeros",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_void_sort": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.sort",
        "numpy.sort",
        "numpy.empty",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_sort_raises": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.sort",
        "numpy.random.shuffle",
        "numpy.sort",
        "numpy.array",
        "numpy.ma.core.sort",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_sort_raises.Raiser": [
        "numpy.core.tests.test_multiarray.TestMethods.test_sort_raises.Raiser.raises_anything"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_sort_degraded": [
        "numpy.sort",
        "numpy.arange",
        "numpy.argsort",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_copy.assert_fortran": [
        "numpy.testing.assert_",
        "fortran"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_copy.assert_c": [
        "numpy.testing.assert_",
        "fortran"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_copy": [
        "numpy.core.tests.test_multiarray.TestMethods.test_copy.assert_fortran",
        "numpy.core.tests.test_multiarray.TestMethods.test_copy.assert_c",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_sort_order": [
        "numpy.testing.assert_equal",
        "numpy.core.records.fromarrays",
        "numpy.array",
        "npy_tempita._looper.loop_pos.number",
        "numpy.ma.mrecords.fromarrays",
        "numpy.rec.fromarrays"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_argsort": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.dtype",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.intp",
        "numpy.array",
        "numpy.zeros_like",
        "numpy.ma.copy",
        "numpy.argsort",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.int",
        "numpy.empty",
        "numpy.zeros",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_sort_unicode_kind": [
        "numpy.core.defchararray.decode",
        "numpy.core.defchararray.chararray.decode",
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted": [
        "numpy.arange",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.complex128",
        "numpy.array",
        "numpy.ones",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.empty",
        "numpy.zeros"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_unicode": [
        "numpy.arange",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_with_sorter": [
        "numpy.arange",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.random.shuffle",
        "numpy.testing.assert_equal",
        "numpy.sort",
        "numpy.linspace",
        "numpy.int16",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.intp",
        "numpy.array",
        "numpy.random.rand",
        "numpy.argsort",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.searchsorted",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.searchsorted",
        "numpy.searchsorted",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_argpartition_out_of_range": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_partition_out_of_range": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_argpartition_integer": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_partition_integer": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_partition_empty_array": [
        "numpy.partition",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_argpartition_empty_array": [
        "numpy.partition",
        "numpy.zeros_like",
        "numpy.intp",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_partition": [
        "numpy.argpartition",
        "numpy.roll",
        "numpy.arange",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.random.shuffle",
        "numpy.testing.assert_equal",
        "numpy.sort",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.isnan",
        "numpy.array",
        "numpy.transpose",
        "numpy.partition",
        "numpy.core.fromnumeric.all",
        "numpy.AxisError",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ones",
        "numpy.tile",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.assert_partitioned": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.sort",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_partition_iterative": [
        "numpy.transpose",
        "numpy.partition",
        "numpy.tile",
        "numpy.core.tests.test_multiarray.TestMethods.assert_partitioned",
        "numpy.random.shuffle",
        "numpy.argpartition",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_partition_cdtype": [
        "numpy.testing.assert_array_equal",
        "numpy.sort",
        "numpy.partition",
        "numpy.argpartition",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_partition_unicode_kind": [
        "numpy.core.defchararray.decode",
        "numpy.core.defchararray.chararray.decode",
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_partition_fuzz": [
        "numpy.arange",
        "numpy.random.shuffle",
        "numpy.sort",
        "numpy.random.randint",
        "numpy.partition",
        "numpy.testing.assert_array_equal",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_argpartition_gh5524": [
        "numpy.argpartition",
        "numpy.core.tests.test_multiarray.TestMethods.assert_partitioned",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_flatten": [
        "numpy.int32",
        "numpy.matrixlib.defmatrix.matrix.flatten",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_dot": [
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.copy",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.float32",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.shape",
        "numpy.array",
        "numpy.copy",
        "numpy.complex64",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.complex128",
        "numpy.float64",
        "numpy.dot",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype",
        "numpy.lib.function_base.copy",
        "numpy.testing.assert_equal",
        "numpy.zeros_like",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_dot_type_mismatch": [
        "numpy.array",
        "numpy.dot"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_dot_out_mem_overlap": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.tests.test_multiarray._aligned_zeros",
        "numpy.testing.assert_equal",
        "numpy.random.seed",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_out.Sub": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_out": [
        "numpy.ma.masked.view",
        "numpy.core.tests.test_multiarray.TestMethods.test_dot_matmul_out.Sub",
        "numpy.matmul",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ones",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.dot"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_diagonal": [
        "numpy.AxisError",
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.diagonal",
        "numpy.core.fromnumeric.diagonal",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_diagonal_view_notwriteable": [
        "numpy.testing.assert_",
        "numpy.diag",
        "numpy.diagonal",
        "numpy.eye"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_diagonal_memleak": [
        "numpy.zeros",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_size_zero_memleak": [
        "numpy.testing.assert_",
        "numpy.float64",
        "numpy.dot",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_trace": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.trace",
        "numpy.core.fromnumeric.trace",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedArray.trace",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_trace_subclass.MyArray": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_trace_subclass": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.trace",
        "numpy.core.fromnumeric.trace",
        "numpy.core.tests.test_multiarray.TestMethods.test_trace_subclass.MyArray",
        "numpy.ma.core.MaskedArray.trace",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_put": [
        "numpy.zeros",
        "numpy.put",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_ravel": [
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.may_share_memory",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ravel",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.lib.polynomial.poly1d.order",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.swapaxes",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_ravel_subclass.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_ravel_subclass": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ravel",
        "numpy.ma.masked.view",
        "numpy.core.fromnumeric.ravel",
        "numpy.core.tests.test_multiarray.TestMethods.test_ravel_subclass.ArraySubclass",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.matrixlib.defmatrix.matrix.ravel"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_swapaxes": [
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.lib.function_base.i0",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.shape",
        "numpy.indices",
        "numpy.AxisError",
        "numpy.copy",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.shape",
        "numpy.swapaxes",
        "numpy.lib.function_base.copy",
        "numpy.testing.assert_equal",
        "numpy.lib.user_array.container.copy"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test_conjugate": [
        "numpy.array",
        "numpy.conjugate",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test__complex__": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMethods.test__complex__should_not_work": [
        "numpy.array",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_multiarray.TestCequenceMethods.test_array_contains": [
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_inplace": [
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction": [
        "numpy.bitwise_and",
        "numpy.bitwise_xor",
        "numpy.ndarray",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.array_ufunc_impl",
        "numpy.int",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.make_obj",
        "numpy.remainder",
        "numpy.divmod",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.check",
        "numpy.true_divide",
        "numpy.add",
        "numpy.multiply",
        "numpy.floor_divide",
        "numpy.subtract",
        "numpy.power",
        "numpy.bitwise_or"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.array_impl": [
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.Coerced"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.array_ufunc_impl": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.make_obj": [
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.iop_impl",
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.int",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.op_impl",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.array_impl",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.rop_impl"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.check": [
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors.PowerOnly.__array_ufunc__",
        "numpy.ndarray",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A.__array_ufunc__",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.arange",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.B.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.C.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A.__array_ufunc__",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.B.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_disabled.GreedyArray.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A.__array_ufunc__",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.B.__array_ufunc__",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.Coerced",
        "numpy.lib.tests.test_mixins.ArrayLike.__array_ufunc__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_structured_equal.MyA.__array_ufunc__",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.check.first_out_arg",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature.SomeClass.__array_ufunc__",
        "numpy.core.tests.test_multiarray.TestBinop.test_array_ufunc_index.CheckIndex.__array_ufunc__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A.__array_ufunc__",
        "numpy.core.tests.test_multiarray.TestBinop.test_out_override.OutClass.__array_ufunc__"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_binop_interaction.check.first_out_arg": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature.SomeClass.__array_ufunc__": [
        "numpy.add"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature": [
        "numpy.testing.assert_",
        "numpy.add",
        "numpy.core.tests.test_multiarray.TestBinop.test_ufunc_override_normalize_signature.SomeClass",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_array_ufunc_index": [
        "numpy.sin",
        "numpy.modf",
        "numpy.testing.assert_",
        "numpy.add",
        "numpy.arange",
        "numpy.core.tests.test_multiarray.TestBinop.test_array_ufunc_index.CheckIndex",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_out_override.OutClass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_out_override.OutClass.__array_ufunc__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_out_override": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.multiply",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_multiarray.TestBinop.test_out_override.OutClass",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors.PowerOnly": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors.PowerOnly.__array_ufunc__": [
        "numpy.power"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors": [
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_override_with_errors.PowerOnly",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass": [
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__pow__"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__pow__": [
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.pow_for": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype": [
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.pow_for",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide": [
        "numpy.ones",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestTemporaryElide.test_extension_incref_elide_stack": [
        "numpy.ones",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestTemporaryElide.test_temporary_with_cast": [
        "numpy.testing.assert_equal",
        "numpy.float32",
        "numpy.int64",
        "numpy.true_divide",
        "numpy.clongdouble",
        "numpy.complex128",
        "numpy.ones",
        "numpy.complex64",
        "numpy.abs",
        "numpy.longdouble",
        "numpy.dtype",
        "numpy.float64"
    ],
    "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_broadcast": [
        "numpy.int",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_scalar": [
        "numpy.testing.assert_",
        "numpy.bool_"
    ],
    "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_scalar_readonly": [
        "numpy.float64",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_readonly": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_equal",
        "numpy.asarray",
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.core.tests.test_multiarray.TestTemporaryElide.test_elide_updateifcopy": [
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.lib.polynomial.poly1d.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.ones",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__",
        "numpy.lib.user_array.container.__array__",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__"
    ],
    "numpy.core.tests.test_multiarray.TestCAPI.test_IsPythonScalar": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestSubscripting.test_test_zero_rank": [
        "numpy.ndarray",
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.int_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestPickling.test_roundtrip": [
        "numpy.int",
        "numpy.transpose",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestPickling.test_version0_int8": [
        "numpy.int8",
        "numpy.core.tests.test_multiarray.TestPickling._loads",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestPickling.test_version0_float32": [
        "numpy.core.tests.test_multiarray.TestPickling._loads",
        "numpy.float32",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestPickling.test_version0_object": [
        "numpy.core.tests.test_multiarray.TestPickling._loads",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestPickling.test_version1_int8": [
        "numpy.int8",
        "numpy.core.tests.test_multiarray.TestPickling._loads",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestPickling.test_version1_float32": [
        "numpy.core.tests.test_multiarray.TestPickling._loads",
        "numpy.float32",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestPickling.test_version1_object": [
        "numpy.core.tests.test_multiarray.TestPickling._loads",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestPickling.test_subarray_int_shape": [
        "numpy.core.tests.test_multiarray.TestPickling._loads",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestFancyIndexing.test_list": [
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestFancyIndexing.test_tuple": [
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestFancyIndexing.test_mask": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestFancyIndexing.test_mask2": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestFancyIndexing.test_assign_mask": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestFancyIndexing.test_assign_mask2": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStringCompare.test_string": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStringCompare.test_mixed": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_callable.g2",
        "numpy.testing.tests.test_decorators.TestNoseDecorators.test_skip_generators_hardcoded.g2",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStringCompare.test_unicode": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmax": [
        "numpy.datetime64",
        "numpy.timedelta64"
    ],
    "numpy.core.tests.test_multiarray.TestArgmax.test_all": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.fromnumeric.choose",
        "numpy.random.normal",
        "numpy.argmax",
        "numpy.core.fromnumeric.transpose",
        "numpy.core.fromnumeric.argmax",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.transpose",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.argmax",
        "numpy.core.fromnumeric.ndim",
        "numpy.core.getlimits.iinfo.max",
        "numpy.choose",
        "numpy.ma.core.MaskedArray.argmax",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.ma.core.ndim",
        "numpy.all",
        "numpy.ndim",
        "numpy.ma.core.choose"
    ],
    "numpy.core.tests.test_multiarray.TestArgmax.test_combinations": [
        "numpy.argmax",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmax.test_output_shape": [
        "numpy.ones",
        "numpy.int_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmax.test_argmax_unicode": [
        "numpy.zeros",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmax.test_np_vs_ndarray": [
        "numpy.int",
        "numpy.zeros",
        "numpy.argmax",
        "numpy.testing.assert_equal",
        "numpy.random.normal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmax.test_object_argmax_with_NULLs": [
        "numpy.testing.assert_equal",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestArgmin": [
        "numpy.datetime64",
        "numpy.timedelta64"
    ],
    "numpy.core.tests.test_multiarray.TestArgmin.test_all": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.core.fromnumeric.choose",
        "numpy.random.normal",
        "numpy.core.fromnumeric.transpose",
        "numpy.ma.core.min",
        "numpy.core.fromnumeric.argmin",
        "numpy.argmin",
        "numpy.transpose",
        "numpy.min",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.matrixlib.defmatrix.matrix.argmin",
        "numpy.core.getlimits.iinfo.min",
        "numpy.choose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.ma.core.ndim",
        "numpy.all",
        "numpy.ndim",
        "numpy.ma.core.MaskedArray.argmin",
        "numpy.ma.core.choose"
    ],
    "numpy.core.tests.test_multiarray.TestArgmin.test_combinations": [
        "numpy.argmin",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmin.test_minimum_signed_integers": [
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.int64",
        "numpy.argmin",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmin.test_output_shape": [
        "numpy.ones",
        "numpy.int_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmin.test_argmin_unicode": [
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmin.test_np_vs_ndarray": [
        "numpy.int",
        "numpy.zeros",
        "numpy.ones",
        "numpy.argmin",
        "numpy.testing.assert_equal",
        "numpy.random.normal"
    ],
    "numpy.core.tests.test_multiarray.TestArgmin.test_object_argmin_with_NULLs": [
        "numpy.testing.assert_equal",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestMinMax.test_scalar": [
        "numpy.AxisError",
        "numpy.amax",
        "numpy.amin",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMinMax.test_axis": [
        "numpy.amax",
        "numpy.AxisError",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMinMax.test_datetime": [
        "numpy.lib.user_array.container.astype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.amax",
        "numpy.amin"
    ],
    "numpy.core.tests.test_multiarray.TestNewaxis.test_basic": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestClip._check_range": [
        "numpy.all",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestClip._clip_type": [
        "numpy.lib.user_array.container.astype",
        "numpy.clip",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_multiarray.TestClip._check_range",
        "numpy.core.fromnumeric.clip",
        "numpy.core.tests.test_numeric.TestClip.clip"
    ],
    "numpy.core.tests.test_multiarray.TestClip.test_basic": [
        "numpy.core.tests.test_multiarray.TestClip._clip_type"
    ],
    "numpy.core.tests.test_multiarray.TestClip.test_record_array": [
        "numpy.core.tests.test_multiarray.TestClip._check_range",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.fromnumeric.clip",
        "numpy.clip",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestClip.test_max_or_min": [
        "numpy.array",
        "numpy.all",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestClip.test_nan": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCompress.test_axis": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.compress",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestCompress.test_truncate": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.compress",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestCompress.test_flatten": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.compress",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestPutmask.tst_basic": [
        "numpy.testing.assert_equal",
        "numpy.putmask"
    ],
    "numpy.core.tests.test_multiarray.TestPutmask.test_ip_types": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.tests.test_multiarray.TestPutmask.tst_basic",
        "numpy.sctypes.values",
        "numpy.sctypeDict.values",
        "numpy.random.bytes",
        "numpy.random.random",
        "numpy.void",
        "numpy.typeDict.values"
    ],
    "numpy.core.tests.test_multiarray.TestPutmask.test_mask_size": [
        "numpy.array",
        "numpy.putmask"
    ],
    "numpy.core.tests.test_multiarray.TestPutmask.tst_byteorder": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.putmask"
    ],
    "numpy.core.tests.test_multiarray.TestPutmask.test_ip_byteorder": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestPutmask.tst_byteorder"
    ],
    "numpy.core.tests.test_multiarray.TestPutmask.test_record_array": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.putmask"
    ],
    "numpy.core.tests.test_multiarray.TestTake.tst_basic": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestTake.test_ip_types": [
        "numpy.lib.user_array.container.astype",
        "numpy.sctypes.values",
        "numpy.core.tests.test_multiarray.TestTake.tst_basic",
        "numpy.sctypeDict.values",
        "numpy.random.bytes",
        "numpy.random.random",
        "numpy.void",
        "numpy.typeDict.values"
    ],
    "numpy.core.tests.test_multiarray.TestTake.test_raise": [
        "numpy.take",
        "numpy.random.random",
        "numpy.testing.assert_array_equal",
        "numpy.core.fromnumeric.take",
        "numpy.ma.core.MaskedArray.take",
        "numpy.ma.core.take"
    ],
    "numpy.core.tests.test_multiarray.TestTake.test_clip": [
        "numpy.take",
        "numpy.random.random",
        "numpy.testing.assert_array_equal",
        "numpy.core.fromnumeric.take",
        "numpy.ma.core.MaskedArray.take",
        "numpy.ma.core.take"
    ],
    "numpy.core.tests.test_multiarray.TestTake.test_wrap": [
        "numpy.take",
        "numpy.random.random",
        "numpy.testing.assert_array_equal",
        "numpy.core.fromnumeric.take",
        "numpy.ma.core.MaskedArray.take",
        "numpy.ma.core.take"
    ],
    "numpy.core.tests.test_multiarray.TestTake.tst_byteorder": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestTake.test_ip_byteorder": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestTake.tst_byteorder"
    ],
    "numpy.core.tests.test_multiarray.TestTake.test_record_array": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestLexsort.test_basic": [
        "numpy.lexsort",
        "npy_tempita.compat3.b",
        "numpy.testing.assert_array_equal",
        "numpy.vstack",
        "numpy.sort",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestLexsort.test_datetime": [
        "numpy.lexsort",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestLexsort.test_object": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_array_equal",
        "numpy.argsort",
        "numpy.lexsort",
        "numpy.random.choice",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestLexsort.test_invalid_axis": [
        "numpy.AxisError",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.lexsort",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestIO": [
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.core.tests.test_multiarray.TestIO.setup": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.random.random",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_nofile": [
        "numpy.fromfile",
        "numpy.ones",
        "numpy.uint8"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_bool_fromstring": [
        "numpy.bool_",
        "numpy.fromstring",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_uint64_fromstring": [
        "numpy.array",
        "numpy.uint64",
        "numpy.fromstring",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_int64_fromstring": [
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.fromstring",
        "numpy.int64"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_empty_files_binary": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.fromfile",
        "numpy.testing.assert_",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_empty_files_text": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.fromfile",
        "numpy.testing.assert_",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_file": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.core.MaskedArray.tofile",
        "numpy.dtype",
        "numpy.lib._datasource.DataSource.open",
        "numpy.fromfile",
        "numpy.testing.assert_array_equal",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib._datasource.open"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_filename": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.core.MaskedArray.tofile",
        "numpy.dtype",
        "numpy.fromfile",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_binary_str": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.core.MaskedArray.tobytes",
        "numpy.dtype",
        "numpy.matrixlib.defmatrix.matrix.flatten",
        "numpy.testing.assert_array_equal",
        "numpy.frombuffer"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_str": [
        "numpy.isfinite",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.testing.assert_array_equal",
        "numpy.fromstring",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_roundtrip_repr": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.testing.assert_array_equal",
        "numpy.fromstring",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.ma.core.MaskedArray.tofile",
        "numpy.dtype",
        "numpy.fromfile",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_io_open_unbuffered_fromfile": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.core.MaskedArray.tofile",
        "numpy.dtype",
        "numpy.fromfile",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_largish_file": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.testing.assert_equal",
        "numpy.fromfile",
        "numpy.testing.assert_array_equal",
        "numpy.lib._datasource.DataSource.open",
        "numpy.zeros",
        "numpy.lib._datasource.open"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_io_open_buffered_fromfile": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.core.MaskedArray.tofile",
        "numpy.dtype",
        "numpy.fromfile",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_file_position_after_fromfile": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.testing.assert_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.float64",
        "numpy.fromfile",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_file_position_after_tofile": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.ma.core.MaskedArray.tofile",
        "numpy.testing.assert_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpy.core.tests.test_multiarray.TestIO._check_from": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_array_equal",
        "numpy.fromfile",
        "numpy.fromstring",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.frombuffer",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_nan": [
        "numpy.core.tests.test_multiarray.TestIO._check_from"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_inf": [
        "numpy.core.tests.test_multiarray.TestIO._check_from"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_numbers": [
        "numpy.core.tests.test_multiarray.TestIO._check_from"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_binary": [
        "numpy.core.tests.test_multiarray.TestIO._check_from",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_big_binary": [
        "numpy.core.fromnumeric.all",
        "numpy.fromfile",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.arange",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.int8",
        "numpy.ma.core.MaskedArray.tofile"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_string": [
        "numpy.core.tests.test_multiarray.TestIO._check_from"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_counted_string": [
        "numpy.core.tests.test_multiarray.TestIO._check_from"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_string_with_ws": [
        "numpy.core.tests.test_multiarray.TestIO._check_from",
        "numpy.int"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_counted_string_with_ws": [
        "numpy.core.tests.test_multiarray.TestIO._check_from",
        "numpy.int"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_ascii": [
        "numpy.core.tests.test_multiarray.TestIO._check_from"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_malformed": [
        "numpy.core.tests.test_multiarray.TestIO._check_from"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_long_sep": [
        "numpy.core.tests.test_multiarray.TestIO._check_from"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_dtype": [
        "numpy.core.tests.test_multiarray.TestIO._check_from",
        "numpy.int_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_dtype_bool": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.fromfile",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_tofile_sep": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.testing.assert_array_equal",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_tofile_format": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.testing.assert_equal",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestIO.test_locale": [
        "numpy.core.tests.test_multiarray.TestIO.test_malformed",
        "numpy.core.tests.test_multiarray.TestIO.test_tofile_format",
        "numpy.core.tests._locales.CommaDecimalPointLocale.__enter__",
        "numpy.core.tests._locales.CommaDecimalPointLocale.__exit__",
        "numpy.core.tests.test_multiarray.TestIO.test_nan",
        "numpy.core.tests.test_multiarray.TestIO.test_counted_string",
        "numpy.core.tests.test_multiarray.TestIO.test_inf",
        "numpy.core.tests.test_multiarray.TestIO.test_numbers",
        "numpy.core.tests._locales.CommaDecimalPointLocale",
        "numpy.core.tests.test_multiarray.TestIO.test_ascii",
        "numpy.core.tests.test_multiarray.TestIO.test_tofile_sep"
    ],
    "numpy.core.tests.test_multiarray.TestFromBuffer.tst_basic": [
        "numpy.frombuffer",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestFromBuffer.test_ip_basic": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.core.tests.test_multiarray.TestFromBuffer.tst_basic",
        "numpy.ma.core.MaskedArray.tobytes",
        "numpy.int"
    ],
    "numpy.core.tests.test_multiarray.TestFromBuffer.test_empty": [
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestFromBuffer.tst_basic"
    ],
    "numpy.core.tests.test_multiarray.TestFlat.setup": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestFlat.test_contiguous": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestFlat.test_discontiguous": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestFlat.test___array__": [
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.lib.polynomial.poly1d.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__",
        "numpy.lib.user_array.container.__array__",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_basic": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_array_equal",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_check_reference": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_int_shape": [
        "numpy.testing.assert_array_equal",
        "numpy.eye"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_none_shape": [
        "numpy.eye",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_0d_shape": [
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_invalid_arguments": [
        "numpy.resize",
        "numpy.ma.core.MaskedArray.resize",
        "numpy.ma.core.resize",
        "numpy.core.fromnumeric.resize"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_freeform_shape": [
        "numpy.testing.assert_",
        "numpy.eye"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_zeros_appended": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.eye"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_obj_obj": [
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestResize.test_empty_view": [
        "numpy.int",
        "numpy.zeros"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_field_rename": [
        "numpy.int",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_occurrence.test_assign": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_occurrence": [
        "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_occurrence.test_assign"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_bytes_fields": [
        "numpy.int",
        "numpy.array",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_unicode.test_assign_unicode": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_unicode": [
        "numpy.core.tests.test_multiarray.TestRecord.test_multiple_field_name_unicode.test_assign_unicode"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_unicode_field_titles": [
        "numpy.int",
        "numpy.core.defchararray.title",
        "numpy.dtype",
        "numpy.core.defchararray.chararray.title",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_unicode_field_names": [
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_field_names": [
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.testing.assert_equal",
        "numpy.zeros",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_record_hash": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_record_no_hash": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestRecord.test_empty_structure_creation": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestView.test_basic": [
        "numpy.int8",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray._mean": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_multiarray._var": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_multiarray._std": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_multiarray.TestStats": [
        "numpy.core.tests.test_multiarray._var",
        "numpy.core.tests.test_multiarray._std",
        "numpy.core.tests.test_multiarray._mean"
    ],
    "numpy.core.tests.test_multiarray.TestStats.setup": [
        "numpy.random.random",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_python_type": [
        "numpy.mean",
        "numpy.std",
        "numpy.float16",
        "numpy.var",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_keepdims": [
        "numpy.testing.assert_",
        "numpy.eye",
        "numpy.core.tests.test_multiarray._std"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_out": [
        "numpy.core.tests.test_multiarray._std",
        "numpy.zeros",
        "numpy.eye",
        "numpy.empty",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_dtype_from_input": [
        "numpy.core.tests.test_multiarray._var",
        "numpy.eye",
        "numpy.core.tests.test_multiarray._std",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.float64",
        "numpy.core.tests.test_multiarray._mean"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_dtype_from_dtype": [
        "numpy.eye",
        "numpy.core.tests.test_multiarray._std",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_ddof": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.random.random",
        "numpy.core.tests.test_multiarray._var",
        "numpy.core.tests.test_multiarray._std",
        "numpy.sqrt",
        "numpy.testing.assert_almost_equal",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_ddof_too_big": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.any",
        "numpy.random.random",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.core.tests.test_multiarray._var",
        "numpy.core.tests.test_multiarray._std",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_empty": [
        "numpy.core.fromnumeric.all",
        "numpy.core.tests.test_multiarray._std",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.zeros",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_mean_values": [
        "numpy.random.random",
        "numpy.prod",
        "numpy.core.tests.test_multiarray._mean",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_mean_float16": [
        "numpy.core.tests.test_multiarray._mean",
        "numpy.ones",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_var_values": [
        "numpy.core.tests.test_multiarray._var",
        "numpy.random.random",
        "numpy.core.tests.test_multiarray._mean",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_std_values": [
        "numpy.sqrt",
        "numpy.core.tests.test_multiarray._var",
        "numpy.random.random",
        "numpy.core.tests.test_multiarray._std",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_subclass.TestArray": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_subclass.TestArray.__new__": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStats.test_subclass": [
        "numpy.core.fromnumeric.var",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.core.fromnumeric.std",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.matrixlib.defmatrix.matrix.std",
        "numpy.core.tests.test_multiarray.TestStats.test_subclass.TestArray",
        "numpy.matrixlib.defmatrix.matrix.var",
        "numpy.testing.assert_",
        "numpy.lib.utils.info",
        "numpy.info",
        "numpy.ma.core.MaskedArray.var",
        "numpy.mean",
        "numpy.ma.core.MaskedArray.std",
        "numpy.std",
        "numpy.var",
        "numpy.core.fromnumeric.mean",
        "numpy.ma.mean"
    ],
    "numpy.core.tests.test_multiarray.TestVdot.test_basic": [
        "numpy.testing.assert_",
        "numpy.vdot",
        "numpy.isscalar",
        "numpy.eye",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestVdot.test_vdot_array_order": [
        "numpy.vdot",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestVdot.test_vdot_uncontiguous": [
        "numpy.arange",
        "numpy.vdot",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.size",
        "numpy.zeros",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.core.tests.test_multiarray.TestDot.setup": [
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.random.seed",
        "numpy.random.rand"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotmatmat": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.core.fromnumeric.transpose",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotmatvec": [
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotmatvec2": [
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotvecmat": [
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotvecmat2": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.core.fromnumeric.transpose",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotvecmat3": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.core.fromnumeric.transpose",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotvecvecouter": [
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotvecvecinner": [
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotcolumnvect1": [
        "numpy.matlib.rand",
        "numpy.ones",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotcolumnvect2": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.core.fromnumeric.transpose",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotvecscalar": [
        "numpy.matlib.rand",
        "numpy.random.seed",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dotvecscalar2": [
        "numpy.matlib.rand",
        "numpy.random.seed",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_all": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.dot",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__add__": [
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__sub__": [
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__mul__": [
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_vecobject": [
        "numpy.transpose",
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.ascontiguousarray",
        "numpy.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.dot",
        "numpy.core.records.array",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dot_2args": [
        "numpy.core.multiarray.dot",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dot_3args": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.random.random_sample",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.random.seed",
        "numpy.ma.copy",
        "numpy.core.multiarray.dot",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.empty",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dot_3args_errors": [
        "numpy.int",
        "numpy.random.random_sample",
        "numpy.core.multiarray.dot",
        "numpy.float32",
        "numpy.empty",
        "numpy.random.seed"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_dot_array_order": [
        "numpy.dot",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.aligned_array": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.masked.view",
        "numpy.prod",
        "numpy.uint8",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.reshape",
        "numpy.zeros",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.as_aligned": [
        "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.aligned_array"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.assert_dot_close": [
        "numpy.dot"
    ],
    "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix": [
        "numpy.float32",
        "numpy.matlib.rand",
        "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.assert_dot_close",
        "numpy.testing._private.utils.rand",
        "numpy.dot",
        "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.aligned_array",
        "numpy.random.rand",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_multiarray.TestDot.test_accelerate_framework_sgemv_fix.as_aligned"
    ],
    "numpy.core.tests.test_multiarray.MatmulCommon.test_exceptions": [
        "numpy.matmul",
        "numpy.ones"
    ],
    "numpy.core.tests.test_multiarray.MatmulCommon.test_shapes": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.matmul",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.MatmulCommon.test_result_types": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.matmul"
    ],
    "numpy.core.tests.test_multiarray.MatmulCommon.test_vector_vector_values": [
        "numpy.matmul",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.MatmulCommon.test_vector_matrix_values": [
        "numpy.matmul",
        "numpy.stack",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.MatmulCommon.test_matrix_vector_values": [
        "numpy.matmul",
        "numpy.stack",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.MatmulCommon.test_matrix_matrix_values": [
        "numpy.matmul",
        "numpy.stack",
        "numpy.bool_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMatmul": [
        "numpy.matmul",
        "numpy.core.tests.test_multiarray.MatmulCommon"
    ],
    "numpy.core.tests.test_multiarray.TestMatmul.test_out_arg": [
        "numpy.zeros",
        "numpy.int32",
        "numpy.testing.assert_array_equal",
        "numpy.matmul",
        "numpy.ones",
        "numpy.full"
    ],
    "numpy.core.tests.test_multiarray.TestMatmulOperator": [
        "numpy.core.tests.test_multiarray.MatmulCommon"
    ],
    "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override": [
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.test_matmul_inplace": [
        "numpy.eye"
    ],
    "numpy.core.tests.test_multiarray.TestInner.test_inner_type_mismatch": [
        "numpy.array",
        "numpy.inner"
    ],
    "numpy.core.tests.test_multiarray.TestInner.test_inner_scalar_and_vector": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.inner"
    ],
    "numpy.core.tests.test_multiarray.TestInner.test_vecself": [
        "numpy.zeros",
        "numpy.float64",
        "numpy.testing.assert_almost_equal",
        "numpy.inner"
    ],
    "numpy.core.tests.test_multiarray.TestInner.test_inner_product_with_various_contiguities": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.array",
        "npy_tempita._looper.loop_pos.item",
        "numpy.inner"
    ],
    "numpy.core.tests.test_multiarray.TestInner.test_3d_tensor": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.fromnumeric.transpose",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.inner"
    ],
    "numpy.core.tests.test_multiarray.TestAlen.test_basic": [
        "numpy.alen",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestAlen.test_singleton": [
        "numpy.alen",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestChoose.setup": [
        "numpy.ones",
        "numpy.int"
    ],
    "numpy.core.tests.test_multiarray.TestChoose.test_basic": [
        "numpy.choose",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestChoose.test_broadcast1": [
        "numpy.choose",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestChoose.test_broadcast2": [
        "numpy.choose",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestRepeat.setup": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestRepeat.test_basic": [
        "numpy.repeat",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestRepeat.test_broadcast1": [
        "numpy.repeat",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestRepeat.test_axis_spec": [
        "numpy.repeat",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestRepeat.test_broadcast2": [
        "numpy.repeat",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_simple2d": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple2d": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_simple2d"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple2d_object": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_simple2d"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_mirror2d": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_mirror2d"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror2d_object": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_mirror2d"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_simple": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple_float": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_simple"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_simple_object": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_simple"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_mirror": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_mirror"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_mirror_object": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_mirror"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_circular": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_circular": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_circular"
    ],
    "numpy.core.tests.test_multiarray.TestNeighborhoodIter.test_circular_object": [
        "numpy.core.tests.test_multiarray.TestNeighborhoodIter._test_circular"
    ],
    "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_const": [
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_mirror": [
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_circular": [
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestStackedNeighborhoodIter.test_simple_strict_within": [
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestWarnings.test_complex_warning": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_shortshort": [
        "numpy.min_scalar_type",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_short": [
        "numpy.min_scalar_type",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_int": [
        "numpy.min_scalar_type",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMinScalarType.test_usigned_longlong": [
        "numpy.min_scalar_type",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestMinScalarType.test_object": [
        "numpy.min_scalar_type",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check": [
        "numpy.core._internal._dtype_from_pep3118",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_2": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_native_padding_3": [
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_padding_with_array_inside_struct": [
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_byteorder_inside_struct": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_char_vs_string": [
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_field_order": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_unnamed_fields": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype._check"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_equal",
        "numpy.asarray",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip": [
        "numpy.int",
        "numpy.zeros",
        "numpy.csingle",
        "numpy.float32",
        "numpy.longdouble",
        "numpy.half",
        "numpy.double",
        "numpy.cdouble",
        "numpy.clongdouble",
        "numpy.float64",
        "numpy.single",
        "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_half": [
        "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_single_types": [
        "numpy.zeros",
        "numpy.dtype",
        "numpy.sctypes.values",
        "numpy.sctypeDict.values",
        "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip",
        "numpy.typeDict.values"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_roundtrip_scalar": [
        "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_1d": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_simple_nd": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.float64",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_discontiguous": [
        "numpy.core.fromnumeric.shape",
        "numpy.zeros",
        "numpy.float32",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_record": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.clongdouble",
        "numpy.core.getlimits.iinfo.max",
        "numpy.sum",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.array",
        "numpy.ma.sum",
        "numpy.cdouble",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.single",
        "numpy.csingle",
        "numpy.longdouble",
        "numpy.half",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.fromnumeric.ndim",
        "numpy.double",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_subarray": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_endian": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_export_flags": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_padding": [
        "numpy.int",
        "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_reference_leak": [
        "numpy.zeros",
        "numpy.asarray",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_padded_struct_array": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip",
        "numpy.dtype",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_relaxed_strides": [
        "numpy.testing.assert_",
        "numpy.ones"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_out_of_order_fields": [
        "numpy.dtype",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_max_dims": [
        "numpy.core.tests.test_multiarray.TestNewBufferProtocol._check_roundtrip",
        "numpy.empty"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_too_many_dims": [
        "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_too_many_dims.make_ctype",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.core.tests.test_multiarray.TestNewBufferProtocol.test_error_pointer_type": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_writable_attributes_deletion": [
        "numpy.ones",
        "npy_tempita.attr"
    ],
    "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_not_writable_attributes_deletion": [
        "numpy.ones",
        "npy_tempita.attr"
    ],
    "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_writable_attribute_deletion": [
        "npy_tempita.attr"
    ],
    "numpy.core.tests.test_multiarray.TestArrayAttributeDeletion.test_multiarray_flags_not_writable_attribute_deletion": [
        "npy_tempita.attr"
    ],
    "numpy.core.tests.test_multiarray.test_array_interface": [
        "numpy.core.tests.test_multiarray.test_array_interface.Foo",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.ArrayLike",
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.test_array_interface.ArrayLike": [
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.test_array_interface_itemsize": [
        "numpy.ones",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.test_array_interface_empty_shape": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.tests.test_multiarray.test_array_interface_empty_shape.DummyArray2",
        "numpy.asarray",
        "numpy.core.tests.test_multiarray.test_array_interface_empty_shape.DummyArray1",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.tobytes",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.test_flat_element_deletion": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.core.tests.test_multiarray.test_scalar_element_deletion": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_multiarray.TestMemEventHook.test_mem_seteventhook": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_multiarray.TestMapIter.test_mapiter": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.defchararray.index",
        "numpy.testing.assert_equal",
        "numpy.core.defchararray.chararray.index",
        "numpy.array",
        "numpy.char.index",
        "npy_tempita._looper.loop_pos.index"
    ],
    "numpy.core.tests.test_multiarray.TestAsCArray.test_1darray": [
        "numpy.double",
        "numpy.testing.assert_equal",
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestAsCArray.test_2darray": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestAsCArray.test_3darray": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestConversion.test_array_scalar_relational_operation": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestConversion.test_to_bool_scalar": [
        "numpy.core.tests.test_multiarray.TestConversion.test_to_bool_scalar.NotConvertible",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestConversion.test_to_bool_scalar.NotConvertible": [
        "numpy.core.tests.test_multiarray.TestConversion.test_to_bool_scalar.NotConvertible.__bool__"
    ],
    "numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar": [
        "numpy.int",
        "numpy.unicode_",
        "numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar.HasTrunc",
        "numpy.core.tests.test_multiarray.TestConversion.test_to_int_scalar.NotConvertible",
        "numpy.array",
        "numpy.bytes_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_basic": [
        "numpy.lib.user_array.container.astype",
        "numpy.int64",
        "numpy.testing.assert_equal",
        "numpy.complex128",
        "numpy.int16",
        "numpy.int32",
        "numpy.longdouble",
        "numpy.where",
        "numpy.zeros_like",
        "numpy.clongdouble",
        "numpy.ones",
        "numpy.double"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_exotic": [
        "numpy.float32",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.float64",
        "numpy.where",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_ndim": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.where",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_dtype_mix": [
        "numpy.int",
        "numpy.float32",
        "numpy.int64",
        "numpy.float64",
        "numpy.where",
        "numpy.uint32",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_foreign": [
        "numpy.ones",
        "numpy.float64",
        "numpy.where",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_error": [
        "numpy.ones",
        "numpy.where"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_string": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.where"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_empty_result": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.vstack",
        "numpy.where",
        "numpy.atleast_2d",
        "numpy.intp",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestWhere.test_largedim": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.nonzero",
        "numpy.ma.nonzero",
        "numpy.random.seed",
        "numpy.core.fromnumeric.nonzero",
        "numpy.matlib.rand",
        "numpy.core.fromnumeric.shape",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_empty_array": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.check_array": [
        "npy_tempita._looper.loop_pos.length",
        "numpy.testing.assert_",
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_array_int32": [
        "numpy.core.tests.test_multiarray.TestSizeOf.check_array",
        "numpy.int32"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_array_int64": [
        "numpy.core.tests.test_multiarray.TestSizeOf.check_array",
        "numpy.int64"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_array_float32": [
        "numpy.core.tests.test_multiarray.TestSizeOf.check_array",
        "numpy.float32"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_array_float64": [
        "numpy.core.tests.test_multiarray.TestSizeOf.check_array",
        "numpy.float64"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_view": [
        "numpy.ones",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_reshape": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ones",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_resize": [
        "numpy.ones",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestSizeOf.test_error": [
        "numpy.ones"
    ],
    "numpy.core.tests.test_multiarray.TestHashing.test_arrays_not_hashable": [
        "numpy.ones"
    ],
    "numpy.core.tests.test_multiarray.TestHashing.test_collections_hashable": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.Foo": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.Foo.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.Bar": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.Bar.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.Other": [
        "numpy.core.tests.test_multiarray.TestArrayPriority.Other._all"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.test_ndarray_subclass": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_multiarray.TestArrayPriority.Bar",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.test_ndarray_other": [
        "numpy.core.tests.test_multiarray.TestArrayPriority.Other",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.test_subclass_subclass": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_multiarray.TestArrayPriority.Foo",
        "numpy.core.tests.test_multiarray.TestArrayPriority.Bar"
    ],
    "numpy.core.tests.test_multiarray.TestArrayPriority.test_subclass_other": [
        "numpy.core.tests.test_multiarray.TestArrayPriority.Other",
        "numpy.testing.assert_",
        "numpy.core.tests.test_multiarray.TestArrayPriority.Foo"
    ],
    "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_empty_bstring_array_is_falsey": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_whitespace_bstring_array_is_falsey": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_all_null_bstring_array_is_falsey": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestBytestringArrayNonzero.test_null_inside_bstring_array_is_truthy": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_empty_ustring_array_is_falsey": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_whitespace_ustring_array_is_falsey": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_all_null_ustring_array_is_falsey": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestUnicodeArrayNonzero.test_null_inside_ustring_array_is_truthy": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestFormat.test_0d": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestFormat.test_1d_no_format": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestFormat.test_1d_format": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_is_available": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.core._internal._ctypes",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestCTypes.test_ctypes_is_not_available": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.core._internal._missing_ctypes",
        "numpy.core._internal._ctypes",
        "numpy.core",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_argmax_with_out": [
        "numpy.argmax",
        "numpy.eye",
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_argmin_with_out": [
        "numpy.argmin",
        "numpy.eye",
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_clip_with_out": [
        "numpy.clip",
        "numpy.testing.assert_equal",
        "numpy.sum",
        "numpy.eye"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_insert_noncontiguous": [
        "numpy.testing.assert_equal",
        "numpy.place",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_put_noncontiguous": [
        "numpy.testing.assert_equal",
        "numpy.put",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_putmask_noncontiguous": [
        "numpy.testing.assert_equal",
        "numpy.putmask",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_take_mode_raise": [
        "numpy.take",
        "numpy.arange",
        "numpy.empty",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_choose_mod_raise": [
        "numpy.empty",
        "numpy.choose",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_flatiter__array__": [
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.lib.user_array.container.__array__",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.lib.polynomial.poly1d.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.ma.core.reshape",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_dot_out": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dot",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_view_assign": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_dealloc_warning": [
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.reshape",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_multiarray.TestWritebackIfCopy.test_view_discard_refcount": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_multiarray.TestArange.test_infinite": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestArange.test_nan_step": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.TestArange.test_zero_step": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.test_orderconverter_with_nonASCII_unicode_ordering": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqualOld": [
        "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqual"
    ],
    "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqualNew": [
        "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqual"
    ],
    "numpy.core.tests.test_multiarray.test_equal_override": [
        "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqualNew",
        "numpy.core.tests.test_multiarray.test_equal_override.MyAlwaysEqualOld",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_multiarray.test_npymath_complex": [
        "numpy.complex128",
        "numpy.clongdouble",
        "numpy.complex64",
        "numpy.angle",
        "numpy.absolute"
    ],
    "numpy.core.tests.test_multiarray.test_npymath_real": [
        "numpy.sinh",
        "numpy.errstate",
        "numpy.cosh",
        "numpy.log10",
        "numpy.float32",
        "numpy.tan",
        "numpy.tanh",
        "numpy.longdouble",
        "numpy.float64"
    ],
    "numpy.core.tests.test_unicode.buffer_length": [
        "numpy.core.fromnumeric.shape",
        "numpy.prod",
        "numpy.core.getlimits.iinfo.max",
        "numpy.ndarray",
        "numpy.shape",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.core.shape",
        "numpy.ma.core.size",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.fromnumeric.size",
        "numpy.size"
    ],
    "numpy.core.tests.test_unicode.test_string_cast": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_unicode.CreateZeros.content_check": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.core.tests.test_unicode.buffer_length"
    ],
    "numpy.core.tests.test_unicode.CreateZeros.test_zeros0D": [
        "numpy.zeros",
        "numpy.core.tests.test_unicode.CreateZeros.content_check"
    ],
    "numpy.core.tests.test_unicode.CreateZeros.test_zerosSD": [
        "numpy.zeros",
        "numpy.core.tests.test_unicode.CreateZeros.content_check"
    ],
    "numpy.core.tests.test_unicode.CreateZeros.test_zerosMD": [
        "numpy.zeros",
        "numpy.core.tests.test_unicode.CreateZeros.content_check"
    ],
    "numpy.core.tests.test_unicode.TestCreateZeros_1": [
        "numpy.core.tests.test_unicode.CreateZeros"
    ],
    "numpy.core.tests.test_unicode.TestCreateZeros_2": [
        "numpy.core.tests.test_unicode.CreateZeros"
    ],
    "numpy.core.tests.test_unicode.TestCreateZeros_1009": [
        "numpy.core.tests.test_unicode.CreateZeros"
    ],
    "numpy.core.tests.test_unicode.CreateValues.content_check": [
        "numpy.core.defchararray.chararray.encode",
        "numpy.core.tests.test_unicode.buffer_length",
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.core.defchararray.encode"
    ],
    "numpy.core.tests.test_unicode.CreateValues.test_values0D": [
        "numpy.core.tests.test_unicode.CreateValues.content_check",
        "numpy.array"
    ],
    "numpy.core.tests.test_unicode.CreateValues.test_valuesSD": [
        "numpy.core.tests.test_unicode.CreateValues.content_check",
        "numpy.array"
    ],
    "numpy.core.tests.test_unicode.CreateValues.test_valuesMD": [
        "numpy.core.tests.test_unicode.CreateValues.content_check",
        "numpy.array"
    ],
    "numpy.core.tests.test_unicode.TestCreateValues_1_UCS2": [
        "numpy.core.tests.test_unicode.CreateValues"
    ],
    "numpy.core.tests.test_unicode.TestCreateValues_1_UCS4": [
        "numpy.core.tests.test_unicode.CreateValues"
    ],
    "numpy.core.tests.test_unicode.TestCreateValues_2_UCS2": [
        "numpy.core.tests.test_unicode.CreateValues"
    ],
    "numpy.core.tests.test_unicode.TestCreateValues_2_UCS4": [
        "numpy.core.tests.test_unicode.CreateValues"
    ],
    "numpy.core.tests.test_unicode.TestCreateValues_1009_UCS2": [
        "numpy.core.tests.test_unicode.CreateValues"
    ],
    "numpy.core.tests.test_unicode.TestCreateValues_1009_UCS4": [
        "numpy.core.tests.test_unicode.CreateValues"
    ],
    "numpy.core.tests.test_unicode.AssignValues.content_check": [
        "numpy.core.defchararray.chararray.encode",
        "numpy.core.tests.test_unicode.buffer_length",
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.core.defchararray.encode"
    ],
    "numpy.core.tests.test_unicode.AssignValues.test_values0D": [
        "numpy.zeros",
        "numpy.core.tests.test_unicode.AssignValues.content_check"
    ],
    "numpy.core.tests.test_unicode.AssignValues.test_valuesSD": [
        "numpy.zeros",
        "numpy.core.tests.test_unicode.AssignValues.content_check"
    ],
    "numpy.core.tests.test_unicode.AssignValues.test_valuesMD": [
        "numpy.zeros",
        "numpy.core.tests.test_unicode.AssignValues.content_check"
    ],
    "numpy.core.tests.test_unicode.TestAssignValues_1_UCS2": [
        "numpy.core.tests.test_unicode.AssignValues"
    ],
    "numpy.core.tests.test_unicode.TestAssignValues_1_UCS4": [
        "numpy.core.tests.test_unicode.AssignValues"
    ],
    "numpy.core.tests.test_unicode.TestAssignValues_2_UCS2": [
        "numpy.core.tests.test_unicode.AssignValues"
    ],
    "numpy.core.tests.test_unicode.TestAssignValues_2_UCS4": [
        "numpy.core.tests.test_unicode.AssignValues"
    ],
    "numpy.core.tests.test_unicode.TestAssignValues_1009_UCS2": [
        "numpy.core.tests.test_unicode.AssignValues"
    ],
    "numpy.core.tests.test_unicode.TestAssignValues_1009_UCS4": [
        "numpy.core.tests.test_unicode.AssignValues"
    ],
    "numpy.core.tests.test_unicode.ByteorderValues.test_values0D": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_unicode.ByteorderValues.test_valuesSD": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.core.tests.test_unicode.ByteorderValues.test_valuesMD": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.core.tests.test_unicode.ByteorderValues.test_values_cast": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.array",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.repeat"
    ],
    "numpy.core.tests.test_unicode.ByteorderValues.test_values_updowncast": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.array",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.repeat"
    ],
    "numpy.core.tests.test_unicode.TestByteorder_1_UCS2": [
        "numpy.core.tests.test_unicode.ByteorderValues"
    ],
    "numpy.core.tests.test_unicode.TestByteorder_1_UCS4": [
        "numpy.core.tests.test_unicode.ByteorderValues"
    ],
    "numpy.core.tests.test_unicode.TestByteorder_2_UCS2": [
        "numpy.core.tests.test_unicode.ByteorderValues"
    ],
    "numpy.core.tests.test_unicode.TestByteorder_2_UCS4": [
        "numpy.core.tests.test_unicode.ByteorderValues"
    ],
    "numpy.core.tests.test_unicode.TestByteorder_1009_UCS2": [
        "numpy.core.tests.test_unicode.ByteorderValues"
    ],
    "numpy.core.tests.test_unicode.TestByteorder_1009_UCS4": [
        "numpy.core.tests.test_unicode.ByteorderValues"
    ],
    "numpy.core.tests.test_api.test_array_array": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.random.bytes",
        "numpy.float64",
        "numpy.array",
        "numpy.uint8",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.int",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.full"
    ],
    "numpy.core.tests.test_api.test_fastCopyAndTranspose": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.fastCopyAndTranspose",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_api.test_array_astype": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.dtype",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.reshape",
        "numpy.core.tests.test_api.test_array_astype.MyNDArray",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_api.test_array_astype.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_api.test_copyto_fromscalar": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.copyto",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_api.test_copyto": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.copyto",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_api.test_copyto_permut": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.power",
        "numpy.array",
        "numpy.ma.core.power",
        "numpy.lib.scimath.power",
        "numpy.uint8",
        "numpy.testing.assert_array_equal",
        "numpy.pad",
        "numpy.ones",
        "numpy.lib.pad",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.random.power",
        "numpy.lib.arraypad.pad",
        "numpy.copyto",
        "numpy.zeros"
    ],
    "numpy.core.tests.test_api.test_copy_order": [
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.core.tests.test_api.test_copy_order.check_copy_result",
        "numpy.swapaxes",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.copy"
    ],
    "numpy.core.tests.test_api.test_copy_order.check_copy_result": [
        "numpy.testing.assert_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_api.test_contiguous_flags": [
        "numpy.squeeze",
        "numpy.matrixlib.defmatrix.matrix.squeeze",
        "numpy.empty",
        "numpy.core.fromnumeric.squeeze",
        "numpy.core.tests.test_api.test_contiguous_flags.check_contig",
        "numpy.ones",
        "numpy.swapaxes",
        "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze.squeeze",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.array"
    ],
    "numpy.core.tests.test_api.test_contiguous_flags.check_contig": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_api.test_broadcast_arrays": [
        "numpy.broadcast_arrays",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_errors": [
        "numpy.ma.core.reshape",
        "numpy.einsum",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_views": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.einsum",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums": [
        "numpy.lib.user_array.container.astype",
        "numpy.eye",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.multiply",
        "numpy.dot",
        "numpy.array",
        "numpy.outer",
        "numpy.logical_and",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.einsum",
        "numpy.inner",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.full",
        "numpy.tensordot",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_int8": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_uint8": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_int16": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_uint16": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_int32": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_uint32": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_int64": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_uint64": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_float16": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_float32": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_float64": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_longdouble": [
        "numpy.longdouble",
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_cfloat64": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_cfloat128": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_sums_clongdouble": [
        "numpy.core.tests.test_einsum.TestEinSum.check_einsum_sums",
        "numpy.clongdouble"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_misc": [
        "numpy.testing.assert_equal",
        "numpy.int64",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.ones",
        "numpy.einsum",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_broadcast": [
        "numpy.testing.assert_equal",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.einsum",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_fixedstridebug": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.float32",
        "numpy.einsum",
        "numpy.tensordot",
        "numpy.int16",
        "numpy.float64"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_fixed_collapsingbug": [
        "numpy.zeros",
        "numpy.arange",
        "numpy.einsum",
        "numpy.testing.assert_equal",
        "numpy.random.normal"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_einsum_all_contig_non_contig_output": [
        "numpy.float32",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.einsum"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_small_boolean_arrays": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.einsum",
        "numpy.bool_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.optimize_compare": [
        "numpy.core.defchararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.einsum",
        "numpy.testing.assert_almost_equal",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_hadamard_like_products": [
        "numpy.core.tests.test_einsum.TestEinSum.optimize_compare"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_index_transformations": [
        "numpy.core.tests.test_einsum.TestEinSum.optimize_compare"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_complex": [
        "numpy.core.tests.test_einsum.TestEinSum.optimize_compare"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_collapse": [
        "numpy.core.tests.test_einsum.TestEinSum.optimize_compare"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_expand": [
        "numpy.core.tests.test_einsum.TestEinSum.optimize_compare"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_edge_cases": [
        "numpy.core.tests.test_einsum.TestEinSum.optimize_compare"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_inner_product": [
        "numpy.core.tests.test_einsum.TestEinSum.optimize_compare"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_random_cases": [
        "numpy.core.tests.test_einsum.TestEinSum.optimize_compare"
    ],
    "numpy.core.tests.test_einsum.TestEinSum.test_combined_views_mapping": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.einsum",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_einsum.TestEinSumPath.build_operands": [
        "numpy.core.defchararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.random.rand",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand"
    ],
    "numpy.core.tests.test_einsum.TestEinSumPath.assert_path_equal": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_einsum.TestEinSumPath.test_memory_contraints": [
        "numpy.core.tests.test_einsum.TestEinSumPath.assert_path_equal",
        "numpy.einsum_path",
        "numpy.core.tests.test_einsum.TestEinSumPath.build_operands"
    ],
    "numpy.core.tests.test_einsum.TestEinSumPath.test_long_paths": [
        "numpy.core.tests.test_einsum.TestEinSumPath.assert_path_equal",
        "numpy.einsum_path",
        "numpy.core.tests.test_einsum.TestEinSumPath.build_operands"
    ],
    "numpy.core.tests.test_einsum.TestEinSumPath.test_edge_paths": [
        "numpy.core.tests.test_einsum.TestEinSumPath.assert_path_equal",
        "numpy.einsum_path",
        "numpy.core.tests.test_einsum.TestEinSumPath.build_operands"
    ],
    "numpy.core.tests.test_einsum.TestEinSumPath.test_path_type_input": [
        "numpy.einsum_path",
        "numpy.core.tests.test_einsum.TestEinSumPath.build_operands",
        "numpy.einsum",
        "numpy.core.tests.test_einsum.TestEinSumPath.assert_path_equal",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_einsum.TestEinSumPath.test_spaces": [
        "numpy.einsum",
        "numpy.array"
    ],
    "numpy.core.tests.test_scalarmath.TestTypes.test_types": [
        "numpy.clongdouble",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_scalarmath.TestTypes.test_type_add": [
        "numpy.clongdouble",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestTypes.test_type_create": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.clongdouble"
    ],
    "numpy.core.tests.test_scalarmath.TestTypes.test_leak": [
        "numpy.add"
    ],
    "numpy.core.tests.test_scalarmath.TestBaseMath.test_blocked": [
        "numpy.float32",
        "numpy.int32",
        "numpy.ones_like",
        "numpy.add",
        "numpy.square",
        "numpy.arange",
        "numpy.reciprocal",
        "numpy.float64",
        "numpy.divide",
        "numpy.zeros_like",
        "numpy.multiply",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestBaseMath.test_lower_align": [
        "numpy.ones_like",
        "numpy.ma.masked.view",
        "numpy.add",
        "numpy.ma.core.MaskedArray.view",
        "numpy.testing.assert_almost_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.float64"
    ],
    "numpy.core.tests.test_scalarmath.TestPower.test_small_types": [
        "numpy.int8",
        "numpy.float16",
        "numpy.int16",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_scalarmath.TestPower.test_large_types": [
        "numpy.testing.assert_almost_equal",
        "numpy.longdouble",
        "numpy.int32",
        "numpy.float32",
        "numpy.int64",
        "numpy.testing.assert_",
        "numpy.float64",
        "numpy.issubdtype"
    ],
    "numpy.core.tests.test_scalarmath.TestPower.test_integers_to_negative_integer_power": [
        "numpy.testing.assert_",
        "numpy.exp",
        "numpy.testing.assert_almost_equal",
        "numpy.float64"
    ],
    "numpy.core.tests.test_scalarmath.TestPower.test_mixed_types": [
        "numpy.int8",
        "numpy.testing.assert_almost_equal",
        "numpy.int16",
        "numpy.float32",
        "numpy.int32",
        "numpy.int64",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.float64",
        "numpy.float16",
        "numpy.issubdtype"
    ],
    "numpy.core.tests.test_scalarmath.TestPower.test_modular_power": [
        "numpy.int32",
        "numpy.float32",
        "npy_tempita.compat3.b",
        "numpy.array",
        "numpy.complex64"
    ],
    "numpy.core.tests.test_scalarmath.TestModulus.test_modulus_basic": [
        "numpy.testing.assert_equal",
        "numpy.divmod",
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarmath.floordiv_and_mod",
        "numpy.core.tests.test_scalarmath._signs",
        "numpy.array"
    ],
    "numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_exact": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_scalarmath.floordiv_and_mod",
        "numpy.where",
        "numpy.divmod"
    ],
    "numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_roundoff": [
        "numpy.testing.assert_equal",
        "numpy.divmod",
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarmath.floordiv_and_mod",
        "numpy.array"
    ],
    "numpy.core.tests.test_scalarmath.TestModulus.test_float_modulus_corner_cases": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.nextafter",
        "numpy.array"
    ],
    "numpy.core.tests.test_scalarmath.TestComplexDivision.test_zero_division": [
        "numpy.errstate",
        "numpy.isinf",
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.complex64",
        "numpy.complex128"
    ],
    "numpy.core.tests.test_scalarmath.TestComplexDivision.test_signed_zeros": [
        "numpy.testing.assert_equal",
        "numpy.errstate",
        "numpy.complex128",
        "numpy.complex64"
    ],
    "numpy.core.tests.test_scalarmath.TestComplexDivision.test_branches": [
        "numpy.complex64",
        "numpy.testing.assert_equal",
        "numpy.complex128",
        "numpy.ma.append",
        "numpy.append",
        "numpy.errstate",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion": [
        "numpy.double",
        "numpy.finfo",
        "numpy.core.defchararray.startswith",
        "numpy.testing._private.decorators.skipif",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_long": [
        "numpy.int64",
        "numpy.float64",
        "numpy.uint64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_iinfo_long_values": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.array"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_int_raise_behaviour.overflow_error_func": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_int_raise_behaviour": [
        "numpy.core.tests.test_scalarmath.TestConversion.test_int_raise_behaviour.overflow_error_func"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble": [
        "numpy.int",
        "numpy.longdouble",
        "numpy.clongdouble",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_infinite_longdouble___int__": [
        "numpy.longdouble",
        "numpy.clongdouble",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_huge_longdouble": [
        "numpy.int",
        "numpy.longdouble",
        "numpy.testing.assert_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_int_from_longdouble": [
        "numpy.int",
        "numpy.longdouble",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_numpy_scalar_relational_operators": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_scalarmath.TestConversion.test_scalar_comparison_to_none": [
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.datetime64",
        "numpy.str_",
        "numpy.equal"
    ],
    "numpy.core.tests.test_scalarmath.TestRepr._test_type_repr": [
        "numpy.finfo",
        "numpy.uint8",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_scalarmath.TestRepr.test_float_repr": [
        "numpy.float64",
        "numpy.core.tests.test_scalarmath.TestRepr._test_type_repr",
        "numpy.float32"
    ],
    "numpy.core.tests.test_scalarmath.TestSizeOf.test_equal_nbytes": [
        "numpy.testing.assert_",
        "numpy.clongdouble"
    ],
    "numpy.core.tests.test_scalarmath.TestSizeOf.test_error": [
        "numpy.float32"
    ],
    "numpy.core.tests.test_scalarmath.TestMultiply.test_seq_repeat": [
        "numpy.int",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like": [
        "numpy.float32",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.full",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike",
        "numpy.int_",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__"
    ],
    "numpy.core.tests.test_scalarmath.TestNegative.test_exceptions": [
        "numpy.ones",
        "numpy.bool_"
    ],
    "numpy.core.tests.test_scalarmath.TestNegative.test_result": [
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestSubtract.test_exceptions": [
        "numpy.ones",
        "numpy.bool_"
    ],
    "numpy.core.tests.test_scalarmath.TestSubtract.test_result": [
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarmath.TestAbs._test_abs_func": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.type_check.real",
        "numpy.real",
        "numpy.ma.core.min",
        "numpy.testing.assert_equal",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max"
    ],
    "numpy.core.tests.test_scalarmath.TestAbs.test_builtin_abs": [
        "numpy.core.tests.test_scalarmath.TestAbs._test_abs_func",
        "numpy.abs"
    ],
    "numpy.core.tests.test_scalarmath.TestAbs.test_numpy_abs": [
        "numpy.core.tests.test_scalarmath.TestAbs._test_abs_func"
    ],
    "numpy.core.tests.test_abc.TestABC.test_abstract": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_abc.TestABC.test_floats": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_abc.TestABC.test_complex": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_abc.TestABC.test_int": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_abc.TestABC.test_uint": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_errstate.TestErrstate": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_errstate.TestErrstate.test_invalid": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.sqrt",
        "numpy.errstate",
        "numpy.arange",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail"
    ],
    "numpy.core.tests.test_errstate.TestErrstate.test_divide": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.errstate",
        "numpy.arange",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail"
    ],
    "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_errstate.TestErrstate.test_errcall": [
        "numpy.errstate",
        "numpy.geterrcall",
        "numpy.testing.assert_",
        "numpy.core.tests.test_errstate.TestErrstate.test_errcall.foo"
    ],
    "numpy.core.tests._locales.CommaDecimalPointLocale": [
        "numpy.core.tests._locales.find_comma_decimal_point_locale"
    ],
    "numpy.core.tests._locales.CommaDecimalPointLocale.setup": [
        "numpy.core.tests._locales.find_comma_decimal_point_locale"
    ],
    "numpy.core.tests._locales.CommaDecimalPointLocale.teardown": [
        "numpy.core.tests._locales.find_comma_decimal_point_locale"
    ],
    "numpy.core.tests._locales.CommaDecimalPointLocale.__enter__": [
        "numpy.core.tests._locales.find_comma_decimal_point_locale"
    ],
    "numpy.core.tests._locales.CommaDecimalPointLocale.__exit__": [
        "numpy.core.tests._locales.find_comma_decimal_point_locale"
    ],
    "numpy.core.tests.test_regression.TestRegression": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.testing._private.decorators.skipif",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_invalid_round": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_empty": [
        "numpy.empty",
        "numpy.int64"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_pickle_transposed": [
        "numpy.testing.assert_array_equal",
        "numpy.transpose",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_typeNA": [
        "numpy.uint64",
        "numpy.testing.assert_equal",
        "numpy.int64"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_dtype_names": [
        "numpy.int32",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.testing.assert_almost_equal",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_zeros_order": [
        "numpy.zeros",
        "numpy.int"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_asarray_with_order": [
        "numpy.ones",
        "numpy.asarray",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ravel_with_order": [
        "numpy.ones",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_sort_bigendian": [
        "numpy.linspace",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_negative_nd_indexing": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_char_dump": [
        "numpy.ma.core.dump",
        "numpy.ma.core.array",
        "numpy.arange",
        "numpy.load",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_noncontiguous_fill": [
        "numpy.zeros",
        "numpy.core.tests.test_regression.TestRegression.test_noncontiguous_fill.rs"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_bool": [
        "numpy.bool_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_indexing1": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_indexing2": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_round": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_scalar_compare": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.linspace",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_unicode_swapping": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_fill": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_dtype_align": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_endian_bool_indexing": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.all",
        "numpy.where"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_endian_where": [
        "numpy.zeros",
        "numpy.where",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_endian_recarray": [
        "numpy.recarray",
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_dot": [
        "numpy.transpose",
        "numpy.random.randn",
        "numpy.testing.assert_equal",
        "numpy.core.multiarray.dot",
        "numpy.ma.core.dot",
        "numpy.empty",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.ones",
        "numpy.ma.core.MaskedArray.dot",
        "numpy.matlib.randn",
        "numpy.dot"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_arange_endian": [
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_argmax": [
        "numpy.random.normal",
        "numpy.argmax",
        "numpy.core.fromnumeric.argmax",
        "numpy.matrixlib.defmatrix.matrix.argmax",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.MaskedArray.argmax",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_divmod": [
        "numpy.divmod",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_hstack_invalid_dims": [
        "numpy.hstack",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_squeeze_type": [
        "numpy.ndarray",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_add_identity": [
        "numpy.identity",
        "numpy.matlib.identity",
        "numpy.core.numeric.identity",
        "numpy.testing.assert_equal",
        "numpy.polynomial._polybase.ABCPolyBase.identity"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_numpy_float_python_long_addition": [
        "numpy.testing.assert_equal",
        "numpy.float_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_binary_repr_0": [
        "numpy.testing.assert_equal",
        "numpy.binary_repr"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_rec_iterate": [
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.dtype",
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_unicode_string_comparison": [
        "numpy.unicode_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_tobytes_FORTRANORDER_discontiguous": [
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.frombuffer",
        "numpy.testing._private.utils.rand",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_flat_assignment": [
        "numpy.arange",
        "numpy.empty"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_broadcast_flat_assignment": [
        "numpy.core.tests.test_regression.TestRegression.test_broadcast_flat_assignment.bfa",
        "numpy.empty",
        "numpy.core.tests.test_regression.TestRegression.test_broadcast_flat_assignment.bfb"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_broadcast_flat_assignment.bfa": [
        "numpy.arange",
        "numpy.empty"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_broadcast_flat_assignment.bfb": [
        "numpy.arange",
        "numpy.empty"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_nonarray_assignment": [
        "numpy.core.tests.test_regression.TestRegression.test_nonarray_assignment.assign",
        "numpy.array",
        "numpy.ones",
        "numpy.arange"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_unpickle_dtype_with_object": [
        "numpy.int",
        "numpy.dtype",
        "numpy.object_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_array_creation_invalid_specification": [
        "numpy.int",
        "numpy.dtype",
        "numpy.object_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_recarray_single_element": [
        "numpy.int32",
        "numpy.testing.assert_array_equal",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_zero_sized_array_indexing": [
        "numpy.core.tests.test_regression.TestRegression.test_zero_sized_array_indexing.index_tmp",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_zero_sized_array_indexing.index_tmp": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_chararray_rstrip": [
        "numpy.testing.assert_equal",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_shape": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_around": [
        "numpy.zeros",
        "numpy.around",
        "numpy.abs"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_character_array_strip": [
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_lexsort": [
        "numpy.lexsort",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence": [
        "numpy.lexsort",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_pickle_py2_bytes_encoding": [
        "numpy.unicode_",
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.float64"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_swap_real": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_from_list": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_multiple_assign": [
        "numpy.zeros",
        "numpy.int"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_empty_array_type": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_void_copyswap": [
        "numpy.array",
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_method_args": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.MaskedArray.max",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ravel",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy",
        "numpy.True_.copy",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.max",
        "numpy.core.fromnumeric.ravel",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.max",
        "numpy.random.rand",
        "numpy.core.fromnumeric.all",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.core.MaskedArray.all",
        "numpy.core.getlimits.iinfo.max",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.all",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_lexsort_strings": [
        "numpy.lexsort"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_fancy_index": [
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_recarray_copy": [
        "numpy.int16",
        "numpy.testing.assert_",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.float64",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_rec_fromarray": [
        "numpy.ma.mrecords.fromarrays",
        "numpy.rec.fromarrays",
        "numpy.array",
        "numpy.core.records.fromarrays"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_assign": [
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ndmin_float64": [
        "numpy.testing.assert_equal",
        "numpy.float64",
        "numpy.array",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ndmin_order": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_axis_minimization": [
        "numpy.ma.core.outer",
        "numpy.add.outer",
        "numpy.multiply.outer",
        "numpy.core.numeric.outer",
        "numpy.ma.core._extrema_operation.outer",
        "numpy.maximum.outer",
        "numpy.arange",
        "numpy.outer",
        "numpy.minimum.outer",
        "numpy.ma.core._MaskedBinaryOperation.outer"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_float_imag": [
        "numpy.lib.type_check.imag",
        "numpy.imag"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_dtype_tuple": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_dtype_posttuple": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_numeric_carray_compare": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_string_array_size": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_dtype_repr": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_reshape_order": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_reshape_zero_strides": [
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.lib.stride_tricks.as_strided"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_reshape_zero_size": [
        "numpy.ones"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_reshape_trailing_ones_strides": [
        "numpy.zeros",
        "numpy.int32",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_repeat_discont": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.repeat",
        "numpy.reshape",
        "numpy.repeat",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_array_index": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.where"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_argmax": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_recarray_fields": [
        "numpy.ma.core.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.rec.fromarrays",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.core.records.fromarrays",
        "numpy.ma.mrecords.fromarrays"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_random_shuffle": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.random.shuffle",
        "numpy.testing.assert_equal",
        "numpy.sort",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_refcount_vdot": [
        "numpy.vdot"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_startswith": [
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_noncommutative_reduce_accumulate": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.multiply.accumulate",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.subtract.accumulate",
        "numpy.power.reduce",
        "numpy.add.accumulate",
        "numpy.fmax.reduce",
        "numpy.divide.accumulate",
        "numpy.ma.core._MaskedBinaryOperation.accumulate",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_convolve_empty": [
        "numpy.convolve"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_multidim_byteswap": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_string_NULL": [
        "numpy.testing.assert_equal",
        "npy_tempita._looper.loop_pos.item"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_junk_in_string_fields_of_recarray": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_take_output": [
        "numpy.take",
        "numpy.zeros_like",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_take_object_fail": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_array_str_64bit": [
        "numpy.array_str",
        "numpy.errstate",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_endian": [
        "numpy.lib.user_array.container.astype",
        "numpy.frompyfunc",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_string_arr": [
        "numpy.hstack",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_arr_transpose": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.core.fromnumeric.transpose",
        "numpy.random.rand"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_string_mergesort": [
        "numpy.arange",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_argmax_byteorder": [
        "numpy.arange",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_rand_seed": [
        "numpy.arange",
        "numpy.random.seed"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_deallocation_leak": [
        "numpy.zeros",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_on_invalid_dtype": [
        "numpy.fromiter"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_dot_negative_stride": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_equal",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.dot",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.copy",
        "numpy.array",
        "numpy.True_.copy"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_casting.rs": [
        "numpy.zeros",
        "numpy.ones"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_casting": [
        "numpy.core.tests.test_regression.TestRegression.test_object_casting.rs"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_unicode_scalar": [
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_arange_non_native_dtype": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_bool_flat_indexing_invalid_nr_elements": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.core.tests.test_regression.TestRegression.test_bool_flat_indexing_invalid_nr_elements.ia",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_scalar_indexing": [
        "numpy.int32",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_binary_repr_0_width": [
        "numpy.testing.assert_equal",
        "numpy.binary_repr"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_fromstring": [
        "numpy.int",
        "numpy.fromstring",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_searchsorted_variable_length": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_string_argsort_with_zeros": [
        "numpy.frombuffer",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_string_sort_with_zeros": [
        "numpy.frombuffer",
        "numpy.sort",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_copy_detection_zero_dim": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_flat_byteorder": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_sign_bit": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_flat_index_byteswap": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_copy_detection_corner_case": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_copy_detection_corner_case2": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_refcounting": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.object_",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.int",
        "numpy.zeros",
        "numpy.lib.user_array.container.copy",
        "numpy.concatenate",
        "numpy.copy"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_custom_float_to_array": [
        "numpy.core.tests.test_regression.TestRegression.test_mem_custom_float_to_array.MyFloat",
        "numpy.atleast_1d"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_refcount_self_assign": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.object_",
        "numpy.core.tests.test_regression.TestRegression.test_object_array_refcount_self_assign.VictimObject"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_fromiter_invalid_dtype_string": [
        "numpy.fromiter"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_reduce_big_object_array": [
        "numpy.setbufsize",
        "numpy.testing.assert_",
        "numpy.any",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mem_0d_array_index": [
        "numpy.zeros",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_nonnative_endian_fill": [
        "numpy.dtype",
        "numpy.empty",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_dot_alignment_sse2": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.dot"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_astype_copy": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.testing.assert_",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.float64"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_compress_small_type": [
        "numpy.zeros",
        "numpy.single",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_attributes.TestArray": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_attributes.TestArray.__new__": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_attributes": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.ndarray",
        "numpy.info",
        "numpy.core.fromnumeric.put",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.core.fromnumeric.resize",
        "numpy.nonzero",
        "numpy.ma.nonzero",
        "numpy.core.fromnumeric.nonzero",
        "numpy.int32",
        "numpy.put",
        "numpy.ma.core.MaskedArray.resize",
        "numpy.ma.core.MaskedArray.put",
        "numpy.ma.core.sort",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.core.tests.test_regression.TestRegression.test_attributes.TestArray",
        "numpy.ma.core.put",
        "numpy.lib.utils.info",
        "numpy.ma.core.resize",
        "numpy.resize"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_recarray_tolist": [
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.testing.assert_",
        "numpy.recarray",
        "numpy.zeros",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.int8",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_nonscalar_item_method": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_char_array_creation": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_unaligned_unicode_access": [
        "numpy.testing.assert_equal",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_sign_for_complex_nan": [
        "numpy.errstate",
        "numpy.sign",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_for_equal_names": [
        "numpy.testing.assert_",
        "numpy.zeros",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_for_object_scalar_creation": [
        "numpy.ndarray",
        "numpy.int",
        "numpy.object_",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_array_resize_method_system_error": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_for_zero_length_in_choose": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_void_scalar_with_titles": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_void_scalar_constructor": [
        "numpy.core.multiarray.scalar",
        "numpy.ma.core.MaskedArray.view",
        "numpy.dtype",
        "numpy.ma.masked.view",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_blasdot_uninitialized_memory": [
        "numpy.testing.assert_",
        "numpy.float64",
        "numpy.dot",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_zeros": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.empty",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.distutils.log.Log.good",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_huge_arange": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.size",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.distutils.log.Log.good",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_fromiter_bytes": [
        "numpy.fromiter",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.alltrue"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array": [
        "numpy.ones",
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_array_from_sequence_scalar_array2": [
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_array_too_big": [
        "numpy.zeros",
        "numpy.int8"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_dtype_keyerrors_": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_lexsort_buffer_length": [
        "numpy.int",
        "numpy.int8",
        "numpy.int32",
        "numpy.lexsort",
        "numpy.ones",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_to_fixed_string": [
        "numpy.object_",
        "numpy.empty",
        "numpy.str_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_unicode_to_string_cast": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_mixed_string_unicode_array_creation": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_misaligned_objects_segfault": [
        "numpy.zeros",
        "numpy.argmax",
        "numpy.nonzero",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_misaligned_scalars_segfault": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_misaligned_dot_product_objects": [
        "numpy.dot",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_byteswap_complex_scalar": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.frombuffer",
        "numpy.lib.user_array.container.byteswap"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_structured_arrays_with_objects1": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_structured_arrays_with_objects2": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_duplicate_title_and_name": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_signed_integer_division_overflow.test_type": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.array",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_signed_integer_division_overflow": [
        "numpy.int",
        "numpy.int8",
        "numpy.errstate",
        "numpy.int16",
        "numpy.int32",
        "numpy.int64",
        "numpy.core.tests.test_regression.TestRegression.test_signed_integer_division_overflow.test_type"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_buffer_hashlib": [
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_0d_string_scalar": [
        "numpy.asarray"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_log1p_compiler_shenanigans": [
        "numpy.exp2",
        "numpy.isfinite",
        "numpy.log1p",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_fromiter_comparison": [
        "numpy.fromiter",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.alltrue"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_fromstring_crash": [
        "numpy.fromstring"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ticket_1539": [
        "numpy.dot",
        "numpy.ma.append",
        "numpy.array",
        "numpy.bool_",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ticket_1538": [
        "numpy.finfo",
        "numpy.testing.assert_equal",
        "numpy.float32"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ticket_1434": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_complex_nan_maximum": [
        "numpy.maximum",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_subclass_int_tuple_assignment.Subclass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_subclass_int_tuple_assignment.Subclass.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_subclass_int_tuple_assignment": [
        "numpy.core.tests.test_regression.TestRegression.test_subclass_int_tuple_assignment.Subclass",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ufunc_no_unnecessary_views.Subclass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ufunc_no_unnecessary_views": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.add",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_regression.TestRegression.test_ufunc_no_unnecessary_views.Subclass",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_take_refcount": [
        "numpy.ones",
        "numpy.arange",
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_fromfile_tofile_seeks": [
        "numpy.testing.assert_equal",
        "numpy.fromfile",
        "numpy.ma.core.MaskedArray.tofile",
        "numpy.ma.core.MaskedArray.tobytes",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_complex_scalar_warning": [
        "numpy.csingle",
        "numpy.cdouble",
        "numpy.clongdouble",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_complex_scalar_complex_cast": [
        "numpy.csingle",
        "numpy.cdouble",
        "numpy.clongdouble",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_complex_boolean_cast": [
        "numpy.csingle",
        "numpy.testing.assert_",
        "numpy.cdouble",
        "numpy.clongdouble",
        "numpy.any",
        "numpy.all",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_uint_int_conversion": [
        "numpy.int",
        "numpy.uint64",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_duplicate_field_names_assign": [
        "numpy.fromiter"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_eq_string_and_object_array": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_nonzero_byteswap": [
        "numpy.float32",
        "numpy.core.fromnumeric.nonzero",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.ma.nonzero",
        "numpy.nonzero",
        "numpy.uint32",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_find_common_type_boolean": [
        "numpy.find_common_type",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_empty_mul": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_array_side_effect": [
        "numpy.testing.assert_equal",
        "numpy.string_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_any_float": [
        "numpy.all",
        "numpy.array",
        "numpy.any",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_large_float_sum": [
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.sum",
        "numpy.arange",
        "numpy.ma.sum",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ufunc_casting_out": [
        "numpy.float32",
        "numpy.add",
        "numpy.float64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_array_scalar_contiguous": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_squeeze_contiguous": [
        "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze.squeeze",
        "numpy.testing.assert_",
        "numpy.squeeze",
        "numpy.matrixlib.defmatrix.matrix.squeeze",
        "numpy.core.fromnumeric.squeeze"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling": [
        "numpy.squeeze",
        "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_reduce_contiguous": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.zeros",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_self_reference": [
        "numpy.int",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_circular_reference": [
        "numpy.int",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_nested": [
        "numpy.int",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_object_array_self_copy": [
        "numpy.testing.assert_",
        "numpy.copyto",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_zerosize_accumulate": [
        "numpy.add.accumulate",
        "numpy.multiply.accumulate",
        "numpy.divide.accumulate",
        "numpy.subtract.accumulate",
        "numpy.uint32",
        "numpy.ma.core._MaskedBinaryOperation.accumulate",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_objectarray_setfield": [
        "numpy.int32",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_setting_rank0_string": [
        "numpy.zeros",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_string_astype": [
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ticket_1756": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_fields_strides": [
        "numpy.frombuffer",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_alignment_update": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ticket_1770": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ticket_1608": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_equal",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_pickle_string_overwrite": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_pickle_bytes_overwrite": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_pickle_py2_array_latin1_hack": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_pickle_py2_scalar_latin1_hack": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.bytes_",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_structured_type_to_object": [
        "numpy.empty_like",
        "numpy.empty",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_assign_obj_listoflists": [
        "numpy.zeros",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_memoryleak": [
        "numpy.empty"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_ufunc_reduce_memoryleak": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.arange",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_search_sorted_invalid_arguments": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_string_truncation": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_string_truncation_ucs2": [
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_unique_stable": [
        "numpy.unique",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_unicode_alloc_dealloc_match": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_refcount_error_in_clip": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.fromnumeric.clip",
        "numpy.clip"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_searchsorted_wrong_dtype": [
        "numpy.format_parser",
        "numpy.array",
        "numpy.recarray",
        "numpy.searchsorted"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_complex64_alignment": [
        "numpy.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.complex64",
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_structured_count_nonzero": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.count_nonzero"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_copymodule_preserves_f_contiguity": [
        "numpy.testing.assert_",
        "fortran",
        "numpy.empty"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_fortran_order_buffer": [
        "numpy.array",
        "numpy.ndarray",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_assign_from_sequence_error": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_format_on_flex_array_element": [
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_deepcopy_on_0d_array": [
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_deepcopy_F_order_object_array": [
        "npy_tempita.compat3.b",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_deepcopy_empty_object_array": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_bool_subscript_crash": [
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_richcompare_scalar_and_subclass.Foo": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_richcompare_scalar_and_subclass": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_scalar_and_subclass.Foo",
        "numpy.int32",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.array"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_pickle_empty_string": [
        "numpy.string_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_many_args": [
        "numpy.frompyfunc",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_many_args.passer"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_repeat_broadcasting": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.repeat",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.core.fromnumeric.ndim",
        "numpy.repeat",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0": [
        "numpy.testing.assert_array_equal",
        "numpy.frompyfunc",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_leak_in_structured_dtype_comparison": [
        "numpy.zeros",
        "numpy.int32",
        "numpy.testing.assert_",
        "numpy.testing.assert_equal",
        "numpy.dtype",
        "numpy.float64"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_empty_percentile": [
        "numpy.percentile",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_void_compare_segfault": [
        "numpy.ones"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_reshape_size_overflow": [
        "numpy.ones"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_invalid_structured_dtypes": [
        "numpy.ones",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_correct_hash_dict": [
        "numpy.testing.assert_",
        "numpy.sctypes.values",
        "numpy.void",
        "numpy.sctypeDict.values",
        "numpy.testing.assert_equal",
        "numpy.typeDict.values"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_scalar_copy": [
        "numpy.unicode_",
        "numpy.bytes_",
        "numpy.testing.assert_equal",
        "numpy.datetime64",
        "numpy.sctypes.values",
        "numpy.void",
        "numpy.sctypeDict.values",
        "numpy.typeDict.values"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_void_item_memview": [
        "numpy.zeros",
        "numpy.testing.assert_equal",
        "npy_tempita._looper.loop_pos.item"
    ],
    "numpy.core.tests.test_regression.TestRegression.test_structarray_title": [
        "numpy.array",
        "numpy.object_"
    ],
    "numpy.core.tests.test_scalar_ctors.TestFromString": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_scalar_ctors.TestFromString.test_floating": [
        "numpy.double",
        "numpy.single",
        "numpy.longdouble",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_scalar_ctors.TestFromString.test_floating_overflow": [
        "numpy.half",
        "numpy.longdouble",
        "numpy.double",
        "numpy.single",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalar_ctors.TestFromString.test_intp": [
        "numpy.intp",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalar_ctors.TestFromInt.test_intp": [
        "numpy.intp",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalar_ctors.TestFromInt.test_uint64_from_negative": [
        "numpy.uint64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.exc_iter.iterate": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_extint128.exc_iter": [
        "numpy.core.tests.test_extint128.exc_iter.iterate"
    ],
    "numpy.core.tests.test_extint128.test_safe_binop": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_extint128.test_to_128": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_to_64": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_extint128.test_mul_64_64": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_add_128": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_sub_128": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_neg_128": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_shl_128": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_shr_128": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_gt_128": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_divmod_128_64": [
        "numpy.divmod",
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_floordiv_128_64": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_extint128.test_ceildiv_128_64": [
        "numpy.core.tests.test_extint128.exc_iter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_defchararray.TestBasic.test_from_object_array": [
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_defchararray.TestBasic.test_from_object_array_unicode": [
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_defchararray.TestBasic.test_from_string_array": [
        "numpy.ma.core.asarray",
        "numpy.core.defchararray.asarray",
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.core.numeric.asarray",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.char.asarray",
        "numpy.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.asarray",
        "numpy.ma.array",
        "numpy.string_",
        "numpy.core.defchararray.array",
        "numpy.core.records.array"
    ],
    "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array": [
        "numpy.unicode_",
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array"
    ],
    "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail": [
        "numpy.array",
        "numpy.core.defchararray.array",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.core.records.array",
        "numpy.ma.core.array",
        "numpy.ma.array"
    ],
    "numpy.core.tests.test_defchararray.TestBasic.test_unicode_upconvert": [
        "numpy.unicode_",
        "numpy.ma.core.array",
        "numpy.testing.assert_",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_defchararray.TestBasic.test_from_string": [
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.string_",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode": [
        "numpy.unicode_",
        "numpy.ma.core.array",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail": [
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail": [
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail": [
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple": [
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr": [
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail": [
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args": [
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type": [
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail"
    ],
    "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error": [
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail"
    ],
    "numpy.core.tests.test_defchararray.TestWhitespace.setup": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestWhitespace.test1": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.any",
        "numpy.all",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_defchararray.TestChar.setup": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestChar.test_it": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.MaskedArray.tobytes",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_defchararray.TestComparisons.setup": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestComparisons.test_not_equal": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_defchararray.TestComparisons.test_equal": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_defchararray.TestComparisons.test_greater_equal": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_defchararray.TestComparisons.test_less_equal": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_defchararray.TestComparisons.test_greater": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_defchararray.TestComparisons.test_less": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_defchararray.TestComparisonsMixed1": [
        "numpy.core.tests.test_defchararray.TestComparisons"
    ],
    "numpy.core.tests.test_defchararray.TestComparisonsMixed1.setup": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_defchararray.TestComparisons.setup",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestComparisonsMixed2": [
        "numpy.core.tests.test_defchararray.TestComparisons"
    ],
    "numpy.core.tests.test_defchararray.TestComparisonsMixed2.setup": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_defchararray.TestComparisons.setup",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.setup": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_len": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.char.str_len",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.defchararray.str_len"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_count": [
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.core.defchararray.count",
        "numpy.ma.core.MaskedArray.count",
        "numpy.core.defchararray.chararray.count"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_endswith": [
        "numpy.core.defchararray.chararray.endswith",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail": [
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_find": [
        "numpy.core.defchararray.find",
        "numpy.core.defchararray.chararray.find",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_index.fail": [
        "numpy.char.index",
        "numpy.core.defchararray.chararray.index",
        "npy_tempita._looper.loop_pos.index",
        "numpy.core.defchararray.index"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_index": [
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.core.defchararray.index",
        "numpy.char.index",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.index",
        "npy_tempita._looper.loop_pos.index"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_isalnum": [
        "numpy.core.defchararray.isalnum",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.chararray.isalnum",
        "numpy.bool_"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_isalpha": [
        "numpy.core.defchararray.isalpha",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.core.defchararray.chararray.isalpha"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_isdigit": [
        "numpy.core.defchararray.isdigit",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.core.defchararray.chararray.isdigit"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_islower": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.islower",
        "numpy.bool_",
        "numpy.core.defchararray.chararray.islower"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_isspace": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.core.defchararray.isspace",
        "numpy.core.defchararray.chararray.isspace"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_istitle": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.core.defchararray.istitle",
        "numpy.core.defchararray.chararray.istitle"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_isupper": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.core.defchararray.isupper",
        "numpy.core.defchararray.chararray.isupper"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_rfind": [
        "numpy.core.defchararray.chararray.rfind",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.rfind"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail": [
        "numpy.core.defchararray.rindex",
        "numpy.char.rindex",
        "numpy.core.defchararray.chararray.rindex"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_rindex": [
        "numpy.char.rindex",
        "numpy.core.defchararray.chararray.rindex",
        "numpy.testing.assert_",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.defchararray.rindex"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_startswith": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.startswith",
        "numpy.bool_",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail"
    ],
    "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail": [
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.setup": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_capitalize": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.capitalize",
        "numpy.string_",
        "numpy.core.defchararray.chararray.capitalize"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_center": [
        "numpy.core.defchararray.chararray.center",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.startswith",
        "numpy.char.str_len",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_center.center",
        "numpy.core.defchararray.str_len",
        "numpy.char.center",
        "numpy.core.defchararray.center",
        "numpy.all",
        "numpy.string_",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_decode": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.ma.core.array",
        "numpy.testing.assert_",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.core.defchararray.decode",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_encode": [
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.encode",
        "numpy.core.defchararray.encode"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_expandtabs": [
        "numpy.core.defchararray.chararray.expandtabs",
        "numpy.core.defchararray.expandtabs",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_join": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.decode",
        "numpy.ma.masked.view",
        "numpy.core.defchararray.chararray.join",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.unicode_",
        "numpy.char.join",
        "numpy.core.defchararray.decode",
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_ljust": [
        "numpy.core.defchararray.ljust",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.startswith",
        "numpy.char.str_len",
        "numpy.core.defchararray.chararray.ljust",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.str_len",
        "numpy.all",
        "numpy.string_",
        "numpy.char.ljust",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_lower": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.lower",
        "numpy.string_",
        "numpy.core.defchararray.chararray.lower"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_lstrip": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.lstrip",
        "numpy.string_",
        "numpy.core.defchararray.chararray.lstrip"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_partition": [
        "numpy.core.fromnumeric.partition",
        "numpy.partition",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.partition",
        "numpy.string_",
        "numpy.core.defchararray.partition",
        "numpy.core.defchararray.chararray.partition"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_replace": [
        "numpy.unicode_",
        "numpy.core.defchararray.chararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.f2py.auxfuncs.replace",
        "numpy.string_",
        "numpy.core.defchararray.replace"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_rjust": [
        "numpy.core.defchararray.rjust",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.startswith",
        "numpy.char.str_len",
        "numpy.char.rjust",
        "numpy.core.defchararray.chararray.rjust",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.str_len",
        "numpy.all",
        "numpy.string_",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_rpartition": [
        "numpy.core.defchararray.rpartition",
        "numpy.core.defchararray.chararray.rpartition",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_rsplit": [
        "numpy.core.defchararray.rsplit",
        "numpy.object_",
        "numpy.testing.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.rsplit",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_rstrip": [
        "numpy.unicode_",
        "numpy.core.defchararray.rstrip",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_strip": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.strip",
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_split": [
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.object_",
        "numpy.core.defchararray.split",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.split",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_splitlines": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.object_",
        "numpy.core.defchararray.splitlines",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.splitlines",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_swapcase": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.swapcase",
        "numpy.core.defchararray.chararray.swapcase",
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_title": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.title",
        "numpy.core.defchararray.chararray.title",
        "numpy.string_"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_upper": [
        "numpy.unicode_",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.upper",
        "numpy.string_",
        "numpy.core.defchararray.chararray.upper"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail": [
        "numpy.core.defchararray.chararray.isnumeric",
        "numpy.core.defchararray.isnumeric"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.core.defchararray.isnumeric",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.defchararray.chararray.isnumeric"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail": [
        "numpy.core.defchararray.isdecimal",
        "numpy.core.defchararray.chararray.isdecimal"
    ],
    "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail",
        "numpy.core.defchararray.isdecimal",
        "numpy.core.defchararray.chararray.isdecimal"
    ],
    "numpy.core.tests.test_defchararray.TestOperations.setup": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestOperations.test_add": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestOperations.test_radd": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestOperations.test_mul": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.chararray",
        "numpy.ma.masked.view",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.testing.assert_array_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail"
    ],
    "numpy.core.tests.test_defchararray.TestOperations.test_rmul": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.chararray",
        "numpy.ma.masked.view",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.testing.assert_array_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail"
    ],
    "numpy.core.tests.test_defchararray.TestOperations.test_mod": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.array",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.TestOperations.test_rmod": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.ma.masked.view",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail"
    ],
    "numpy.core.tests.test_defchararray.TestOperations.test_slice": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_defchararray.test_empty_indexing": [
        "numpy.testing.assert_",
        "numpy.size",
        "numpy.core.fromnumeric.size",
        "numpy.ma.core.size",
        "numpy.chararray"
    ],
    "numpy.core.tests.test_numeric.TestResize.test_copies": [
        "numpy.resize",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestResize.test_zeroresize": [
        "numpy.testing.assert_array_equal",
        "numpy.resize",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestResize.test_reshape_from_zero": [
        "numpy.zeros",
        "numpy.float32",
        "numpy.testing.assert_array_equal",
        "numpy.resize",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_choose": [
        "numpy.choose",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_clip": [
        "numpy.clip",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_compress": [
        "numpy.compress",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_count_nonzero": [
        "numpy.count_nonzero",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_cumproduct": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.cumproduct",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A",
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarinherit.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.array",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.all",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_diagonal": [
        "numpy.diagonal",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_mean": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A",
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarinherit.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.isnan",
        "numpy.mean",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.array",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.all",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_ptp": [
        "numpy.ptp",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_prod": [
        "numpy.prod",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_ravel": [
        "numpy.ravel",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_repeat": [
        "numpy.repeat",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_reshape": [
        "numpy.reshape",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_round": [
        "numpy.around",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_searchsorted": [
        "numpy.searchsorted",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_size": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A",
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarinherit.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.size",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_squeeze": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_std": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A",
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarinherit.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.isnan",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.array",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.std",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.testing.assert_almost_equal",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_swapaxes": [
        "numpy.swapaxes",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_sum": [
        "numpy.sum",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_take": [
        "numpy.core.numeric.indices",
        "numpy.take",
        "numpy.indices",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_trace": [
        "numpy.trace",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_transpose": [
        "numpy.transpose",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonarrayArgs.test_var": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A",
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarinherit.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.isnan",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.array",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.var",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.testing.assert_almost_equal",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.core.tests.test_numeric.TestIsscalar.test_isscalar": [
        "numpy.int16",
        "numpy.testing.assert_",
        "numpy.isscalar"
    ],
    "numpy.core.tests.test_numeric.TestBoolScalar.test_logical": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_or": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_and": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestBoolScalar.test_bitwise_xor": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestBoolArray.setup": [
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestBoolArray.test_all_any": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.any",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestBoolArray.test_logical_not_abs": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.logical_not"
    ],
    "numpy.core.tests.test_numeric.TestBoolArray.test_logical_and_or_xor": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.logical_xor",
        "numpy.logical_or",
        "numpy.logical_and"
    ],
    "numpy.core.tests.test_numeric.TestBoolCmp.setup": [
        "numpy.float32",
        "numpy.ones",
        "numpy.float64"
    ],
    "numpy.core.tests.test_numeric.TestBoolCmp.test_float": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.isnan",
        "numpy.int8",
        "numpy.zeros_like",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.isfinite",
        "numpy.isinf",
        "numpy.signbit"
    ],
    "numpy.core.tests.test_numeric.TestBoolCmp.test_double": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.isnan",
        "numpy.int8",
        "numpy.zeros_like",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.isfinite",
        "numpy.isinf",
        "numpy.signbit"
    ],
    "numpy.core.tests.test_numeric.TestSeterr": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_numeric.TestSeterr.test_default": [
        "numpy.geterr",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestSeterr.test_set": [
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.geterr",
        "numpy.seterr"
    ],
    "numpy.core.tests.test_numeric.TestSeterr.test_divide_err": [
        "numpy.core.tests.test_defchararray.TestVecString.test_non_existent_method.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_index.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_non_string_array.fail",
        "numpy.seterr",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_args_tuple.fail",
        "numpy.errstate",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_type_descr.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_function_args.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isdecimal.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_invalid_result_type.fail",
        "numpy.core.tests.test_defchararray.TestBasic.test_from_unicode_array.fail",
        "numpy.core.tests.test_defchararray.TestVecString.test_broadcast_error.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_endswith.fail",
        "numpy.core.tests.test_defchararray.TestInformation.test_rindex.fail",
        "numpy.core.tests.test_defchararray.TestMethods.test_isnumeric.fail",
        "numpy.core.tests.test_multiarray.TestIO.test_unseekable_fromfile.fail",
        "numpy.array",
        "numpy.core.tests.test_defchararray.TestInformation.test_startswith.fail"
    ],
    "numpy.core.tests.test_numeric.TestSeterr.test_errobj": [
        "numpy.errstate",
        "numpy.seterrobj",
        "numpy.divide",
        "numpy.geterrobj",
        "numpy.core.tests.test_numeric.TestSeterr.test_errobj.log_err",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestSeterr.test_errobj.log_err": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_numeric.TestSeterr.test_errobj_noerrmask": [
        "numpy.isnan",
        "numpy.seterrobj",
        "numpy.geterrobj",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestFloatExceptions.assert_raises_fpe": [
        "numpy.core.defchararray.find",
        "numpy.core.defchararray.chararray.find",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestFloatExceptions.assert_op_raises_fpe": [
        "numpy.core.tests.test_numeric.TestFloatExceptions.assert_raises_fpe"
    ],
    "numpy.core.tests.test_numeric.TestFloatExceptions.test_floating_exceptions": [
        "numpy.finfo",
        "numpy.lib.type_check.real",
        "numpy.real",
        "numpy.errstate",
        "numpy.core.tests.test_numeric.TestFloatExceptions.assert_raises_fpe",
        "numpy.power",
        "numpy.obj2sctype"
    ],
    "numpy.core.tests.test_numeric.TestFloatExceptions.test_warnings": [
        "numpy.testing.assert_equal",
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.divide",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestTypes.check_promotion_cases": [
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.float32",
        "numpy.int64",
        "numpy.longdouble",
        "numpy.dtype",
        "numpy.clongdouble",
        "numpy.uint8",
        "numpy.bool_",
        "numpy.float64",
        "numpy.complex64",
        "numpy.uint32",
        "numpy.uint16",
        "numpy.complex128",
        "numpy.uint64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestTypes.test_coercion.res_type": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_numeric.TestTypes.test_coercion": [
        "numpy.int8",
        "numpy.longdouble",
        "numpy.float32",
        "numpy.complex128",
        "numpy.dtype",
        "numpy.clongdouble",
        "numpy.core.tests.test_numeric.TestTypes.check_promotion_cases",
        "numpy.float64",
        "numpy.float16",
        "numpy.complex64",
        "numpy.core.tests.test_numeric.TestTypes.test_coercion.res_type",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestTypes.test_result_type": [
        "numpy.core.tests.test_numeric.TestTypes.check_promotion_cases",
        "numpy.dtype",
        "numpy.testing.assert_",
        "numpy.result_type"
    ],
    "numpy.core.tests.test_numeric.TestTypes.test_promote_types_endian": [
        "numpy.promote_types",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestTypes.test_promote_types_strings": [
        "numpy.promote_types",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestTypes.test_can_cast": [
        "numpy.int32",
        "numpy.testing.assert_",
        "numpy.int64",
        "numpy.float64",
        "numpy.can_cast"
    ],
    "numpy.core.tests.test_numeric.TestTypes.test_can_cast_values": [
        "numpy.testing.assert_",
        "numpy.finfo",
        "numpy.can_cast",
        "numpy.iinfo"
    ],
    "numpy.core.tests.test_numeric.TestFromiter.test_types": [
        "numpy.int32",
        "numpy.fromiter",
        "numpy.int64",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.core.tests.test_numeric.TestFromiter.makegen"
    ],
    "numpy.core.tests.test_numeric.TestFromiter.test_lengths": [
        "numpy.int",
        "numpy.fromiter",
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.TestFromiter.makegen",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestFromiter.test_values": [
        "numpy.int",
        "numpy.fromiter",
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.TestFromiter.makegen",
        "numpy.array",
        "numpy.alltrue"
    ],
    "numpy.core.tests.test_numeric.TestFromiter.load_data": [
        "numpy.core.tests.test_numeric.NIterError"
    ],
    "numpy.core.tests.test_numeric.TestFromiter.test_2592": [
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.int",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.core.defchararray.count",
        "numpy.fromiter",
        "numpy.core.tests.test_numeric.NIterError",
        "numpy.ma.core.MaskedArray.count",
        "numpy.core.tests.test_numeric.TestFromiter.load_data",
        "numpy.core.defchararray.chararray.count"
    ],
    "numpy.core.tests.test_numeric.TestFromiter.test_2592_edge": [
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count",
        "numpy.int",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count",
        "numpy.core.defchararray.count",
        "numpy.fromiter",
        "numpy.ma.core.MaskedArray.count",
        "numpy.core.tests.test_numeric.NIterError",
        "numpy.core.tests.test_numeric.TestFromiter.load_data",
        "numpy.core.defchararray.chararray.count"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_trivial": [
        "numpy.count_nonzero",
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.nonzero"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_onedim": [
        "numpy.count_nonzero",
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.nonzero"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_twodim": [
        "numpy.eye",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.nonzero",
        "numpy.count_nonzero",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_sparse": [
        "numpy.zeros",
        "numpy.arange",
        "numpy.concatenate",
        "numpy.nonzero",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_return_type.C": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_return_type": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.nonzero",
        "numpy.ma.nonzero",
        "numpy.core.fromnumeric.nonzero",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.nonzero",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_numeric.TestNonzero.test_return_type.C"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis": [
        "numpy.array",
        "numpy.AxisError",
        "numpy.count_nonzero",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_all_dtypes.assert_equal_w_dt": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_all_dtypes": [
        "numpy.core.fromnumeric.reshape",
        "numpy.count_nonzero",
        "numpy.testing.assert_equal",
        "numpy.intp",
        "numpy.array",
        "numpy.ones",
        "numpy.ma.core.reshape",
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_all_dtypes.assert_equal_w_dt",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_count_nonzero_axis_consistent": [
        "numpy.lib.user_array.container.astype",
        "numpy.count_nonzero",
        "numpy.testing.assert_equal",
        "numpy.random.randint",
        "numpy.core.fromnumeric.size",
        "numpy.random.RandomState",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_countnonzero_axis_empty": [
        "numpy.count_nonzero",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_array_method": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_invalid_object": [
        "numpy.core.tests.test_numeric.TestNonzero.test_nonzero_invalid_object.BoolErrors",
        "numpy.array",
        "numpy.nonzero"
    ],
    "numpy.core.tests.test_numeric.TestIndex.test_boolean": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.random.randint",
        "numpy.random.rand"
    ],
    "numpy.core.tests.test_numeric.TestIndex.test_boolean_edgecase": [
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestBinaryRepr.test_zero": [
        "numpy.testing.assert_equal",
        "numpy.binary_repr"
    ],
    "numpy.core.tests.test_numeric.TestBinaryRepr.test_positive": [
        "numpy.testing.assert_equal",
        "numpy.binary_repr"
    ],
    "numpy.core.tests.test_numeric.TestBinaryRepr.test_negative": [
        "numpy.testing.assert_equal",
        "numpy.binary_repr"
    ],
    "numpy.core.tests.test_numeric.TestBinaryRepr.test_sufficient_width": [
        "numpy.testing.assert_equal",
        "numpy.binary_repr"
    ],
    "numpy.core.tests.test_numeric.TestBinaryRepr.test_neg_width_boundaries": [
        "numpy.testing.assert_equal",
        "numpy.binary_repr"
    ],
    "numpy.core.tests.test_numeric.TestBaseRepr.test_base3": [
        "numpy.base_repr",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestBaseRepr.test_positive": [
        "numpy.base_repr",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestBaseRepr.test_negative": [
        "numpy.base_repr",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestBaseRepr.test_base_range": [
        "numpy.base_repr"
    ],
    "numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equal": [
        "numpy.array_equal",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestArrayComparisons.test_none_compares_elementwise": [
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestArrayComparisons.test_array_equiv": [
        "numpy.array_equiv",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.assert_array_strict_equal": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestClip.clip": [
        "numpy.less",
        "numpy.greater"
    ],
    "numpy.core.tests.test_numeric.TestClip._generate_data": [
        "numpy.random.randn"
    ],
    "numpy.core.tests.test_numeric.TestClip._generate_data_complex": [
        "numpy.random.randn",
        "numpy.random.rand"
    ],
    "numpy.core.tests.test_numeric.TestClip._generate_flt_data": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32"
    ],
    "numpy.core.tests.test_numeric.TestClip._neg_byteorder": [
        "numpy.asarray"
    ],
    "numpy.core.tests.test_numeric.TestClip._generate_non_native_data": [
        "numpy.testing.assert_",
        "numpy.random.randn",
        "numpy.core.tests.test_numeric.TestClip._neg_byteorder"
    ],
    "numpy.core.tests.test_numeric.TestClip._generate_int_data": [
        "numpy.lib.user_array.container.astype",
        "numpy.int64"
    ],
    "numpy.core.tests.test_numeric.TestClip._generate_int32_data": [
        "numpy.lib.user_array.container.astype",
        "numpy.int32"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_double": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_int": [
        "numpy.int",
        "numpy.core.tests.test_numeric.TestClip._generate_int_data",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_array_double": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_nonnative": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.TestClip._generate_non_native_data",
        "numpy.core.tests.test_numeric.TestClip._neg_byteorder",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_complex": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip._generate_data_complex",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_complex": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ones",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_non_contig": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_out": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_int32_inout": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip._generate_int32_data",
        "numpy.int32",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.float64",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_int64_out": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip._generate_int32_data",
        "numpy.int32",
        "numpy.int64",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_int64_inout": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip._generate_int32_data",
        "numpy.int32",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.float64",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_int32_out": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.int32",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_inplace_01": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_simple_inplace_02": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_noncontig_inplace": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_01": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_02": [
        "numpy.core.tests.test_numeric.TestClip._generate_int_data",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.int32",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_03": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip._generate_int32_data",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.float64"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_04": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip._generate_int32_data",
        "numpy.float32",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_05": [
        "numpy.core.tests.test_numeric.TestClip._generate_int_data",
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_06": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._neg_byteorder",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_07": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._neg_byteorder",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_08": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._neg_byteorder",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_09": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._neg_byteorder",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_10": [
        "numpy.core.tests.test_numeric.TestClip._generate_int_data",
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.float32",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_11": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_non_native_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_type_cast_12": [
        "numpy.core.tests.test_numeric.TestClip._generate_int_data",
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.float32",
        "numpy.int32",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple2": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip._generate_int32_data",
        "numpy.int32",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.float64",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_simple_int32": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip._generate_int32_data",
        "numpy.int32",
        "numpy.int64",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_array_int32": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.core.tests.test_numeric.TestClip._generate_int32_data",
        "numpy.int32",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.float64",
        "numpy.core.tests.test_numeric.assert_array_strict_equal"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_with_out_array_outint32": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.int32",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_inplace_array": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_inplace_simple": [
        "numpy.core.tests.test_numeric.TestClip.fastclip",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_func_takes_out": [
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.M",
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.TestClip.clip",
        "numpy.core.tests.test_numeric.assert_array_strict_equal",
        "numpy.core.tests.test_numeric.TestClip._generate_data",
        "numpy.clip"
    ],
    "numpy.core.tests.test_numeric.TestClip.test_clip_nan": [
        "numpy.testing.assert_equal",
        "numpy.arange"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.setup": [
        "numpy.seterr"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.teardown": [
        "numpy.seterr"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.tst_allclose": [
        "numpy.allclose",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.tst_not_allclose": [
        "numpy.allclose",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.test_ip_allclose": [
        "numpy.ma.core.reshape",
        "numpy.core.tests.test_numeric.TestAllclose.tst_allclose",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.test_ip_not_allclose": [
        "numpy.ma.core.reshape",
        "numpy.core.tests.test_numeric.TestAllclose.tst_not_allclose",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.test_no_parameter_modification": [
        "numpy.allclose",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.test_min_int": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_",
        "numpy.allclose",
        "numpy.int_",
        "numpy.array",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.test_equalnan": [
        "numpy.allclose",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray.Foo": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray.Foo.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray": [
        "numpy.core.tests.test_numeric.TestAllclose.test_return_class_is_ndarray.Foo",
        "numpy.testing.assert_",
        "numpy.allclose"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.setup": [
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_ip_isclose": [
        "numpy.isclose",
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_numeric.TestIsclose.setup"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.tst_all_isclose": [
        "numpy.all",
        "numpy.testing.assert_",
        "numpy.isclose"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.tst_none_isclose": [
        "numpy.testing.assert_",
        "numpy.isclose",
        "numpy.any"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.tst_isclose_allclose": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.allclose",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.isclose",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.isscalar"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_ip_all_isclose": [
        "numpy.core.tests.test_numeric.TestIsclose.tst_all_isclose",
        "numpy.core.tests.test_numeric.TestIsclose.setup"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_ip_none_isclose": [
        "numpy.core.tests.test_numeric.TestIsclose.tst_none_isclose",
        "numpy.array",
        "numpy.core.tests.test_numeric.TestIsclose.setup"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_ip_isclose_allclose": [
        "numpy.core.tests.test_numeric.TestIsclose.tst_isclose_allclose",
        "numpy.array",
        "numpy.core.tests.test_numeric.TestIsclose.setup"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_equal_nan": [
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.isclose"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_masked_arrays": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.isclose",
        "numpy.ma.core.masked_where",
        "numpy.ma.masked_where"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_scalar_return": [
        "numpy.isscalar",
        "numpy.testing.assert_",
        "numpy.isclose"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_no_parameter_modification": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.isclose"
    ],
    "numpy.core.tests.test_numeric.TestIsclose.test_non_finite_scalar": [
        "numpy.testing.assert_",
        "numpy.bool_",
        "numpy.isclose"
    ],
    "numpy.core.tests.test_numeric.TestStdVar.setup": [
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestStdVar.test_basic": [
        "numpy.std",
        "numpy.var",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestStdVar.test_scalars": [
        "numpy.var",
        "numpy.testing.assert_equal",
        "numpy.std"
    ],
    "numpy.core.tests.test_numeric.TestStdVar.test_ddof1": [
        "numpy.std",
        "numpy.var",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestStdVar.test_ddof2": [
        "numpy.std",
        "numpy.var",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestStdVar.test_out_scalar": [
        "numpy.mean",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.std",
        "numpy.var",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestStdVarComplex.test_basic": [
        "numpy.std",
        "numpy.var",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestStdVarComplex.test_scalars": [
        "numpy.var",
        "numpy.testing.assert_equal",
        "numpy.std"
    ],
    "numpy.core.tests.test_numeric.TestCreationFuncs": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_numeric.TestCreationFuncs.check_function": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith"
    ],
    "numpy.core.tests.test_numeric.TestCreationFuncs.test_zeros": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestCreationFuncs.check_function"
    ],
    "numpy.core.tests.test_numeric.TestCreationFuncs.test_ones": [
        "numpy.zeros",
        "numpy.core.tests.test_numeric.TestCreationFuncs.check_function"
    ],
    "numpy.core.tests.test_numeric.TestCreationFuncs.test_empty": [
        "numpy.core.tests.test_numeric.TestCreationFuncs.check_function",
        "numpy.empty"
    ],
    "numpy.core.tests.test_numeric.TestCreationFuncs.test_full": [
        "numpy.full",
        "numpy.core.tests.test_numeric.TestCreationFuncs.check_function"
    ],
    "numpy.core.tests.test_numeric.TestCreationFuncs.test_for_reference_leak": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.full",
        "numpy.empty"
    ],
    "numpy.core.tests.test_numeric.TestLikeFuncs.setup": [
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.swapaxes",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_numeric.TestLikeFuncs.compare_array_value": [
        "numpy.testing.assert_",
        "numpy.all"
    ],
    "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function": [
        "numpy.core.fromnumeric.swapaxes",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.core.tests.test_numeric.TestLikeFuncs.compare_array_value",
        "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function.MyNDArray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.shape",
        "numpy.ma.masked.view",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.shape",
        "numpy.swapaxes",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_numeric.TestLikeFuncs.test_ones_like": [
        "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function",
        "numpy.ones_like"
    ],
    "numpy.core.tests.test_numeric.TestLikeFuncs.test_zeros_like": [
        "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function",
        "numpy.zeros_like"
    ],
    "numpy.core.tests.test_numeric.TestLikeFuncs.test_empty_like": [
        "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function",
        "numpy.empty_like"
    ],
    "numpy.core.tests.test_numeric.TestLikeFuncs.test_filled_like": [
        "numpy.core.tests.test_numeric.TestLikeFuncs.check_like_function",
        "numpy.full_like"
    ],
    "numpy.core.tests.test_numeric.TestCorrelate._setup": [
        "numpy.array",
        "numpy.arange"
    ],
    "numpy.core.tests.test_numeric.TestCorrelate.test_float": [
        "numpy.arange",
        "numpy.correlate",
        "numpy.core.tests.test_numeric.TestCorrelate._setup",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestCorrelate.test_object": [
        "numpy.correlate",
        "numpy.core.tests.test_numeric.TestCorrelate._setup",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestCorrelate.test_no_overwrite": [
        "numpy.correlate",
        "numpy.ones",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_numeric.TestCorrelate.test_complex": [
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo.conjugate",
        "numpy.conjugate",
        "numpy.correlate",
        "numpy.array"
    ],
    "numpy.core.tests.test_numeric.TestConvolve.test_object": [
        "numpy.full",
        "numpy.convolve"
    ],
    "numpy.core.tests.test_numeric.TestConvolve.test_no_overwrite": [
        "numpy.ones",
        "numpy.testing.assert_array_equal",
        "numpy.convolve"
    ],
    "numpy.core.tests.test_numeric.TestArgwhere.test_2D": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.argwhere",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_numeric.TestArgwhere.test_list": [
        "numpy.testing.assert_equal",
        "numpy.argwhere"
    ],
    "numpy.core.tests.test_numeric.TestStringFunction.test_set_string_function": [
        "numpy.set_string_function",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestRoll.test_roll1d": [
        "numpy.testing.assert_equal",
        "numpy.roll",
        "numpy.array",
        "numpy.arange"
    ],
    "numpy.core.tests.test_numeric.TestRoll.test_roll2d": [
        "numpy.reshape",
        "numpy.roll",
        "numpy.arange",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestRoll.test_roll_empty": [
        "numpy.roll",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestRollaxis.test_exceptions": [
        "numpy.AxisError",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.rollaxis",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_numeric.TestRollaxis.test_results": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.indices",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.rollaxis",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.all",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_numeric.TestMoveaxis.test_move_to_end": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.matlib.randn",
        "numpy.random.randn",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_numeric.TestMoveaxis.test_move_new_position": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.matlib.randn",
        "numpy.random.randn",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_numeric.TestMoveaxis.test_preserve_order": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.zeros",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_numeric.TestMoveaxis.test_move_multiples": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.zeros",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_numeric.TestMoveaxis.test_errors": [
        "numpy.matlib.randn",
        "numpy.random.randn",
        "numpy.moveaxis",
        "numpy.AxisError"
    ],
    "numpy.core.tests.test_numeric.TestMoveaxis.test_array_likes": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.ma.zeros",
        "numpy.matlib.zeros",
        "numpy.ma.core.MaskedArray",
        "numpy.ma.MaskedArray",
        "numpy.ndarray",
        "numpy.moveaxis"
    ],
    "numpy.core.tests.test_numeric.TestCross.test_2x2": [
        "numpy.cross",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestCross.test_2x3": [
        "numpy.cross",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestCross.test_3x3": [
        "numpy.cross",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestCross.test_broadcasting": [
        "numpy.tile",
        "numpy.testing.assert_equal",
        "numpy.cross"
    ],
    "numpy.core.tests.test_numeric.TestCross.test_broadcasting_shapes": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.AxisError",
        "numpy.ones",
        "numpy.cross",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_numeric.test_outer_out_param": [
        "numpy.linspace",
        "numpy.ones",
        "numpy.outer",
        "numpy.ndarray",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestRequire.generate_all_false": [
        "numpy.zeros",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numeric.TestRequire.set_and_check_flag": [
        "numpy.testing.assert_",
        "numpy.require"
    ],
    "numpy.core.tests.test_numeric.TestRequire.test_require_each": [
        "numpy.core.tests.test_numeric.TestRequire.generate_all_false",
        "numpy.core.tests.test_numeric.TestRequire.set_and_check_flag"
    ],
    "numpy.core.tests.test_numeric.TestRequire.test_unknown_requirement": [
        "numpy.core.tests.test_numeric.TestRequire.generate_all_false",
        "numpy.require"
    ],
    "numpy.core.tests.test_numeric.TestRequire.test_non_array_input": [
        "numpy.testing.assert_",
        "numpy.require",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestRequire.test_C_and_F_simul": [
        "numpy.core.tests.test_numeric.TestRequire.generate_all_false",
        "numpy.require"
    ],
    "numpy.core.tests.test_numeric.TestRequire.test_ensure_array.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_numeric.TestRequire.test_ensure_array": [
        "numpy.ndarray",
        "numpy.core.tests.test_numeric.TestRequire.test_ensure_array.ArraySubclass",
        "numpy.testing.assert_",
        "numpy.require"
    ],
    "numpy.core.tests.test_numeric.TestRequire.test_preserve_subtype.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_numeric.TestRequire.test_preserve_subtype": [
        "numpy.core.tests.test_numeric.TestRequire.test_preserve_subtype.ArraySubclass",
        "numpy.core.tests.test_numeric.TestRequire.set_and_check_flag"
    ],
    "numpy.core.tests.test_numeric.TestBroadcast.test_broadcast_in_args": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.empty",
        "numpy.broadcast"
    ],
    "numpy.core.tests.test_numeric.TestBroadcast.test_broadcast_single_arg": [
        "numpy.testing.assert_",
        "numpy.broadcast",
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestBroadcast.test_number_of_arguments": [
        "numpy.broadcast",
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numeric.TestKeepdims.sub_array": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_numeric.TestKeepdims.sub_array.sum": [
        "numpy.ndarray.sum",
        "numpy.sum",
        "numpy.ma.sum",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.core.tests.test_numeric.TestKeepdims.test_raise": [
        "numpy.ma.masked.view",
        "numpy.sum",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.tests.test_numeric.TestKeepdims.sub_array",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_numeric.TestTensordot.test_zero_dimension": [
        "numpy.testing.assert_array_equal",
        "numpy.einsum",
        "numpy.dot",
        "numpy.tensordot",
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_index_no_floats": [
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_slicing_no_floats": [
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_index_no_array_to_index": [
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_none_index": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_empty_tuple_index": [
        "numpy.testing.assert_",
        "numpy.int_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_void_scalar_empty_tuple": [
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.zeros"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_same_kind_index_casting": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.repeat",
        "numpy.reshape",
        "numpy.repeat",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_empty_fancy_index": [
        "numpy.intp",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_ellipsis_index": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_single_int_index": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_single_bool_index": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_boolean_shape_mismatch": [
        "numpy.zeros",
        "numpy.array",
        "numpy.ones"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_onedim": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch": [
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.arange"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_needs_api": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.ones"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_boolean_indexing_twodim": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_reverse_strides_and_subspace_bufferinit": [
        "numpy.intp",
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.zeros",
        "numpy.ones",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_reversed_strides_result_allocation": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_uncontiguous_subspace_assignment": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.full",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_too_many_fancy_indices_special_case": [
        "numpy.ones",
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_scalar_array_bool": [
        "numpy.bool_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_everything_returns_views": [
        "numpy.arange",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_broaderrors_indexing": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_trivial_fancy_out_of_bounds": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.intp"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_nonbaseclass_values.SubClass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_nonbaseclass_values": [
        "numpy.core.tests.test_indexing.TestIndexing.test_nonbaseclass_values.SubClass",
        "numpy.ma.core.MaskedArray.view",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.masked.view",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.zeros",
        "numpy.all"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_subclass_writeable": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_memory_order": [
        "numpy.testing.assert_",
        "numpy.arange"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type": [
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike",
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.Zero",
        "numpy.ndarray",
        "numpy.array",
        "numpy.float_"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__": [
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_small_regressions": [
        "numpy.intp",
        "numpy.dtype",
        "numpy.uint8",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_unaligned": [
        "numpy.lib.user_array.container.astype",
        "numpy.arange",
        "numpy.ma.core.MaskedArray.view",
        "numpy.dtype",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.int8",
        "numpy.int16",
        "numpy.intp",
        "numpy.array",
        "numpy.core.fromnumeric.size",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.zeros",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_tuple_subclass": [
        "numpy.core.defchararray.index",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.tests.test_indexing.TestIndexing.test_tuple_subclass.TupleSubclass",
        "numpy.shape",
        "numpy.core.defchararray.chararray.index",
        "numpy.core.fromnumeric.shape",
        "numpy.char.index",
        "numpy.testing.assert_",
        "numpy.ones",
        "npy_tempita._looper.loop_pos.index",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index": [
        "numpy.zeros",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike",
        "numpy.testing.assert_array_equal",
        "numpy.arange"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_indexing_array_weird_strides": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.broadcast_to",
        "numpy.ones",
        "numpy.arange",
        "numpy.intp"
    ],
    "numpy.core.tests.test_indexing.TestIndexing.test_indexing_array_negative_strides": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_indexing.TestFieldIndexing.test_scalar_return_type": [
        "numpy.zeros",
        "numpy.ndarray",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_prepending_ones": [
        "numpy.zeros",
        "numpy.ones"
    ],
    "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_prepend_not_one": [
        "numpy.zeros",
        "numpy.core.tests.test_indexing.TestBroadcastedAssignments.assign",
        "numpy.ones"
    ],
    "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_simple_broadcasting_errors": [
        "numpy.zeros",
        "numpy.core.tests.test_indexing.TestBroadcastedAssignments.assign"
    ],
    "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_index_is_larger": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.zeros",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.core.tests.test_indexing.TestBroadcastedAssignments.test_broadcast_subspace": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.arange",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.zeros",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.core.tests.test_indexing.TestSubclasses": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_indexing.TestSubclasses.test_basic.SubClass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_indexing.TestSubclasses.test_basic": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_indexing.TestSubclasses.test_basic.SubClass"
    ],
    "numpy.core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info.SubClass": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info.SubClass.__array_finalize__": [
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info": [
        "numpy.core.tests.test_indexing.TestSubclasses.test_finalize_gets_full_info.SubClass",
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_indexing.TestFancyIndexingCast.test_boolean_index_cast_assign": [
        "numpy.core.fromnumeric.shape",
        "numpy.zeros",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestFancyIndexingEquivalence.test_object_assign": [
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.arange"
    ],
    "numpy.core.tests.test_indexing.TestFancyIndexingEquivalence.test_cast_equivalence": [
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.setup": [
        "numpy.intp",
        "numpy.int",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.reshape",
        "numpy.empty",
        "numpy.zeros",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.int8",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index": [
        "numpy.prod",
        "numpy.core.numeric.indices",
        "numpy.ndarray",
        "numpy.arange",
        "numpy.broadcast",
        "numpy.indices",
        "numpy.ma.append",
        "numpy.array",
        "numpy.any",
        "numpy.lib.function_base.append",
        "numpy.product",
        "numpy.nonzero",
        "numpy.intp",
        "numpy.int",
        "numpy.ravel_multi_index",
        "numpy.ma.core.size",
        "numpy.lib.user_array.container.astype",
        "numpy.core.fromnumeric.size",
        "numpy.append",
        "numpy.size",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index": [
        "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index"
    ],
    "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_single_index": [
        "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._get_multi_index"
    ],
    "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._compare_index_result": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.may_share_memory",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_boolean": [
        "numpy.zeros_like",
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_multidim": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__setitem__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Map.__getitem__",
        "numpy.lib.npyio.NpzFile.__getitem__",
        "numpy.core.records.record.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__getitem__",
        "numpy.lib.polynomial.poly1d.__getitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_false_len_sequence.C.__getitem__",
        "numpy.lib.arrayterator.Arrayterator.__getitem__",
        "numpy.lib.polynomial.poly1d.__setitem__",
        "numpy.core.memmap.memmap.__getitem__",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedArray.__setitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__getitem__",
        "numpy.lib.user_array.container.__getitem__",
        "numpy.lib.user_array.container.__setitem__",
        "numpy.core.numerictypes._typedict.__getitem__",
        "numpy.core.tests.test_indexing.TestIndexing.test_broken_sequence_not_nd_index.SequenceLike.__getitem__",
        "numpy.ndarray.__getitem__",
        "numpy.core.tests.test_regression.TestRegression.test_lexsort_invalid_sequence.BuggySequence.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__getitem__",
        "numpy.distutils.npy_pkg_config.VariableSet.__setitem__",
        "numpy.core.tests.test_multiarray.TestCreation.test_non_sequence_sequence.Fail.__getitem__",
        "numpy.core.defchararray.chararray.__getitem__",
        "numpy.array",
        "numpy.lib.index_tricks.nd_grid.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.__getitem__",
        "numpy.core.tests.test_indexing.TestSubclasses.test_slice_decref_getsetslice.KeepIndexObject.__setitem__",
        "numpy.lib.index_tricks.AxisConcatenator.__getitem__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__",
        "numpy.ma.mrecords.MaskedRecords.__setitem__",
        "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_multi_index",
        "numpy._globals.VisibleDeprecationWarning",
        "npy_tempita.bunch.__getitem__",
        "numpy.core.tests.test_multiarray.TestAssignment.test_stringlike_empty_list.bad_sequence.__getitem__",
        "numpy.matrixlib.defmatrix.matrix.__getitem__",
        "numpy.ma.core.reshape",
        "numpy.lib._datasource._FileOpeners.__getitem__",
        "numpy.empty",
        "numpy.ma.core.MaskedIterator.__getitem__",
        "numpy.ma.core.MaskedIterator.__setitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__getitem__",
        "numpy.lib.index_tricks.IndexExpression.__getitem__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__setitem__",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_indexing.TestMultiIndexingAutomated.test_1d": [
        "numpy.core.tests.test_indexing.TestMultiIndexingAutomated._check_single_index",
        "numpy.arange",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_indexing": [
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_valid_slicing": [
        "numpy.array"
    ],
    "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_argument_errors": [
        "numpy.reshape",
        "numpy.array",
        "numpy.take",
        "numpy.float64"
    ],
    "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication": [
        "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication.mult",
        "numpy.int_",
        "numpy.float_"
    ],
    "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_reduce_axis_float_index": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_indexing.TestBooleanIndexing.test_bool_as_int_argument_errors": [
        "numpy.reshape",
        "numpy.array",
        "numpy.take",
        "numpy.bool_"
    ],
    "numpy.core.tests.test_indexing.TestBooleanIndexing.test_boolean_indexing_weirdness": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ones",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_indexing.TestArrayToIndexDeprecation.test_array_to_index_error": [
        "numpy.reshape",
        "numpy.array",
        "numpy.take"
    ],
    "numpy.core.tests.test_indexing.TestNonIntegerArrayLike.test_basic": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_indexing.TestMultipleEllipsisError.test_basic": [
        "numpy.arange"
    ],
    "numpy.core.tests.test_indexing.TestCApiAccess.test_getitem": [
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.arange"
    ],
    "numpy.core.tests.test_indexing.TestCApiAccess.test_setitem": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.arange"
    ],
    "numpy.core.tests.test_numerictypes.normalize_descr": [
        "numpy.core.tests.test_numerictypes.normalize_descr",
        "numpy.prod",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_numerictypes.CreateZeros.test_zeros0D": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.void",
        "numpy.zeros",
        "numpy.core.tests.test_numerictypes.normalize_descr"
    ],
    "numpy.core.tests.test_numerictypes.CreateZeros.test_zerosSD": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.void",
        "numpy.zeros",
        "numpy.core.tests.test_numerictypes.normalize_descr"
    ],
    "numpy.core.tests.test_numerictypes.CreateZeros.test_zerosMD": [
        "numpy.uint8",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.zeros",
        "numpy.core.tests.test_numerictypes.normalize_descr"
    ],
    "numpy.core.tests.test_numerictypes.TestCreateZerosPlain": [
        "numpy.core.tests.test_numerictypes.CreateZeros"
    ],
    "numpy.core.tests.test_numerictypes.TestCreateZerosNested": [
        "numpy.core.tests.test_numerictypes.CreateZeros"
    ],
    "numpy.core.tests.test_numerictypes.CreateValues.test_tuple": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_numerictypes.normalize_descr",
        "numpy.array"
    ],
    "numpy.core.tests.test_numerictypes.CreateValues.test_list_of_tuple": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_numerictypes.normalize_descr",
        "numpy.array"
    ],
    "numpy.core.tests.test_numerictypes.CreateValues.test_list_of_list_of_tuple": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_numerictypes.normalize_descr",
        "numpy.array"
    ],
    "numpy.core.tests.test_numerictypes.TestCreateValuesPlainSingle": [
        "numpy.core.tests.test_numerictypes.CreateValues"
    ],
    "numpy.core.tests.test_numerictypes.TestCreateValuesPlainMultiple": [
        "numpy.core.tests.test_numerictypes.CreateValues"
    ],
    "numpy.core.tests.test_numerictypes.TestCreateValuesNestedSingle": [
        "numpy.core.tests.test_numerictypes.CreateValues"
    ],
    "numpy.core.tests.test_numerictypes.TestCreateValuesNestedMultiple": [
        "numpy.core.tests.test_numerictypes.CreateValues"
    ],
    "numpy.core.tests.test_numerictypes.ReadValuesPlain.test_access_fields": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numerictypes.TestReadValuesPlainSingle": [
        "numpy.core.tests.test_numerictypes.ReadValuesPlain"
    ],
    "numpy.core.tests.test_numerictypes.TestReadValuesPlainMultiple": [
        "numpy.core.tests.test_numerictypes.ReadValuesPlain"
    ],
    "numpy.core.tests.test_numerictypes.ReadValuesNested.test_access_top_fields": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested1_acessors": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested2_acessors": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested1_descriptor": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_numerictypes.ReadValuesNested.test_nested2_descriptor": [
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_numerictypes.TestReadValuesNestedSingle": [
        "numpy.core.tests.test_numerictypes.ReadValuesNested"
    ],
    "numpy.core.tests.test_numerictypes.TestReadValuesNestedMultiple": [
        "numpy.core.tests.test_numerictypes.ReadValuesNested"
    ],
    "numpy.core.tests.test_numerictypes.TestEmptyField.test_assign": [
        "numpy.float32",
        "numpy.arange",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_loses1": [
        "numpy.find_common_type",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_loses2": [
        "numpy.find_common_type",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins": [
        "numpy.find_common_type",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins2": [
        "numpy.find_common_type",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numerictypes.TestCommonType.test_scalar_wins3": [
        "numpy.find_common_type",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numerictypes.TestMultipleFields.setup": [
        "numpy.array"
    ],
    "numpy.core.tests.test_numerictypes.TestMultipleFields._bad_call": [
        "numpy.array"
    ],
    "numpy.core.tests.test_numerictypes.TestMultipleFields.test_no_tuple": [
        "numpy.core.tests.test_numerictypes.TestMultipleFields._bad_call"
    ],
    "numpy.core.tests.test_numerictypes.TestMultipleFields.test_return": [
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.mrecords.MaskedRecords.tolist"
    ],
    "numpy.core.tests.test_numerictypes.TestIsSubDType": [
        "numpy.dtype"
    ],
    "numpy.core.tests.test_numerictypes.TestIsSubDType.test_both_abstract": [
        "numpy.issubdtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_numerictypes.TestIsSubDType.test_same": [
        "numpy.float32",
        "numpy.int32",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.issubdtype"
    ],
    "numpy.core.tests.test_numerictypes.TestIsSubDType.test_subclass": [
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.float64",
        "numpy.issubdtype"
    ],
    "numpy.core.tests.test_numerictypes.TestIsSubDType.test_subclass_backwards": [
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.float64",
        "numpy.issubdtype"
    ],
    "numpy.core.tests.test_numerictypes.TestIsSubDType.test_sibling_class": [
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.float64",
        "numpy.issubdtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.setup": [
        "numpy.core.fromnumeric.shape",
        "numpy.arange",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_roundtrip": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.shape",
        "numpy.allclose",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_open_with_filename": [
        "numpy.core.fromnumeric.shape",
        "numpy.arange",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_unnamed_file": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_attributes": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_filename": [
        "numpy.core.fromnumeric.shape",
        "numpy.arange",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_path": [
        "numpy.core.fromnumeric.shape",
        "numpy.arange",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_filename_fileobj": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_flush": [
        "numpy.core.fromnumeric.shape",
        "numpy.arange",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_del": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_arithmetic_drops_references": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_indexing_drops_references": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_slicing_keeps_references": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_view": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.asarray",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_ufunc_return_ndarray": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.sum",
        "numpy.ndarray",
        "numpy.arange",
        "numpy.shape",
        "numpy.subtract",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.isscalar",
        "numpy.product",
        "numpy.add",
        "numpy.multiply",
        "numpy.average",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_getitem": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ndarray",
        "numpy.arange",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.memmap",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_memmap_subclass.MemmapSubClass": [
        "numpy.memmap"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_memmap_subclass": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.shape",
        "numpy.core.tests.test_memmap.TestMemmap.test_memmap_subclass.MemmapSubClass",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_memmap.TestMemmap.test_mmap_offset_greater_than_allocation_granularity": [
        "numpy.testing.assert_",
        "numpy.memmap"
    ],
    "numpy.core.tests.test_ufunc.TestUfuncKwargs.test_kwarg_exact": [
        "numpy.int",
        "numpy.add"
    ],
    "numpy.core.tests.test_ufunc.TestUfuncKwargs.test_sig_signature": [
        "numpy.add"
    ],
    "numpy.core.tests.test_ufunc.TestUfuncKwargs.test_sig_dtype": [
        "numpy.int",
        "numpy.add"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_pickle": [
        "numpy.sin",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_pickle_withstring": [
        "numpy.testing.assert_",
        "numpy.cos"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_reduceat_shifting_sum": [
        "numpy.multiply.reduceat",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel",
        "numpy.add.reduceat"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops": [
        "numpy.double",
        "numpy.logical_xor",
        "numpy.testing.assert_",
        "numpy.add",
        "numpy.clongdouble",
        "numpy.exp",
        "numpy.zeros",
        "numpy.ones",
        "numpy.conjugate",
        "numpy.all",
        "numpy.testing.assert_almost_equal",
        "numpy.single",
        "numpy.csingle",
        "numpy.longdouble",
        "numpy.cdouble",
        "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo.conjugate": [
        "numpy.bool_"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_generic_loops.foo.logical_xor": [
        "numpy.bool_"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_signature": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_get_signature": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_forced_sig": [
        "numpy.zeros",
        "numpy.testing.assert_equal",
        "numpy.add",
        "numpy.arange"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_true_divide": [
        "numpy.isfinite",
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.max",
        "numpy.true_divide",
        "numpy.bool_",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ones",
        "numpy.dtype",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_sum_stability": [
        "numpy.ndarray.sum",
        "numpy.float32",
        "numpy.sum",
        "numpy.ones",
        "numpy.ma.sum",
        "numpy.testing.assert_almost_equal",
        "numpy.float64",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_sum": [
        "numpy.int",
        "numpy.isfinite",
        "numpy.float32",
        "numpy.longdouble",
        "numpy.sum",
        "numpy.ones",
        "numpy.arange",
        "numpy.float64",
        "numpy.float16",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_sum_complex": [
        "numpy.testing.assert_almost_equal",
        "numpy.sum",
        "numpy.ones",
        "numpy.clongdouble",
        "numpy.arange",
        "numpy.complex64",
        "numpy.empty",
        "numpy.complex128"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_sum_initial": [
        "numpy.int64",
        "numpy.sum",
        "numpy.ones",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_inner1d": [
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_broadcast": [
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_type_cast": [
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_endian": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.dtype",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_incontiguous_array": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_output_argument": [
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.zeros",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_axes_argument": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.transpose",
        "numpy.ndarray.sum",
        "numpy.int8",
        "numpy.int32",
        "numpy.core.fromnumeric.sum",
        "numpy.array",
        "numpy.transpose",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.sum",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.matmul",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.empty",
        "numpy.zeros",
        "numpy.reshape",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_keepdims_argument": [
        "numpy.zeros_like",
        "numpy.eye",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_innerwt": [
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_innerwt_empty": [
        "numpy.sum",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_matrix_multiply": [
        "numpy.double",
        "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_matrix_multiply_umath_empty": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results": [
        "numpy.core.fromnumeric.swapaxes",
        "numpy.core.fromnumeric.shape",
        "numpy.sum",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.permute_n",
        "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.broadcastable",
        "numpy.matlib.rand",
        "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.slice_n",
        "numpy.random.rand",
        "numpy.ma.core.shape",
        "numpy.swapaxes",
        "numpy.testing.assert_equal",
        "numpy.testing._private.utils.rand"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.permute_n": [
        "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.permute_n"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.slice_n": [
        "numpy.core.tests.test_ufunc.TestUfunc.compare_matrix_multiply_results.slice_n"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_euclidean_pdist": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.shape",
        "numpy.empty",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.tri",
        "numpy.testing.assert_almost_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_object_logical": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.logical_and",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce",
        "numpy.logical_or",
        "numpy.array",
        "numpy.logical_not"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_object_comparison": [
        "numpy.core.tests.test_ufunc.TestUfunc.test_object_comparison.HasComparisons",
        "numpy.equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_object_array_reduction": [
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.sum",
        "numpy.any",
        "numpy.ma.sum",
        "numpy.all",
        "numpy.prod",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_object_array_accumulate_inplace": [
        "numpy.multiply.accumulate",
        "numpy.testing.assert_array_equal",
        "numpy.divide.accumulate",
        "numpy.ones",
        "numpy.subtract.accumulate",
        "numpy.ma.core._MaskedBinaryOperation.accumulate",
        "numpy.add.accumulate",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_object_array_reduceat_inplace": [
        "numpy.multiply.reduceat",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.arange",
        "numpy.add.reduceat",
        "numpy.empty"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_zerosize_reduction": [
        "numpy.sum",
        "numpy.any",
        "numpy.all",
        "numpy.prod",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_axis_out_of_bounds": [
        "numpy.array",
        "numpy.AxisError"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_scalar_reduction": [
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.float32",
        "numpy.ma.core.MaskedArray.view",
        "numpy.logical_xor.reduce",
        "numpy.multiply.reduce",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.prod",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.testing.assert_",
        "numpy.bool_",
        "numpy.any",
        "numpy.core.tests.test_ufunc.TestUfunc.test_scalar_reduction.MyArray",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.minimum.reduce",
        "numpy.sum",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.all",
        "numpy.divide.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_scalar_reduction.MyArray": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_casting_out_param": [
        "numpy.zeros",
        "numpy.float32",
        "numpy.int64",
        "numpy.subtract",
        "numpy.ones",
        "numpy.add",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_where_param": [
        "numpy.testing.assert_equal",
        "numpy.add",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.zeros",
        "numpy.subtract",
        "numpy.power",
        "numpy.ones",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_where_param_buffer_output": [
        "numpy.int64",
        "numpy.ones",
        "numpy.add",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_where_param_alloc": [
        "numpy.sqrt",
        "numpy.int64",
        "numpy.float64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_corder": [
        "numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction",
        "numpy.empty"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_forder": [
        "numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction",
        "numpy.empty"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_otherorder": [
        "numpy.swapaxes",
        "numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction",
        "numpy.core.fromnumeric.swapaxes"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig": [
        "numpy.swapaxes",
        "numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction",
        "numpy.core.fromnumeric.swapaxes"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_noncontig_unaligned": [
        "numpy.core.tests.test_ufunc.TestUfunc.check_identityless_reduction",
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.empty",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_initial_reduction": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_identityless_reduction_nonreorderable": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.ok": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis": [
        "numpy.maximum",
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.add",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.zeros",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.ok",
        "numpy.identity",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t",
        "numpy.matlib.identity",
        "numpy.core.numeric.identity",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce",
        "numpy.add.accumulate",
        "numpy.polynomial._polybase.ABCPolyBase.identity"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_safe_casting": [
        "numpy.int",
        "numpy.testing.assert_array_equal",
        "numpy.add",
        "numpy.core.tests.test_ufunc.TestUfunc.test_safe_casting.add_inplace",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_ufunc_custom_out": [
        "numpy.empty",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_operand_flags": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_struct_ufunc": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_custom_ufunc": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_custom_ufunc_forced_sig": [
        "numpy.int",
        "numpy.multiply"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__getitem__": [
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "numpy.float64"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_inplace_fancy_indexing": [
        "numpy.multiply.at",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.add.at",
        "numpy.negative.at",
        "numpy.reshape",
        "numpy.invert.at",
        "numpy.power.at",
        "numpy.equal.at",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_arguments": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.int",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.ones",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_structured_equal.MyA": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_structured_equal": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.squeeze",
        "numpy.array",
        "numpy.squeeze",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.matrixlib.defmatrix.matrix.squeeze",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_ufunc.TestUfunc.test_structured_equal.MyA",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.core.tests.test_regression.TestRegression.test_squeeze_axis_handling.OldSqueeze.squeeze"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_NotImplemented_not_returned": [
        "numpy.maximum",
        "numpy.bitwise_and",
        "numpy.bitwise_xor",
        "numpy.mod",
        "numpy.logical_xor",
        "numpy.fmax",
        "numpy.logical_and",
        "numpy.fmin",
        "npy_tempita.compat3.b",
        "numpy.true_divide",
        "numpy.add",
        "numpy.divide",
        "numpy.logaddexp",
        "numpy.logaddexp2",
        "numpy.multiply",
        "numpy.floor_divide",
        "numpy.minimum",
        "numpy.subtract",
        "numpy.power",
        "numpy.bitwise_or",
        "numpy.logical_or",
        "numpy.array"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_noncontig_output": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.fmin.reduce",
        "numpy.lib.function_base.copy",
        "numpy.maximum.reduce",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.logical_xor.reduce",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.multiply.reduce",
        "numpy.core.fromnumeric.transpose",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.logical_or.reduce",
        "numpy.transpose",
        "numpy.logical_and.reduce",
        "numpy.ma.copy",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.minimum.reduce",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.fmax.reduce",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_ufunc.TestUfunc.test_no_doc_string": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_getlimits.TestPythonFloat.test_singleton": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_getlimits.TestHalf.test_singleton": [
        "numpy.half",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_getlimits.TestSingle.test_singleton": [
        "numpy.single",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_getlimits.TestDouble.test_singleton": [
        "numpy.double",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_getlimits.TestLongdouble.test_singleton": [
        "numpy.longdouble",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_getlimits.TestFinfo.test_basic": [
        "numpy.float32",
        "numpy.testing.assert_equal",
        "npy_tempita.attr",
        "numpy.float64",
        "numpy.float16",
        "numpy.complex64",
        "numpy.complex128"
    ],
    "numpy.core.tests.test_getlimits.TestIinfo.test_basic": [
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.int64",
        "numpy.testing.assert_equal",
        "numpy.uint8",
        "npy_tempita.attr",
        "numpy.uint32",
        "numpy.uint16",
        "numpy.uint64"
    ],
    "numpy.core.tests.test_getlimits.TestIinfo.test_unsigned_max": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_getlimits.TestRepr.test_iinfo_repr": [
        "numpy.int16",
        "numpy.iinfo",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_getlimits.TestRepr.test_finfo_repr": [
        "numpy.float32",
        "numpy.finfo",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_getlimits.assert_ma_equal": [
        "numpy.core.fromnumeric.shape",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_getlimits.test_known_types": [
        "numpy.core.getlimits._discovered_machar",
        "numpy.float16",
        "numpy.core.tests.test_getlimits.assert_ma_equal",
        "numpy.errstate",
        "numpy.float32",
        "numpy.longdouble",
        "numpy.float64"
    ],
    "numpy.core.tests.test_getlimits.test_plausible_finfo": [
        "numpy.testing.assert_",
        "numpy.finfo"
    ],
    "numpy.core.tests.test_umath_complex.TestCexp": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_umath_complex.TestCexp.test_simple": [
        "numpy.lib.type_check.real",
        "numpy.lib.type_check.imag",
        "numpy.real",
        "numpy.exp",
        "numpy.core.tests.test_umath_complex.check_complex_value",
        "numpy.sin",
        "numpy.cos",
        "numpy.imag"
    ],
    "numpy.core.tests.test_umath_complex.TestCexp.test_special_values": [
        "numpy.core.tests.test_umath_complex.TestCexp.test_special_values._check_ninf_nan",
        "numpy.core.tests.test_umath_complex.TestCexp.test_special_values._check_inf_nan",
        "numpy.core.tests.test_umath_complex.check_complex_value",
        "numpy.core.tests.test_umath_complex.TestCexp.test_special_values._check_inf_inf",
        "numpy.exp",
        "numpy.core.tests.test_umath_complex.TestCexp.test_special_values._check_ninf_inf"
    ],
    "numpy.core.tests.test_umath_complex.TestCexp.test_special_values._check_ninf_inf": [
        "numpy.errstate",
        "numpy.exp",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCexp.test_special_values._check_inf_inf": [
        "numpy.isnan",
        "numpy.errstate",
        "numpy.isinf",
        "numpy.exp",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCexp.test_special_values._check_ninf_nan": [
        "numpy.errstate",
        "numpy.exp",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCexp.test_special_values._check_inf_nan": [
        "numpy.errstate",
        "numpy.isinf",
        "numpy.isnan",
        "numpy.exp",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCexp.test_special_values2": [
        "numpy.exp",
        "numpy.core.tests.test_umath_complex.check_complex_value"
    ],
    "numpy.core.tests.test_umath_complex.TestClog": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_umath_complex.TestClog.test_simple": [
        "numpy.log",
        "numpy.angle",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestClog.test_special_values": [
        "numpy.conj",
        "numpy.log",
        "numpy.ma.append",
        "numpy.array",
        "numpy.append",
        "numpy.errstate",
        "numpy.lib.function_base.append",
        "numpy.testing.assert_almost_equal",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_umath_complex.TestCsqrt": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple": [
        "numpy.sqrt",
        "numpy.core.tests.test_umath_complex.check_complex_value"
    ],
    "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate": [
        "numpy.sqrt",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.conj",
        "numpy.core.tests.test_umath_complex.check_complex_value"
    ],
    "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f": [
        "numpy.conj",
        "numpy.sqrt"
    ],
    "numpy.core.tests.test_umath_complex.TestCsqrt.test_special_values": [
        "numpy.sqrt",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_special_values._check_ninf_nan",
        "numpy.core.tests.test_umath_complex.check_complex_value"
    ],
    "numpy.core.tests.test_umath_complex.TestCsqrt.test_special_values._check_ninf_nan": [
        "numpy.sqrt",
        "numpy.errstate",
        "numpy.isnan",
        "numpy.isinf",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCpow.setup": [
        "numpy.seterr"
    ],
    "numpy.core.tests.test_umath_complex.TestCpow.teardown": [
        "numpy.seterr"
    ],
    "numpy.core.tests.test_umath_complex.TestCpow.test_simple": [
        "numpy.power",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCpow.test_scalar": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCpow.test_array": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCabs.setup": [
        "numpy.seterr"
    ],
    "numpy.core.tests.test_umath_complex.TestCabs.teardown": [
        "numpy.seterr"
    ],
    "numpy.core.tests.test_umath_complex.TestCabs.test_simple": [
        "numpy.sqrt",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCabs.test_fabs": [
        "numpy.testing.assert_array_equal",
        "numpy.real",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan": [
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x",
        "numpy.core.tests.test_umath_complex.check_real_value",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.g",
        "numpy.ma.append",
        "numpy.array",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f": [
        "numpy.conj"
    ],
    "numpy.core.tests.test_umath_complex.TestCarg.test_simple": [
        "numpy.core.tests.test_umath_complex.check_real_value"
    ],
    "numpy.core.tests.test_umath_complex.TestCarg.test_zero": [
        "numpy.core.tests.test_umath_complex.check_real_value"
    ],
    "numpy.core.tests.test_umath_complex.TestCarg.test_special_values": [
        "numpy.core.tests.test_umath_complex.check_real_value"
    ],
    "numpy.core.tests.test_umath_complex.check_real_value": [
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath_complex.check_complex_value": [
        "numpy.errstate",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations._VisibleDeprecationTestCase": [
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestRankDeprecation": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestRankDeprecation.test": [
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.arange"
    ],
    "numpy.core.tests.test_deprecations.TestComparisonDeprecations": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_normal_types": [
        "numpy.zeros",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated",
        "numpy.array"
    ],
    "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_string": [
        "numpy.array"
    ],
    "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures": [
        "numpy.zeros",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_array_richcompare_legacy_weirdness": [
        "numpy.zeros",
        "numpy.int16",
        "numpy.testing.assert_",
        "numpy.asarray",
        "numpy.array"
    ],
    "numpy.core.tests.test_deprecations.TestDatetime64Timezone": [
        "numpy.testing._private.decorators.skipif",
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestDatetime64Timezone.test_string": [
        "numpy.datetime64",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestDatetime64Timezone.test_datetime": [
        "numpy.datetime64",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestNonCContiguousViewDeprecation": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestNonCContiguousViewDeprecation.test_fortran_contiguous": [
        "numpy.ma.masked.view",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated",
        "numpy.ma.core.MaskedArray.view",
        "numpy.int8",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_deprecations.TestInvalidOrderParameterInputForFlattenArrayDeprecation": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestInvalidOrderParameterInputForFlattenArrayDeprecation.test_flatten_array_non_string_arg": [
        "numpy.zeros",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestInvalidOrderParameterInputForFlattenArrayDeprecation.test_flatten_array_invalid_string_arg": [
        "numpy.zeros",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestArrayDataAttributeAssignmentDeprecation": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestArrayDataAttributeAssignmentDeprecation.test_data_attr_assignment": [
        "numpy.linspace",
        "numpy.arange",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestLinspaceInvalidNumParameter": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestLinspaceInvalidNumParameter.test_float_arg": [
        "numpy.linspace",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_positive": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.binary_repr",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestBinaryReprInsufficientWidthParameterForRepresentation.test_insufficient_width_negative": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.binary_repr",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestNumericStyleTypecodes": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestNumericStyleTypecodes.test_all_dtypes": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.setup",
        "numpy.core.tests.test_deprecations.TestTestDeprecated.test_assert_deprecated.foo",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.teardown",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestClassicIntDivision": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestClassicIntDivision.test_int_dtypes": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated",
        "numpy.array"
    ],
    "numpy.core.tests.test_deprecations.TestNonNumericConjugate": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestNonNumericConjugate.test_conjugate": [
        "numpy.int",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated",
        "numpy.array"
    ],
    "numpy.core.tests.test_deprecations.TestNPY_CHAR": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestNPY_CHAR.test_npy_char_deprecation": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.Test_UPDATEIFCOPY": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.Test_UPDATEIFCOPY.test_npy_updateifcopy_deprecation": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_deprecations.TestDatetimeEvent": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestDatetimeEvent.test_3_tuple": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_not_deprecated",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays.test_1d": [
        "numpy.array",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestTruthTestingEmptyArrays.test_2d": [
        "numpy.zeros",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestBincount": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestBincount.test_bincount_minlength": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_deprecations.TestGeneratorSum": [
        "numpy.core.tests.test_deprecations._DeprecationTestCase"
    ],
    "numpy.core.tests.test_deprecations.TestGeneratorSum.test_generator_sum": [
        "numpy.sum",
        "numpy.core.tests.test_deprecations._DeprecationTestCase.assert_deprecated"
    ],
    "numpy.core.tests.test_umath.on_powerpc": [
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith"
    ],
    "numpy.core.tests.test_umath._FilterInvalids.setup": [
        "numpy.seterr"
    ],
    "numpy.core.tests.test_umath._FilterInvalids.teardown": [
        "numpy.seterr"
    ],
    "numpy.core.tests.test_umath.TestOut.test_out_subok": [
        "numpy.int32",
        "numpy.frexp",
        "numpy.testing.assert_",
        "numpy.add",
        "numpy.empty",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestOut.test_out_wrap_subok.ArrayWrap": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestOut.test_out_wrap_subok.ArrayWrap.__new__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.core.tests.test_umath.TestOut.test_out_wrap_subok": [
        "numpy.ndarray",
        "numpy.testing.assert_",
        "numpy.add",
        "numpy.core.tests.test_umath.TestOut.test_out_wrap_subok.ArrayWrap",
        "numpy.empty",
        "numpy.frexp",
        "numpy.int32"
    ],
    "numpy.core.tests.test_umath.TestComparisons.test_ignore_object_identity_in_equal": [
        "numpy.array",
        "numpy.core.tests.test_umath.TestComparisons.test_ignore_object_identity_in_equal.FunkyType",
        "numpy.equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestComparisons.test_ignore_object_identity_in_not_equal": [
        "numpy.not_equal",
        "numpy.core.tests.test_umath.TestComparisons.test_ignore_object_identity_in_not_equal.FunkyType",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestAdd.test_reduce_alignment": [
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.sum",
        "numpy.zeros",
        "numpy.ma.sum",
        "numpy.int32",
        "numpy.float64",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.core.tests.test_umath.TestDivision.test_division_int": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestDivision.test_division_complex": [
        "numpy.testing.assert_almost_equal",
        "numpy.complex128",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestDivision.test_zero_division_complex": [
        "numpy.errstate",
        "numpy.isinf",
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.complex128",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestDivision.test_floor_division_complex": [
        "numpy.floor_divide",
        "numpy.complex128",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.floor_divide_and_remainder": [
        "numpy.floor_divide",
        "numpy.remainder"
    ],
    "numpy.core.tests.test_umath.TestRemainder.test_remainder_basic": [
        "numpy.divmod",
        "numpy.core.tests.test_umath._signs",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.core.tests.test_umath.floor_divide_and_remainder",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestRemainder.test_float_remainder_exact": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_umath.floor_divide_and_remainder",
        "numpy.where",
        "numpy.divmod"
    ],
    "numpy.core.tests.test_umath.TestRemainder.test_float_remainder_roundoff": [
        "numpy.divmod",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.core.tests.test_umath.floor_divide_and_remainder",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestRemainder.test_float_remainder_corner_cases": [
        "numpy.remainder",
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.nextafter",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestCbrt.test_cbrt_scalar": [
        "numpy.testing.assert_almost_equal",
        "numpy.float32",
        "numpy.cbrt"
    ],
    "numpy.core.tests.test_umath.TestCbrt.test_cbrt": [
        "numpy.isnan",
        "numpy.cbrt",
        "numpy.testing.assert_",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_power_float": [
        "numpy.sqrt",
        "numpy.float32",
        "numpy.float64",
        "numpy.exp",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_power_complex": [
        "numpy.errstate",
        "numpy.core.tests.test_umath.TestPower.test_power_complex.assert_complex_equal",
        "numpy.testing.assert_almost_equal",
        "numpy.complex_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_power_complex.assert_complex_equal": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_power_zero": [
        "numpy.errstate",
        "numpy.power",
        "numpy.core.tests.test_umath.TestPower.test_power_zero.assert_complex_equal",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestPower.test_power_zero.assert_complex_equal": [
        "numpy.testing.assert_array_equal",
        "numpy.asarray"
    ],
    "numpy.core.tests.test_umath.TestPower.test_fast_power": [
        "numpy.int16",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.may_share_memory",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_integer_power": [
        "numpy.power",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_integer_power_with_integer_zero_exponent": [
        "numpy.power",
        "numpy.ones_like",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_integer_power_of_1": [
        "numpy.power",
        "numpy.ones_like",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_integer_power_of_zero": [
        "numpy.power",
        "numpy.arange",
        "numpy.zeros_like",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestPower.test_integer_to_negative_power": [
        "numpy.power",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestFloat_power.test_type_conversion": [
        "numpy.core.tests.test_numeric.TestTypes.test_coercion.res_type",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.float_power"
    ],
    "numpy.core.tests.test_umath.TestLog2.test_log2_values": [
        "numpy.array",
        "numpy.testing.assert_almost_equal",
        "numpy.log2",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestLog2.test_log2_ints": [
        "numpy.log2",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestLog2.test_log2_special": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.log2",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestExp2.test_exp2_values": [
        "numpy.exp2",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp2": [
        "numpy.core.tests.test_umath._FilterInvalids"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp2.test_logaddexp2_values": [
        "numpy.logaddexp2",
        "numpy.array",
        "numpy.testing.assert_almost_equal",
        "numpy.log2",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp2.test_logaddexp2_range": [
        "numpy.logaddexp2",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp2.test_inf": [
        "numpy.errstate",
        "numpy.logaddexp2",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp2.test_nan": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.logaddexp2"
    ],
    "numpy.core.tests.test_umath.TestLog.test_log_values": [
        "numpy.log",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestExp.test_exp_values": [
        "numpy.exp",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp": [
        "numpy.core.tests.test_umath._FilterInvalids"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp.test_logaddexp_values": [
        "numpy.log",
        "numpy.logaddexp",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp.test_logaddexp_range": [
        "numpy.logaddexp",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp.test_inf": [
        "numpy.errstate",
        "numpy.logaddexp",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestLogAddExp.test_nan": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.logaddexp"
    ],
    "numpy.core.tests.test_umath.TestLog1p.test_log1p": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestLog1p.test_special": [
        "numpy.errstate",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestExpm1.test_expm1": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestExpm1.test_special": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestHypot.test_simple": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestHypot.test_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.testing.assert_almost_equal",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.assert_hypot_isnan": [
        "numpy.isnan",
        "numpy.errstate",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.assert_hypot_isinf": [
        "numpy.errstate",
        "numpy.isinf",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.TestHypotSpecialValues.test_nan_outputs": [
        "numpy.core.tests.test_umath.assert_hypot_isnan"
    ],
    "numpy.core.tests.test_umath.TestHypotSpecialValues.test_nan_outputs2": [
        "numpy.core.tests.test_umath.assert_hypot_isinf"
    ],
    "numpy.core.tests.test_umath.assert_arctan2_isnan": [
        "numpy.isnan",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.assert_arctan2_ispinf": [
        "numpy.isinf",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.assert_arctan2_isninf": [
        "numpy.isinf",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.assert_arctan2_ispzero": [
        "numpy.signbit",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.assert_arctan2_isnzero": [
        "numpy.signbit",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_one_one": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_nzero": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_pzero": [
        "numpy.core.tests.test_umath.assert_arctan2_ispzero",
        "numpy.core.tests.test_umath.assert_arctan2_isnzero"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_negative": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_zero_positive": [
        "numpy.core.tests.test_umath.assert_arctan2_ispzero",
        "numpy.core.tests.test_umath.assert_arctan2_isnzero"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_positive_zero": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_negative_zero": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_any_ninf": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_any_pinf": [
        "numpy.core.tests.test_umath.assert_arctan2_ispzero",
        "numpy.core.tests.test_umath.assert_arctan2_isnzero"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_any": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_ninf": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_inf_pinf": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestArctan2SpecialValues.test_nan_any": [
        "numpy.core.tests.test_umath.assert_arctan2_isnan"
    ],
    "numpy.core.tests.test_umath.TestLdexp._check_ldexp": [
        "numpy.float32",
        "numpy.longdouble",
        "numpy.float64",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestLdexp.test_ldexp": [
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.core.tests.test_umath.TestLdexp._check_ldexp",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestLdexp.test_ldexp_overflow": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_equal",
        "numpy.errstate",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_umath.TestMaximum": [
        "numpy.core.tests.test_umath._FilterInvalids"
    ],
    "numpy.core.tests.test_umath.TestMaximum.test_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.arange",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestMaximum.test_reduce_complex": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestMaximum.test_float_nans": [
        "numpy.maximum",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestMaximum.test_object_nans": [
        "numpy.maximum",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestMaximum.test_complex_nans": [
        "numpy.maximum",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestMaximum.test_object_array": [
        "numpy.maximum",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestMinimum": [
        "numpy.core.tests.test_umath._FilterInvalids"
    ],
    "numpy.core.tests.test_umath.TestMinimum.test_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.arange",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestMinimum.test_reduce_complex": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestMinimum.test_float_nans": [
        "numpy.minimum",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestMinimum.test_object_nans": [
        "numpy.minimum",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestMinimum.test_complex_nans": [
        "numpy.minimum",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestMinimum.test_object_array": [
        "numpy.minimum",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestFmax": [
        "numpy.core.tests.test_umath._FilterInvalids"
    ],
    "numpy.core.tests.test_umath.TestFmax.test_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.arange",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestFmax.test_reduce_complex": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestFmax.test_float_nans": [
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.fmax"
    ],
    "numpy.core.tests.test_umath.TestFmax.test_complex_nans": [
        "numpy.fmax",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestFmin": [
        "numpy.core.tests.test_umath._FilterInvalids"
    ],
    "numpy.core.tests.test_umath.TestFmin.test_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.arange",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestFmin.test_reduce_complex": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestFmin.test_float_nans": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.fmin"
    ],
    "numpy.core.tests.test_umath.TestFmin.test_complex_nans": [
        "numpy.fmin",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestBool.test_exceptions": [
        "numpy.subtract",
        "numpy.negative",
        "numpy.ones",
        "numpy.bool_",
        "numpy.positive"
    ],
    "numpy.core.tests.test_umath.TestBool.test_truth_table_logical": [
        "numpy.maximum",
        "numpy.lib.user_array.container.astype",
        "numpy.not_equal",
        "numpy.asarray",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.logical_and",
        "numpy.minimum",
        "numpy.logical_xor",
        "numpy.logical_or"
    ],
    "numpy.core.tests.test_umath.TestBool.test_truth_table_bitwise": [
        "numpy.bitwise_and",
        "numpy.bitwise_xor",
        "numpy.bitwise_or",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestBool.test_reduce": [
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.logical_xor.reduce",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.multiply.reduce",
        "numpy.testing.assert_equal",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.array",
        "numpy.logical_or.reduce",
        "numpy.core.fromnumeric.all",
        "numpy.core.fromnumeric.any",
        "numpy.logical_and.reduce",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.minimum.reduce",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.all",
        "numpy.divide.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestBitwiseUFuncs.test_values": [
        "numpy.bitwise_and",
        "numpy.bitwise_xor",
        "numpy.bitwise_or",
        "numpy.bitwise_not",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestBitwiseUFuncs.test_types": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.TestBitwiseUFuncs.test_identity": [
        "numpy.testing.assert_",
        "numpy.identity",
        "numpy.matlib.identity",
        "numpy.core.numeric.identity",
        "numpy.polynomial._polybase.ABCPolyBase.identity"
    ],
    "numpy.core.tests.test_umath.TestBitwiseUFuncs.test_reduction": [
        "numpy.bitwise_and",
        "numpy.bitwise_xor",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.bitwise_or"
    ],
    "numpy.core.tests.test_umath.TestInt.test_logical_not": [
        "numpy.int16",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.logical_not"
    ],
    "numpy.core.tests.test_umath.TestFloatingPoint.test_floating_point": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestDegrees.test_degrees": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestRadians.test_radians": [
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestHeavside.test_heaviside": [
        "numpy.float32",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSign.test_sign": [
        "numpy.zeros",
        "numpy.errstate",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSign.test_sign_dtype_object": [
        "numpy.testing.assert_array_equal",
        "numpy.sign",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestSign.test_sign_dtype_nan_object.test_nan": [
        "numpy.sign",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestSign.test_sign_dtype_nan_object": [
        "numpy.core.tests.test_umath.TestSign.test_sign_dtype_nan_object.test_nan"
    ],
    "numpy.core.tests.test_umath.TestMinMax.test_minmax_blocked": [
        "numpy.isnan",
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestMinMax.test_lower_align": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.ma.core.min",
        "numpy.testing.assert_equal",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.float64",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.getlimits.iinfo.max"
    ],
    "numpy.core.tests.test_umath.TestMinMax.test_reduce_warns": [
        "numpy.diagflat",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestAbsoluteNegative.test_abs_neg_blocked": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_equal",
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.negative",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.arange",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.absolute",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.float64"
    ],
    "numpy.core.tests.test_umath.TestAbsoluteNegative.test_lower_align": [
        "numpy.ones_like",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.negative",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.float64"
    ],
    "numpy.core.tests.test_umath.TestPositive.test_valid": [
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.arange",
        "numpy.positive"
    ],
    "numpy.core.tests.test_umath.TestPositive.test_invalid": [
        "numpy.array",
        "numpy.datetime64",
        "numpy.positive"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.do_test": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.do_test"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable.with_wrap": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable.with_wrap.__new__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable.with_wrap",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A.__new__": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar": [
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap",
        "numpy.zeros",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.B": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.C": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_priority": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.C",
        "numpy.ndarray",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A",
        "numpy.zeros",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.B"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare": [
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.zeros",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare.with_prepare": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare.with_prepare.__array_prepare__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.add",
        "numpy.array",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare.with_prepare"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare_out.with_prepare": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare_out.with_prepare.__array_prepare__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare_out": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.add",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_prepare_out.with_prepare",
        "numpy.shares_memory"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__": [
        "numpy.zeros"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context": [
        "numpy.zeros",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.multiply",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.MyNDArray",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.B",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.tres_mul",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.quatro_mul",
        "numpy.frompyfunc",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.C",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.ASub",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.CSub",
        "numpy.multiply",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.ASub": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.CSub": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.C"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods": [
        "numpy.maximum.outer",
        "numpy.lib.function_base.vectorize.__call__",
        "numpy.fmin.reduce",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A.__call__",
        "numpy.maximum.reduce",
        "numpy.lib._iotools.StringConverter.__call__",
        "numpy.multiply.accumulate",
        "numpy.testing._private.utils.suppress_warnings.__call__",
        "numpy.logical_xor.reduce",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.lib._iotools.LineSplitter.__call__",
        "numpy.multiply.__call__",
        "numpy.multiply.reduce",
        "numpy.add.accumulate",
        "numpy.multiply.outer",
        "numpy.multiply.reduceat",
        "numpy.testing._private.parameterized.parameterized.__call__",
        "numpy.multiply.at",
        "numpy.lib._iotools.NameValidator.__call__",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.__call__",
        "numpy.ma.core._extrema_operation.outer",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.multiply",
        "numpy.testing._private.pytesttester.PytestTester.__call__",
        "numpy.ma.extras._fromnxfunction.__call__",
        "numpy.ma.core._frommethod.__call__",
        "numpy.core.arrayprint.IntegerFormat.__call__",
        "numpy.logical_or.reduce",
        "numpy.core.numeric.outer",
        "numpy.core.arrayprint.BoolFormat.__call__",
        "numpy.outer",
        "numpy.logical_and.reduce",
        "npy_tempita.TemplateDef.__call__",
        "numpy.core._internal.dummy_ctype.__call__",
        "numpy.ma.core._MaskedUnaryOperation.__call__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__call__",
        "numpy.f2py.auxfuncs.throw_error.__call__",
        "numpy.ma.core.outer",
        "numpy.add.outer",
        "numpy.lib.utils._Deprecate.__call__",
        "numpy.polynomial._polybase.ABCPolyBase.__call__",
        "numpy.ma.core._MaskedBinaryOperation.__call__",
        "numpy.add.at",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.negative.at",
        "numpy.power.reduce",
        "numpy.ma.core._MaskedBinaryOperation.outer",
        "numpy.core.arrayprint._TimelikeFormat.__call__",
        "numpy.invert.at",
        "numpy.power.at",
        "numpy.equal.at",
        "numpy.ma.core._MaskedBinaryOperation.accumulate",
        "numpy.minimum.reduce",
        "numpy.ma.core._DomainCheckInterval.__call__",
        "numpy.core.arrayprint.FloatingFormat.__call__",
        "numpy.ma.core._DomainedBinaryOperation.__call__",
        "npy_tempita._Empty.__call__",
        "numpy.core.arrayprint.SubArrayFormat.__call__",
        "numpy.lcm.reduce",
        "numpy._import_tools.PackageLoader.__call__",
        "numpy.ma.core._DomainTan.__call__",
        "numpy.gcd.reduce",
        "numpy.lib.polynomial.poly1d.__call__",
        "numpy.add.reduce",
        "numpy.core.arrayprint.StructuredVoidFormat.__call__",
        "numpy.subtract.reduce",
        "numpy.ma.core._DomainSafeDivide.__call__",
        "numpy.divide.reduce",
        "numpy.ma.core._DomainGreater.__call__",
        "numpy.subtract.accumulate",
        "numpy.fmax.reduce",
        "numpy.divide.accumulate",
        "numpy.ma.core._convert2ma.__call__",
        "numpy.add.reduceat",
        "numpy.ma.core._DomainGreaterEqual.__call__",
        "numpy.minimum.outer"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out": [
        "numpy.modf",
        "numpy.sin",
        "numpy.frexp",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.B",
        "numpy.multiply",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception": [
        "numpy.negative",
        "numpy.divide",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.negative",
        "numpy.add"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_disabled": [
        "numpy.testing.assert_",
        "numpy.negative",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_disabled.GreedyArray",
        "numpy.add",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_disabled.OptOut"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A.__array_ufunc__": [
        "numpy.ndarray",
        "numpy.info",
        "numpy.ma.core.MaskedArray.view",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.masked.view",
        "numpy.ma.append",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.append",
        "numpy.lib.utils.info",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.B.__array_ufunc__": [
        "numpy.core.fromnumeric.any",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any"
    ],
    "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super": [
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.multiply.accumulate",
        "numpy.info",
        "numpy.arange",
        "numpy.ma.core.MaskedArray.view",
        "numpy.logical_xor.reduce",
        "numpy.multiply.reduce",
        "numpy.add.accumulate",
        "numpy.multiply.reduceat",
        "numpy.distutils.misc_util.Configuration.info",
        "numpy.multiply.at",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.add",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.sin",
        "numpy.indices",
        "numpy.array",
        "numpy.logical_or.reduce",
        "numpy.zeros_like",
        "numpy.logical_and.reduce",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.B",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.B.__array_ufunc__",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.add.at",
        "numpy.power.reduce",
        "numpy.negative.at",
        "numpy.invert.at",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.power.at",
        "numpy.equal.at",
        "numpy.ma.core._MaskedBinaryOperation.accumulate",
        "numpy.core.numeric.indices",
        "numpy.minimum.reduce",
        "numpy.lib.utils.info",
        "numpy.lcm.reduce",
        "numpy.modf",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.all",
        "numpy.divide.reduce",
        "numpy.subtract.accumulate",
        "numpy.divide.accumulate",
        "numpy.fmax.reduce",
        "numpy.add.reduceat"
    ],
    "numpy.core.tests.test_umath.TestChoose.test_mixed": [
        "numpy.choose",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_lcm": [
        "numpy.core.tests.test_umath.TestRationalFunctions._test_lcm_inner",
        "numpy.int16",
        "numpy.uint16"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_lcm_object": [
        "numpy.core.tests.test_umath.TestRationalFunctions._test_lcm_inner",
        "numpy.object_"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_gcd": [
        "numpy.uint16",
        "numpy.core.tests.test_umath.TestRationalFunctions._test_lcm_inner",
        "numpy.core.tests.test_umath.TestRationalFunctions._test_gcd_inner",
        "numpy.int16"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_gcd_object": [
        "numpy.core.tests.test_umath.TestRationalFunctions._test_gcd_inner",
        "numpy.object_"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions._test_lcm_inner": [
        "numpy.lib.user_array.container.astype",
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.logical_xor.reduce",
        "numpy.multiply.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.array",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.minimum.reduce",
        "numpy.lcm",
        "numpy.lcm.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions._test_gcd_inner": [
        "numpy.lib.user_array.container.astype",
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.logical_xor.reduce",
        "numpy.multiply.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.array",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.minimum.reduce",
        "numpy.lcm.reduce",
        "numpy.gcd",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_lcm_overflow": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lcm",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.int32",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_gcd_overflow": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_equal",
        "numpy.int64",
        "numpy.gcd",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.int32",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_decimal": [
        "numpy.lcm",
        "numpy.gcd",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_float": [
        "numpy.gcd",
        "numpy.lcm"
    ],
    "numpy.core.tests.test_umath.TestRationalFunctions.test_builtin_long": [
        "numpy.lcm",
        "numpy.gcd",
        "numpy.array",
        "numpy.testing.assert_equal",
        "npy_tempita._looper.loop_pos.item"
    ],
    "numpy.core.tests.test_umath.is_longdouble_finfo_bogus": [
        "numpy.isfinite",
        "numpy.log10",
        "numpy.finfo"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions": [
        "numpy.sqrt",
        "numpy.log10",
        "numpy.arcsin",
        "numpy.tan",
        "numpy.arccos",
        "numpy.arctan",
        "numpy.exp",
        "numpy.sin",
        "numpy.testing._private.decorators.skipif",
        "numpy.log",
        "numpy.cos",
        "numpy.log1p",
        "numpy.exp2",
        "numpy.arcsinh",
        "numpy.core.tests.test_umath.is_longdouble_finfo_bogus",
        "numpy.arctanh",
        "numpy.log2"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.test_it": [
        "numpy.log1p",
        "numpy.testing.assert_almost_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.test_precisions_consistent": [
        "numpy.csingle",
        "numpy.log1p",
        "numpy.cdouble",
        "numpy.clongdouble",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.test_branch_cuts": [
        "numpy.sqrt",
        "numpy.log1p",
        "numpy.log",
        "numpy.log10",
        "numpy.arcsin",
        "numpy.core.tests.test_umath._check_branch_cut",
        "numpy.arcsinh",
        "numpy.arccos",
        "numpy.arctan",
        "numpy.log2",
        "numpy.arctanh"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.test_branch_cuts_complex64": [
        "numpy.sqrt",
        "numpy.log1p",
        "numpy.log",
        "numpy.log10",
        "numpy.arcsin",
        "numpy.core.tests.test_umath._check_branch_cut",
        "numpy.arcsinh",
        "numpy.arccos",
        "numpy.complex64",
        "numpy.arctan",
        "numpy.log2",
        "numpy.arctanh"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.test_against_cmath": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.split",
        "numpy.complex_",
        "numpy.abs",
        "numpy.log1p",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.check_loss_of_precision": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arcsin",
        "numpy.core.tests.test_umath.TestComplexFunctions.check_loss_of_precision.check",
        "numpy.arctan",
        "numpy.absolute",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.logspace",
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.finfo",
        "numpy.all",
        "numpy.arcsinh",
        "numpy.arctanh"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.check_loss_of_precision.check": [
        "numpy.argmax",
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.absolute",
        "numpy.asarray",
        "numpy.real",
        "numpy.lib.type_check.real",
        "numpy.lib.type_check.imag",
        "numpy.abs",
        "numpy.imag",
        "numpy.lib.user_array.container.astype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.arcsinh",
        "numpy.arctanh"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.test_loss_of_precision": [
        "numpy.core.tests.test_umath.TestComplexFunctions.check_loss_of_precision",
        "numpy.complex64",
        "numpy.complex_"
    ],
    "numpy.core.tests.test_umath.TestComplexFunctions.test_loss_of_precision_longcomplex": [
        "numpy.core.tests.test_umath.TestComplexFunctions.check_loss_of_precision"
    ],
    "numpy.core.tests.test_umath.TestAttributes.test_attributes": [
        "numpy.testing.assert_",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.TestAttributes.test_doc": [
        "numpy.testing.assert_",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith"
    ],
    "numpy.core.tests.test_umath.TestSubclass.test_subclass_op.simple": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_umath.TestSubclass.test_subclass_op.simple.__new__": [
        "numpy._globals._NoValueType.__new__",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__",
        "numpy.f2py.tests.test_array_from_pyobj.Type.__new__",
        "numpy.core.getlimits.finfo.__new__",
        "numpy.ma.MaskedArray.__new__",
        "numpy.matrixlib.defmatrix.matrix.__new__",
        "numpy.ndarray.__new__",
        "numpy.testing._private.parameterized.param.__new__",
        "numpy.core.defchararray.chararray.__new__",
        "numpy.core.tests.test_function_base.PhysicalQuantity.__new__",
        "numpy.core.memmap.memmap.__new__"
    ],
    "numpy.core.tests.test_umath.TestSubclass.test_subclass_op": [
        "numpy.core.tests.test_umath.TestSubclass.test_subclass_op.simple",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath._check_branch_cut": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32",
        "numpy.absolute",
        "numpy.lib.type_check.real",
        "numpy.lib.type_check.imag",
        "numpy.real",
        "numpy.testing.assert_",
        "numpy.any",
        "numpy.all",
        "numpy.imag"
    ],
    "numpy.core.tests.test_umath.test_copysign": [
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.signbit",
        "numpy.copysign"
    ],
    "numpy.core.tests.test_umath._test_nextafter": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.nextafter"
    ],
    "numpy.core.tests.test_umath.test_nextafter": [
        "numpy.core.tests.test_umath._test_nextafter",
        "numpy.float64"
    ],
    "numpy.core.tests.test_umath.test_nextafterf": [
        "numpy.core.tests.test_umath._test_nextafter",
        "numpy.float32"
    ],
    "numpy.core.tests.test_umath.test_nextafterl": [
        "numpy.core.tests.test_umath._test_nextafter",
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_umath.test_nextafter_0": [
        "numpy.testing.assert_",
        "numpy.nextafter",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath._test_spacing": [
        "numpy.errstate",
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.spacing"
    ],
    "numpy.core.tests.test_umath.test_spacing": [
        "numpy.core.tests.test_umath._test_spacing",
        "numpy.float64"
    ],
    "numpy.core.tests.test_umath.test_spacingf": [
        "numpy.core.tests.test_umath._test_spacing",
        "numpy.float32"
    ],
    "numpy.core.tests.test_umath.test_spacingl": [
        "numpy.core.tests.test_umath._test_spacing",
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_umath.test_spacing_gfortran": [
        "numpy.float32",
        "numpy.float64",
        "numpy.spacing",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.test_nextafter_vs_spacing": [
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.nextafter",
        "numpy.float64",
        "numpy.spacing"
    ],
    "numpy.core.tests.test_umath.test_pos_nan": [
        "numpy.signbit",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_umath.test_reduceat": [
        "numpy.multiply.reduceat",
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.float32",
        "numpy.int64",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.empty",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.setbufsize",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce",
        "numpy.dtype",
        "numpy.add.reduceat",
        "numpy.array"
    ],
    "numpy.core.tests.test_umath.test_reduceat_empty": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.multiply.reduceat",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ones",
        "numpy.ma.core.shape",
        "numpy.add.reduceat"
    ],
    "numpy.core.tests.test_umath.test_complex_nan_comparisons": [
        "numpy.errstate",
        "numpy.isfinite",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.test_rint_big_int": [
        "numpy.int",
        "numpy.rint",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_umath.test_signaling_nan_exceptions": [
        "numpy.isnan",
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_mem_overlap._indices_for_nelems": [
        "numpy.ma.append",
        "numpy.core.fromnumeric.size",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.sign",
        "numpy.size",
        "numpy.ma.core.append",
        "numpy.ma.core.size"
    ],
    "numpy.core.tests.test_mem_overlap._indices_for_axis": [
        "numpy.core.tests.test_mem_overlap._indices_for_nelems"
    ],
    "numpy.core.tests.test_mem_overlap._indices": [
        "numpy.ma.append",
        "numpy.core.tests.test_mem_overlap._indices_for_axis",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.core.tests.test_mem_overlap._check_assignment": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_mem_overlap.test_overlapping_assignments": [
        "numpy.core.tests.test_mem_overlap._check_assignment",
        "numpy.core.tests.test_mem_overlap._indices"
    ],
    "numpy.core.tests.test_mem_overlap.test_diophantine_fuzz": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ndarray.sum",
        "numpy.ma.core.min",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.random.randint",
        "numpy.intp",
        "numpy.core.fromnumeric.sum",
        "numpy.core.fromnumeric.all",
        "numpy.core.fromnumeric.any",
        "numpy.min",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.MaskedArray.any",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.ma.sum",
        "numpy.any",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.random.RandomState",
        "numpy.sum",
        "numpy.all",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.core.tests.test_mem_overlap.test_diophantine_overflow": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_mem_overlap.check_may_share_memory_exact": [
        "numpy.may_share_memory",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_mem_overlap.test_may_share_memory_manual": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.may_share_memory",
        "numpy.ma.masked.view",
        "numpy.core.fromnumeric.ravel",
        "numpy.int8",
        "numpy.int16",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.tests.test_mem_overlap.check_may_share_memory_exact",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.append",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.zeros",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_mem_overlap.iter_random_view_pairs": [
        "numpy.arange",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.core.fromnumeric.transpose",
        "numpy.random.shuffle",
        "numpy.transpose",
        "numpy.core.fromnumeric.size",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.random.RandomState",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.core.tests.test_mem_overlap.iter_random_view_pairs.random_slice": [
        "numpy.random.randint",
        "numpy.intp"
    ],
    "numpy.core.tests.test_mem_overlap.iter_random_view_pairs.random_slice_fixed_size": [
        "numpy.random.randint"
    ],
    "numpy.core.tests.test_mem_overlap.check_may_share_memory_easy_fuzz": [
        "numpy.core.tests.test_mem_overlap.iter_random_view_pairs",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_equal",
        "numpy.zeros",
        "npy_tempita.compat3.next",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.int16",
        "numpy.core.getlimits.iinfo.min",
        "numpy.may_share_memory"
    ],
    "numpy.core.tests.test_mem_overlap.test_may_share_memory_easy_fuzz": [
        "numpy.core.tests.test_mem_overlap.check_may_share_memory_easy_fuzz"
    ],
    "numpy.core.tests.test_mem_overlap.test_may_share_memory_harder_fuzz": [
        "numpy.core.tests.test_mem_overlap.check_may_share_memory_easy_fuzz"
    ],
    "numpy.core.tests.test_mem_overlap.test_shares_memory_api": [
        "numpy.int8",
        "numpy.zeros",
        "numpy.shares_memory",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_mem_overlap.test_may_share_memory_bad_max_work": [
        "numpy.zeros",
        "numpy.shares_memory",
        "numpy.may_share_memory"
    ],
    "numpy.core.tests.test_mem_overlap.test_internal_overlap_diophantine.check": [
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.ndarray.sum",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.sum",
        "numpy.core.fromnumeric.all",
        "numpy.core.fromnumeric.any",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.MaskedArray.any",
        "numpy.ma.sum",
        "numpy.any",
        "numpy.sum",
        "numpy.all",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.core.tests.test_mem_overlap.test_internal_overlap_diophantine": [
        "numpy.core.tests.test_mem_overlap.test_internal_overlap_diophantine.check"
    ],
    "numpy.core.tests.test_mem_overlap.test_internal_overlap_slices": [
        "numpy.transpose",
        "numpy.ma.core.transpose",
        "numpy.linalg.linalg.transpose",
        "numpy.random.RandomState",
        "numpy.random.shuffle",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.zeros",
        "numpy.int16",
        "numpy.core.fromnumeric.transpose"
    ],
    "numpy.core.tests.test_mem_overlap.test_internal_overlap_slices.random_slice": [
        "numpy.random.randint",
        "numpy.intp"
    ],
    "numpy.core.tests.test_mem_overlap.check_internal_overlap": [
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.sum",
        "numpy.add",
        "numpy.core.defchararray.add",
        "numpy.ma.sum",
        "clapack_scrub.LineQueue.add",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.core.tests.test_mem_overlap.test_internal_overlap_manual": [
        "numpy.lib.user_array.container.astype",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.core.fromnumeric.reshape",
        "numpy.int8",
        "numpy.core.tests.test_mem_overlap.check_internal_overlap",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_mem_overlap.test_internal_overlap_fuzz": [
        "numpy.lib.user_array.container.astype",
        "numpy.ma.core.MaskedArray.min",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.ma.core.min",
        "numpy.int8",
        "numpy.random.randint",
        "numpy.intp",
        "numpy.core.tests.test_mem_overlap.check_internal_overlap",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.random.RandomState"
    ],
    "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs": [
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.shares_memory",
        "numpy.may_share_memory",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray"
    ],
    "numpy.core.tests.test_mem_overlap.view_element_first_byte": [
        "numpy.lib.stride_tricks",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.asarray",
        "numpy.lib.stride_tricks.DummyArray"
    ],
    "numpy.core.tests.test_mem_overlap.assert_copy_equivalent": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.any",
        "numpy.ma.copy",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc": [
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.check_unary_fuzz": [
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.int16",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.copy",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.shape",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.core.tests.test_mem_overlap.iter_random_view_pairs",
        "numpy.shares_memory",
        "numpy.copy",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.core.tests.test_mem_overlap.assert_copy_equivalent",
        "numpy.random.RandomState",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype",
        "numpy.lib.function_base.copy",
        "npy_tempita.compat3.next",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_call_fuzz": [
        "numpy.core.tests.test_mem_overlap.TestUFunc.check_unary_fuzz",
        "numpy.invert",
        "numpy.int16"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_accumulate_fuzz": [
        "numpy.core.tests.test_mem_overlap.TestUFunc.check_unary_fuzz",
        "numpy.int16",
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_accumulate_fuzz.get_out_axis_size",
        "numpy.multiply.accumulate",
        "numpy.divide.accumulate",
        "numpy.add.accumulate",
        "numpy.ma.core._MaskedBinaryOperation.accumulate",
        "numpy.subtract.accumulate"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduce_fuzz": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.core.tests.test_mem_overlap.TestUFunc.check_unary_fuzz",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduce_fuzz.get_out_axis_size",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.int16",
        "numpy.fmax.reduce"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz.do_reduceat": [
        "numpy.multiply.reduceat",
        "numpy.arange",
        "numpy.add.reduceat"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz": [
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz.get_out_axis_size",
        "numpy.core.tests.test_mem_overlap.TestUFunc.check_unary_fuzz",
        "numpy.int16",
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_fuzz.do_reduceat"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_manual.check": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_manual": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_reduceat_manual.check",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.add",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.int16",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_gufunc_fuzz": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.sqrt",
        "numpy.errstate",
        "numpy.shape",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.min",
        "numpy.core.tests.test_mem_overlap.iter_random_view_pairs",
        "numpy.shares_memory",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.min",
        "numpy.ma.core.max",
        "numpy.matlib.rand",
        "numpy.max",
        "numpy.random.rand",
        "numpy.core.tests.test_mem_overlap.assert_copy_equivalent",
        "numpy.int",
        "numpy.random.RandomState",
        "numpy.ma.core.shape",
        "numpy.testing._private.utils.rand",
        "numpy.matrixlib.defmatrix.matrix.max",
        "npy_tempita.compat3.next",
        "numpy.matrixlib.defmatrix.matrix.min"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_ufunc_at_manual.check": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_ufunc_at_manual": [
        "numpy.invert",
        "numpy.int16",
        "numpy.add",
        "numpy.arange",
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_ufunc_at_manual.check"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_1d_manual.check": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.core.MaskedArray.view",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.masked.view",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.bool_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.reciprocal",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_1d_manual": [
        "numpy.errstate",
        "numpy.float32",
        "numpy.int64",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.reciprocal",
        "numpy.complex128",
        "numpy.invert",
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_1d_manual.check",
        "numpy.core.fromnumeric.reshape",
        "numpy.complex64",
        "numpy.issubdtype",
        "numpy.int8",
        "numpy.reshape",
        "numpy.int16",
        "numpy.int32",
        "numpy.float64",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_where_same": [
        "numpy.lib.user_array.container.astype",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.invert",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.bool_",
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_where_same.check",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_unary_ufunc_where_same.check": [
        "numpy.invert",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_1d_manual": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32",
        "numpy.int64",
        "numpy.core.fromnumeric.reshape",
        "numpy.complex64",
        "numpy.add",
        "numpy.complex128",
        "numpy.indices",
        "numpy.int8",
        "numpy.int32",
        "numpy.int16",
        "numpy.float64",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_1d_manual.check",
        "numpy.core.numeric.indices",
        "numpy.ma.core.reshape",
        "numpy.reshape"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_binary_ufunc_1d_manual.check": [
        "numpy.add",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_mem_overlap.TestUFunc.test_inplace_op_simple_manual": [
        "numpy.random.RandomState",
        "numpy.testing.assert_array_equal",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand"
    ],
    "numpy.core.tests.test_datetime.TestDateTime": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_dtype_creation": [
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_casting_rules": [
        "numpy.can_cast",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_compare_generic_nat": [
        "numpy.testing.assert_",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_scalar_construction": [
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.dtype",
        "numpy.datetime64"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_scalar_construction_timezone": [
        "numpy.datetime64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_array_find_type": [
        "numpy.lib.user_array.container.astype",
        "numpy.datetime64",
        "numpy.testing.assert_equal",
        "numpy.bool_",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction": [
        "numpy.testing.assert_equal",
        "numpy.dtype",
        "numpy.timedelta64",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_timedelta_scalar_construction_units": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_nat_casting": [
        "numpy.datetime64",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_days_creation": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_days_to_pydate": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_dtype_comparison": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_pydatetime_creation": [
        "numpy.datetime64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_string_conversion": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.empty_like",
        "numpy.empty",
        "numpy.string_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_array_str": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.array2string",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_timedelta_array_str": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_pickle": [
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_setstate": [
        "numpy.ma.mrecords.MaskedRecords.__reduce__",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.ma.core.MaskedArray.__reduce__",
        "numpy._globals._NoValueType.__reduce__"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_dtype_promotion": [
        "numpy.dtype",
        "numpy.promote_types",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_cast_overflow.cast": [
        "numpy.lib.user_array.container.astype"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_cast_overflow": [
        "numpy.core.tests.test_datetime.TestDateTime.test_cast_overflow.cast",
        "numpy.core.tests.test_datetime.TestDateTime.test_cast_overflow.cast2"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_cast_overflow.cast2": [
        "numpy.lib.user_array.container.astype"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_pyobject_roundtrip": [
        "numpy.lib.user_array.container.astype",
        "numpy.int64",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_month_truncation": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_different_unit_comparison": [
        "numpy.lib.user_array.container.astype",
        "numpy.datetime64",
        "numpy.equal",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.less",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_like": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_unary": [
        "numpy.testing.assert_",
        "numpy.negative",
        "numpy.positive",
        "numpy.timedelta64",
        "numpy.sign",
        "numpy.absolute",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_add": [
        "numpy.add",
        "numpy.dtype",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_subtract": [
        "numpy.subtract",
        "numpy.dtype",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_multiply": [
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.core.tests.test_datetime.TestDateTime.test_datetime_multiply.check",
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.multiply",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_multiply.check": [
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_divide": [
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.true_divide",
        "numpy.divide",
        "numpy.floor_divide",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_compare": [
        "numpy.less",
        "numpy.not_equal",
        "numpy.greater_equal",
        "numpy.array",
        "numpy.greater",
        "numpy.datetime64",
        "numpy.less_equal",
        "numpy.equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_compare_nat": [
        "numpy.less",
        "numpy.not_equal",
        "numpy.greater_equal",
        "numpy.testing.assert_",
        "numpy.testing.assert_equal",
        "numpy.greater",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.equal",
        "numpy.less_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_futurewarning_once_nat": [
        "numpy.less",
        "numpy.greater_equal",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.greater",
        "numpy.equal",
        "numpy.less_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_minmax": [
        "numpy.minimum",
        "numpy.fmin",
        "numpy.maximum",
        "numpy.dtype",
        "numpy.fmax",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_hours": [
        "numpy.ones",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_year": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_month": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_week": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_day": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_hour": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_minute": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_second": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_divisor_conversion_fs": [
        "numpy.dtype",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_string_parser_variants": [
        "numpy.dtype",
        "numpy.datetime64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_string_parser_error_check": [
        "numpy.array",
        "numpy.dtype"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_creation_overflow": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.int64",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_as_string": [
        "numpy.datetime_as_string",
        "numpy.datetime64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_as_string_timezone": [
        "numpy.testing.assert_",
        "numpy.datetime_as_string",
        "numpy.testing.assert_equal",
        "numpy.datetime64"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_arange": [
        "numpy.dtype",
        "numpy.arange",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_arange_no_dtype": [
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_timedelta_arange": [
        "numpy.dtype",
        "numpy.arange",
        "numpy.timedelta64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_timedelta_arange_no_dtype": [
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_maximum_reduce": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.datetime64",
        "numpy.fmin.reduce",
        "numpy.timedelta64",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.testing.assert_equal",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_offset": [
        "numpy.datetime64",
        "numpy.busday_offset",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_busdaycalendar": [
        "numpy.busdaycalendar",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_offset": [
        "numpy.busdaycalendar",
        "numpy.datetime64",
        "numpy.busday_offset",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_busday_holidays_count": [
        "numpy.busdaycalendar",
        "numpy.arange",
        "numpy.busday_offset",
        "numpy.testing.assert_equal",
        "numpy.busday_count"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_is_busday": [
        "numpy.zeros",
        "numpy.is_busday",
        "numpy.busdaycalendar",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_datetime_y2038": [
        "numpy.int64",
        "numpy.datetime64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_isnat": [
        "numpy.isnat",
        "numpy.testing.assert_",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_datetime.TestDateTime.test_isnat_error": [
        "numpy.zeros",
        "numpy.isnat"
    ],
    "numpy.core.tests.test_datetime.TestDateTimeData.test_basic": [
        "numpy.datetime64",
        "numpy.datetime_data",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_nan_inf": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_subclass.sub": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_subclass": [
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_subclass.sub",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass.sub": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass.sub.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass": [
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass.sub",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.sub": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.sub.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.sub",
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter": [
        "numpy.ndarray"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter.__getitem__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter.to_string": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "npy_tempita._looper.loop_pos.item",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter.__str__": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.array2string",
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.DuckCounter.to_string",
        "numpy.ma.core.shape"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_self_containing": [
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_containing_list": [
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_void_scalar_recursion": [
        "numpy.void"
    ],
    "numpy.core.tests.test_arrayprint.TestArrayRepr.test_fieldless_structured": [
        "numpy.testing.assert_equal",
        "numpy.dtype",
        "numpy.empty"
    ],
    "numpy.core.tests.test_arrayprint.TestComplexArray.test_str": [
        "numpy.cdouble",
        "numpy.clongdouble",
        "numpy.complex64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_basic": [
        "numpy.array2string",
        "numpy.arange",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_format_function": [
        "numpy.core.tests.test_arrayprint.TestArray2String.test_format_function._format_function",
        "numpy.testing.assert_",
        "numpy.array2string",
        "numpy.arange",
        "numpy.core.arrayprint.FloatFormat",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_structure_format": [
        "numpy.datetime64",
        "numpy.testing.assert_equal",
        "numpy.array2string",
        "numpy.str_",
        "numpy.zeros",
        "numpy.set_printoptions",
        "numpy.full",
        "numpy.dtype",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_unstructured_void_repr": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_edgeitems_kwarg": [
        "numpy.int",
        "numpy.zeros",
        "numpy.array2string",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_summarize_1d": [
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_summarize_2d": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_linewidth": [
        "numpy.full",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_arrayprint.TestArray2String.test_linewidth.make_str"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_linewidth.make_str": [
        "numpy.array2string"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_wide_element": [
        "numpy.array2string",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestArray2String.test_refcount": [
        "numpy.testing.assert_",
        "numpy.array2string",
        "numpy.arange"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.setup": [
        "numpy.get_printoptions"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.teardown": [
        "numpy.set_printoptions",
        "numpy.get_printoptions"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_basic": [
        "numpy.set_printoptions",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_precision_zero": [
        "numpy.set_printoptions",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_formatter": [
        "numpy.testing.assert_equal",
        "numpy.set_printoptions",
        "numpy.arange"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_formatter_reset": [
        "numpy.testing.assert_equal",
        "numpy.set_printoptions",
        "numpy.arange"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_0d_arrays": [
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.testing.assert_equal",
        "numpy.array2string",
        "numpy.str_",
        "numpy.zeros",
        "numpy.set_printoptions",
        "numpy.array"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_float_spacing": [
        "numpy.set_printoptions",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_bool_spacing": [
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_sign_spacing": [
        "numpy.set_printoptions",
        "numpy.arange",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_float_overflow_nowarn": [
        "numpy.array"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_sign_spacing_structured": [
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_floatmode": [
        "numpy.zeros",
        "numpy.set_printoptions",
        "numpy.arange",
        "numpy.float64",
        "numpy.float16",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_legacy_mode_scalars": [
        "numpy.set_printoptions",
        "numpy.float64",
        "numpy.complex128",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_legacy_stray_comma": [
        "numpy.set_printoptions",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_dtype_linewidth_wrapping": [
        "numpy.set_printoptions",
        "numpy.ones",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_linewidth_repr": [
        "numpy.set_printoptions",
        "numpy.full",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_linewidth_str": [
        "numpy.set_printoptions",
        "numpy.full",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestPrintOptions.test_edgeitems": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.zeros",
        "numpy.set_printoptions",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.core.tests.test_arrayprint.test_unicode_object_array": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr": [
        "numpy.testing.assert_equal",
        "numpy.printoptions",
        "numpy.array"
    ],
    "numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_restores": [
        "numpy.get_printoptions",
        "numpy.printoptions",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_exceptions": [
        "numpy.testing.assert_equal",
        "numpy.printoptions",
        "numpy.get_printoptions"
    ],
    "numpy.core.tests.test_arrayprint.TestContextManager.test_ctx_mgr_as_smth": [
        "numpy.printoptions",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_item_selection.TestTake.test_simple": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.dtype",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.issubdtype",
        "numpy.indices",
        "numpy.intp",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.core.numeric.indices",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.int",
        "numpy.empty",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.core.tests.test_item_selection.TestTake.test_refcounting": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.core.tests.test_item_selection.TestTake.test_unicode_mode": [
        "numpy.core.defchararray.decode",
        "numpy.core.defchararray.chararray.decode",
        "numpy.arange"
    ],
    "numpy.core.tests.test_item_selection.TestTake.test_empty_partition": [
        "numpy.int16",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.core.tests.test_item_selection.TestTake.test_empty_argpartition": [
        "numpy.testing.assert_array_equal",
        "numpy.int16",
        "numpy.array"
    ],
    "numpy.core.tests.test_scalarprint.TestRealScalars.test_str": [
        "numpy.float16",
        "numpy.testing.assert_equal",
        "numpy.float32",
        "numpy.longdouble",
        "numpy.float64"
    ],
    "numpy.core.tests.test_scalarprint.TestRealScalars.test_scalar_cutoffs.check": [
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarprint.TestRealScalars.test_scalar_cutoffs": [
        "numpy.core.tests.test_scalarprint.TestRealScalars.test_scalar_cutoffs.check"
    ],
    "numpy.core.tests.test_scalarprint.TestRealScalars.test_py2_float_print": [
        "numpy.double",
        "numpy.testing.assert_equal",
        "numpy.sqrt",
        "numpy.core.defchararray.strip",
        "numpy.core.tests.test_scalarprint.TestRealScalars.test_py2_float_print.userinput",
        "numpy.core.defchararray.chararray.strip",
        "numpy"
    ],
    "numpy.core.tests.test_scalarprint.TestRealScalars.test_dragon4": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.core.tests.test_scalarprint.TestRealScalars.test_dragon4_interface": [
        "numpy.float32",
        "numpy.testing.assert_equal",
        "numpy.float64",
        "numpy.float16",
        "numpy"
    ],
    "numpy.core.tests.test_scalarprint.TestRealScalars.float32_roundtrip": [
        "numpy.testing.assert_equal",
        "numpy.float32",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_scalarprint.TestRealScalars.float64_vs_python": [
        "numpy.float64",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_match_array": [
        "numpy.dtype",
        "numpy.clongdouble",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_dim": [
        "numpy.core.fromnumeric.shape",
        "numpy.clongdouble",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_scalar_known_code": [
        "numpy.clongdouble",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_scalarbuffer.TestScalarPEP3118.test_void_scalar_structured_data": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.void",
        "numpy.ndarray",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.float64",
        "numpy.unicode_",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.core.tests.test_longdouble.test_scalar_extraction": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.test_repr_roundtrip": [
        "numpy.testing.assert_equal",
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_longdouble.test_unicode": [
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_longdouble.test_string": [
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_longdouble.test_bytes": [
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_longdouble.test_repr_roundtrip_bytes": [
        "numpy.longdouble",
        "numpy.core.defchararray.chararray.encode",
        "numpy.core.defchararray.encode",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.test_bogus_string": [
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_longdouble.test_fromstring": [
        "numpy.longdouble",
        "numpy.fromstring",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.test_fromstring_bogus": [
        "numpy.fromstring",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.test_fromstring_empty": [
        "numpy.array",
        "numpy.fromstring",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.test_fromstring_missing": [
        "numpy.array",
        "numpy.fromstring",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.TestFileBased": [
        "numpy.testing._private.decorators.skipif",
        "numpy.longdouble",
        "numpy.array"
    ],
    "numpy.core.tests.test_longdouble.TestFileBased.test_fromfile_bogus": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_equal",
        "numpy.fromfile",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.array"
    ],
    "numpy.core.tests.test_longdouble.TestFileBased.test_fromfile": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_equal",
        "numpy.fromfile",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.longdouble",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.array"
    ],
    "numpy.core.tests.test_longdouble.TestFileBased.test_genfromtxt": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_equal",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.longdouble",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.array"
    ],
    "numpy.core.tests.test_longdouble.TestFileBased.test_loadtxt": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.loadtxt",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.longdouble",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.array"
    ],
    "numpy.core.tests.test_longdouble.TestFileBased.test_tofile_roundtrip": [
        "numpy.longdouble",
        "numpy.fromfile",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.test_repr_exact": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_longdouble.test_format": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_longdouble.test_percent": [
        "numpy.testing.assert_"
    ],
    "numpy.core.tests.test_longdouble.test_array_repr": [
        "numpy.longdouble",
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale": [
        "numpy.core.tests._locales.CommaDecimalPointLocale"
    ],
    "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_repr_roundtrip_foreign": [
        "numpy.testing.assert_equal",
        "numpy.longdouble"
    ],
    "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_repr": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.testing.assert_equal",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.fromstring",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f"
    ],
    "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort_float": [
        "numpy.fromstring",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_best_effort": [
        "numpy.array",
        "numpy.longdouble",
        "numpy.fromstring",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign": [
        "numpy.longdouble",
        "numpy.fromstring",
        "numpy.testing.assert_equal"
    ],
    "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_sep": [
        "numpy.fromstring",
        "numpy.longdouble",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.core.tests.test_longdouble.TestCommaDecimalPointLocale.test_fromstring_foreign_value": [
        "numpy.longdouble",
        "numpy.fromstring",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.random.__RandomState_ctor": [
        "numpy.random.RandomState"
    ],
    "numpy.random.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_files",
        "numpy.distutils.misc_util.Configuration.add_extension",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.libs",
        "numpy.random.setup.needs_mingw_ftime_workaround",
        "numpy.random.setup.configuration.generate_libraries",
        "numpy.ma.append",
        "numpy.append",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.distutils.misc_util"
    ],
    "numpy.random.setup.configuration.generate_libraries": [
        "numpy.distutils.misc_util.get_mathlibs",
        "numpy.distutils.misc_util.Configuration.get_config_cmd"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_VonMises_range": [
        "numpy.random.vonmises",
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.all"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_hypergeometric_range": [
        "numpy.random.hypergeometric",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.append",
        "numpy.testing.assert_",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.all",
        "numpy.ma.core.append"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_logseries_convergence": [
        "numpy.testing.assert_",
        "numpy.sum",
        "numpy.random.seed",
        "numpy.random.logseries"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_permutation_longs": [
        "numpy.testing.assert_array_equal",
        "numpy.random.permutation",
        "numpy.random.seed"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_shuffle_mixed_dimension": [
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.t",
        "numpy.random.shuffle",
        "numpy.random.seed"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_call_within_randomstate": [
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.random.RandomState",
        "numpy.random.choice",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_multivariate_normal_size_types": [
        "numpy.random.multivariate_normal",
        "numpy.int_",
        "numpy.int64"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_beta_small_parameters": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.any",
        "numpy.random.beta",
        "numpy.random.seed"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_choice_sum_of_probs_tolerance": [
        "numpy.ndarray.sum",
        "numpy.float16",
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.sum",
        "numpy.ma.sum",
        "numpy.random.seed",
        "numpy.float64",
        "numpy.random.choice",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum",
        "numpy.array"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_shuffle_of_array_of_different_length_strings": [
        "numpy.array",
        "numpy.random.shuffle",
        "numpy.random.seed"
    ],
    "numpy.random.tests.test_regression.TestRegression.test_shuffle_of_array_of_objects": [
        "numpy.random.seed",
        "numpy.arange",
        "numpy.random.shuffle",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestSeed.test_scalar": [
        "numpy.random.randint",
        "numpy.random.RandomState",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestSeed.test_array": [
        "numpy.arange",
        "numpy.random.randint",
        "numpy.random.RandomState",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestSeed.test_invalid_scalar": [
        "numpy.random.RandomState"
    ],
    "numpy.random.tests.test_random.TestSeed.test_invalid_array": [
        "numpy.random.RandomState"
    ],
    "numpy.random.tests.test_random.TestSeed.test_invalid_array_shape": [
        "numpy.int64",
        "numpy.array",
        "numpy.random.RandomState"
    ],
    "numpy.random.tests.test_random.TestBinomial.test_n_zero": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.random.binomial"
    ],
    "numpy.random.tests.test_random.TestBinomial.test_p_is_nan": [
        "numpy.random.binomial"
    ],
    "numpy.random.tests.test_random.TestMultinomial.test_basic": [
        "numpy.random.multinomial"
    ],
    "numpy.random.tests.test_random.TestMultinomial.test_zero_probability": [
        "numpy.random.multinomial"
    ],
    "numpy.random.tests.test_random.TestMultinomial.test_int_negative_interval": [
        "numpy.random.randint",
        "numpy.all",
        "numpy.testing.assert_"
    ],
    "numpy.random.tests.test_random.TestMultinomial.test_size": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.random.multinomial",
        "numpy.core.fromnumeric.shape",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.ma.core.shape"
    ],
    "numpy.random.tests.test_random.TestSetState.setup": [
        "numpy.random.RandomState",
        "numpy.random.seed"
    ],
    "numpy.random.tests.test_random.TestSetState.test_basic": [
        "numpy.testing.assert_",
        "numpy.all"
    ],
    "numpy.random.tests.test_random.TestSetState.test_gaussian_reset": [
        "numpy.testing.assert_",
        "numpy.all"
    ],
    "numpy.random.tests.test_random.TestSetState.test_gaussian_reset_in_media_res": [
        "numpy.testing.assert_",
        "numpy.all"
    ],
    "numpy.random.tests.test_random.TestSetState.test_backwards_compatibility": [
        "numpy.testing.assert_",
        "numpy.all"
    ],
    "numpy.random.tests.test_random.TestRandint": [
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.int64",
        "numpy.uint8",
        "numpy.bool_",
        "numpy.random.randint",
        "numpy.uint32",
        "numpy.uint16",
        "numpy.uint64"
    ],
    "numpy.random.tests.test_random.TestRandint.test_unsupported_type": [
        "numpy.random.randint"
    ],
    "numpy.random.tests.test_random.TestRandint.test_bounds_checking": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.bool_",
        "numpy.uint64",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.random.randint"
    ],
    "numpy.random.tests.test_random.TestRandint.test_rng_zero_and_extremes": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.max",
        "numpy.bool_",
        "numpy.uint64",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.random.randint"
    ],
    "numpy.random.tests.test_random.TestRandint.test_full_range": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.bool_",
        "numpy.uint64",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.random.randint"
    ],
    "numpy.random.tests.test_random.TestRandint.test_in_bounds_fuzz": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.max",
        "numpy.bool_",
        "numpy.uint64",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.random.seed",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.random.randint"
    ],
    "numpy.random.tests.test_random.TestRandint.test_repeatability": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.random.seed",
        "numpy.int8",
        "numpy.random.randint",
        "numpy.testing.assert_",
        "numpy.uint64",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.lib.user_array.container.byteswap"
    ],
    "numpy.random.tests.test_random.TestRandint.test_int64_uint64_corner_case": [
        "numpy.testing.assert_equal",
        "numpy.int64",
        "numpy.ma.core.MaskedArray.max",
        "numpy.uint64",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.random.randint"
    ],
    "numpy.random.tests.test_random.TestRandint.test_respect_dtype_singleton": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.dtype",
        "numpy.ma.core.min",
        "numpy.testing.assert_equal",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.random.randint",
        "numpy.min",
        "numpy.testing.assert_",
        "numpy.bool_",
        "numpy.uint64",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.int"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_rand": [
        "numpy.matlib.rand",
        "numpy.random.rand",
        "numpy.testing._private.utils.rand",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_randn": [
        "numpy.matlib.randn",
        "numpy.random.randn",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_randint": [
        "numpy.testing.assert_array_equal",
        "numpy.random.randint",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_random_integers": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.random.seed",
        "numpy.array",
        "numpy.random.random_integers"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_random_integers_max_int": [
        "numpy.testing.assert_equal",
        "numpy.random.random_integers",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_random_integers_deprecated": [
        "numpy.random.random_integers",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_random_sample": [
        "numpy.random.random_sample",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_replace": [
        "numpy.testing.assert_array_equal",
        "numpy.random.choice",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_replace": [
        "numpy.testing.assert_array_equal",
        "numpy.random.choice",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_choice_uniform_noreplace": [
        "numpy.testing.assert_array_equal",
        "numpy.random.choice",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_choice_nonuniform_noreplace": [
        "numpy.testing.assert_array_equal",
        "numpy.random.choice",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_choice_noninteger": [
        "numpy.testing.assert_array_equal",
        "numpy.random.choice",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_choice_exceptions": [
        "numpy.random.choice"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_choice_return_shape": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "npy_tempita._looper.loop_pos.item",
        "numpy.shape",
        "numpy.random.choice",
        "numpy.array",
        "numpy.empty",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.isscalar",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ndim",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_bytes": [
        "numpy.random.bytes",
        "numpy.random.seed",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_shuffle": [
        "numpy.testing.assert_array_equal",
        "numpy.distutils.from_template.conv",
        "numpy.random.shuffle",
        "numpy.random.seed"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_shuffle_masked": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.masked_values",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.random.shuffle",
        "numpy.testing.assert_equal",
        "numpy.ma.copy",
        "numpy.ma.core.masked_values",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_beta": [
        "numpy.random.beta",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_binomial": [
        "numpy.testing.assert_array_equal",
        "numpy.random.seed",
        "numpy.array",
        "numpy.random.binomial"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_chisquare": [
        "numpy.random.chisquare",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_dirichlet": [
        "numpy.random.mtrand.dirichlet",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_dirichlet_size": [
        "numpy.random.mtrand.dirichlet",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_dirichlet_bad_alpha": [
        "numpy.array",
        "numpy.random.mtrand.dirichlet"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_exponential": [
        "numpy.random.seed",
        "numpy.random.exponential",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_exponential_0": [
        "numpy.random.exponential",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_f": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.random.seed",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_gamma": [
        "numpy.random.gamma",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_gamma_0": [
        "numpy.random.gamma",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_geometric": [
        "numpy.random.geometric",
        "numpy.testing.assert_array_equal",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_gumbel": [
        "numpy.random.gumbel",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_gumbel_0": [
        "numpy.random.gumbel",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_hypergeometric": [
        "numpy.random.hypergeometric",
        "numpy.testing.assert_array_equal",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_laplace": [
        "benchmarks.bench_app.LaplaceInplace.setup.laplace",
        "numpy.random.laplace",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_laplace_0": [
        "benchmarks.bench_app.LaplaceInplace.setup.laplace",
        "numpy.random.laplace",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_logistic": [
        "numpy.random.logistic",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_lognormal": [
        "numpy.random.seed",
        "numpy.random.lognormal",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_lognormal_0": [
        "numpy.random.lognormal",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_logseries": [
        "numpy.testing.assert_array_equal",
        "numpy.random.logseries",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_multinomial": [
        "numpy.testing.assert_array_equal",
        "numpy.random.multinomial",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_multivariate_normal": [
        "numpy.lib.function_base.cov",
        "numpy.random.multivariate_normal",
        "numpy.random.seed",
        "numpy.ma.mean",
        "numpy.array",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.core.fromnumeric.size",
        "numpy.cov",
        "numpy.core.fromnumeric.mean",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.size",
        "numpy.mean",
        "numpy.ma.extras.cov",
        "numpy.ma.core.size"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_negative_binomial": [
        "numpy.random.negative_binomial",
        "numpy.testing.assert_array_equal",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_noncentral_chisquare": [
        "numpy.random.noncentral_chisquare",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_noncentral_f": [
        "numpy.random.noncentral_f",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_normal": [
        "numpy.random.seed",
        "numpy.array",
        "numpy.random.normal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_normal_0": [
        "numpy.testing.assert_equal",
        "numpy.random.normal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_pareto": [
        "numpy.random.pareto",
        "numpy.testing._private.utils.assert_array_almost_equal_nulp",
        "numpy.testing.assert_array_almost_equal_nulp",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_poisson": [
        "numpy.testing.assert_array_equal",
        "numpy.random.poisson",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_poisson_exceptions": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.random.poisson",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_power": [
        "numpy.power",
        "numpy.ma.core.power",
        "numpy.lib.scimath.power",
        "numpy.random.power",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_rayleigh": [
        "numpy.random.rayleigh",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_rayleigh_0": [
        "numpy.random.rayleigh",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_standard_cauchy": [
        "numpy.random.standard_cauchy",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_standard_exponential": [
        "numpy.random.seed",
        "numpy.random.standard_exponential",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_standard_gamma": [
        "numpy.random.standard_gamma",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_standard_gamma_0": [
        "numpy.random.standard_gamma",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_standard_normal": [
        "numpy.random.seed",
        "numpy.array",
        "numpy.random.standard_normal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_standard_t": [
        "numpy.random.standard_t",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_triangular": [
        "numpy.random.seed",
        "numpy.random.triangular",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_uniform": [
        "numpy.random.uniform",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_uniform_range_bounds": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.random.uniform",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.nextafter"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation.ThrowingFloat": [
        "numpy.ndarray"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation": [
        "numpy.random.hypergeometric",
        "numpy.ma.masked.view",
        "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation.ThrowingFloat",
        "numpy.ma.core.MaskedArray.view",
        "numpy.random.uniform",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation.ThrowingInteger"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_scalar_exception_propagation.ThrowingInteger": [
        "numpy.ndarray"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_vonmises": [
        "numpy.random.vonmises",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_vonmises_small": [
        "numpy.core.fromnumeric.all",
        "numpy.random.vonmises",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.testing._private.utils.assert_",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.random.seed"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_wald": [
        "numpy.random.seed",
        "numpy.array",
        "numpy.random.wald"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_weibull": [
        "numpy.random.weibull",
        "numpy.random.seed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_weibull_0": [
        "numpy.random.weibull",
        "numpy.testing.assert_equal"
    ],
    "numpy.random.tests.test_random.TestRandomDist.test_zipf": [
        "numpy.testing.assert_array_equal",
        "numpy.random.seed",
        "numpy.random.zipf",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.setSeed": [
        "numpy.random.seed"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_uniform": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.uniform",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_normal": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array",
        "numpy.random.normal"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_beta": [
        "npy_tempita.compat3.b",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.beta",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_exponential": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.exponential",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_standard_gamma": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.random.standard_gamma",
        "numpy.ma.core.shape"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_gamma": [
        "numpy.random.gamma",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_f": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_noncentral_f": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.noncentral_f",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_noncentral_f_small_df": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.noncentral_f",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_chisquare": [
        "numpy.random.chisquare",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_noncentral_chisquare": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.noncentral_chisquare",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_standard_t": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.standard_t",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_vonmises": [
        "numpy.random.vonmises",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_pareto": [
        "numpy.random.pareto",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_weibull": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array",
        "numpy.random.weibull"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_power": [
        "numpy.power",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.ma.core.power",
        "numpy.lib.scimath.power",
        "numpy.random.power",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_laplace": [
        "benchmarks.bench_app.LaplaceInplace.setup.laplace",
        "numpy.random.laplace",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_gumbel": [
        "numpy.random.gumbel",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_logistic": [
        "numpy.random.logistic",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_lognormal": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.mean",
        "numpy.random.lognormal",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.core.fromnumeric.mean",
        "numpy.ma.mean",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_rayleigh": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.rayleigh",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_wald": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.random.wald",
        "numpy.mean",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.core.fromnumeric.mean",
        "numpy.ma.mean",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_triangular": [
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.triangular",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_binomial": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.random.binomial"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_negative_binomial": [
        "numpy.random.negative_binomial",
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_poisson": [
        "numpy.testing.assert_array_equal",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.poisson",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_zipf": [
        "numpy.errstate",
        "numpy.testing.assert_array_equal",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.zipf",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_geometric": [
        "numpy.random.geometric",
        "numpy.testing.assert_array_equal",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_hypergeometric": [
        "numpy.random.hypergeometric",
        "numpy.testing.assert_array_equal",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestBroadcast.test_logseries": [
        "numpy.testing.assert_array_equal",
        "numpy.random.tests.test_random.TestBroadcast.setSeed",
        "numpy.random.logseries",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestThread.check_function": [
        "numpy.random.RandomState",
        "numpy.testing.assert_array_equal",
        "numpy.empty"
    ],
    "numpy.random.tests.test_random.TestThread.test_normal": [
        "numpy.random.tests.test_random.TestThread.test_normal.gen_random",
        "numpy.random.tests.test_random.TestThread.check_function"
    ],
    "numpy.random.tests.test_random.TestThread.test_exp.gen_random": [
        "numpy.ones"
    ],
    "numpy.random.tests.test_random.TestThread.test_exp": [
        "numpy.random.tests.test_random.TestThread.check_function",
        "numpy.random.tests.test_random.TestThread.test_exp.gen_random"
    ],
    "numpy.random.tests.test_random.TestThread.test_multinomial": [
        "numpy.random.tests.test_random.TestThread.test_multinomial.gen_random",
        "numpy.random.tests.test_random.TestThread.check_function"
    ],
    "numpy.random.tests.test_random.TestSingleEltArrayInput.setup": [
        "numpy.array"
    ],
    "numpy.random.tests.test_random.TestSingleEltArrayInput.test_one_arg_funcs": [
        "numpy.random.logseries",
        "numpy.random.chisquare",
        "numpy.random.weibull",
        "numpy.random.exponential",
        "numpy.random.zipf",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.random.geometric",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.power",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.power",
        "numpy.lib.scimath.power",
        "numpy.random.pareto",
        "numpy.random.poisson",
        "numpy.random.rayleigh",
        "numpy.random.power",
        "numpy.random.standard_gamma",
        "numpy.random.standard_t",
        "numpy.ma.core.shape"
    ],
    "numpy.random.tests.test_random.TestSingleEltArrayInput.test_two_arg_funcs": [
        "numpy.polynomial.tests.test_chebyshev.TestFitting.test_chebfit.f",
        "numpy.polynomial.tests.test_laguerre.TestFitting.test_lagfit.f",
        "numpy.random.wald",
        "numpy.polynomial.tests.test_hermite_e.TestFitting.test_hermefit.f",
        "numpy.random.vonmises",
        "numpy.polynomial.tests.test_classes.test_fit.f",
        "numpy.polynomial.tests.test_chebyshev.TestInterpolate.f",
        "numpy.polynomial.tests.test_legendre.TestFitting.test_legfit.f",
        "numpy.random.uniform",
        "numpy.random.beta",
        "numpy.core.tests.test_umath_complex.TestCsqrt.test_simple_conjugate.f",
        "numpy.random.gamma",
        "numpy.testing.tests.test_utils.TestWarns.test_warn.f",
        "numpy.polynomial.tests.test_polynomial.TestMisc.test_polyfit.f",
        "numpy.random.normal",
        "numpy.random.f",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.tests.test_regression.TestRegression.test_frompyfunc_nout_0.f",
        "numpy.testing.tests.test_utils.TestWarns.test_warn_wrong_warning.f",
        "numpy.random.gumbel",
        "numpy.shape",
        "numpy.core.tests.test_umath_complex.TestCabs.test_cabs_inf_nan.f",
        "numpy.testing.assert_equal",
        "benchmarks.bench_app.LaplaceInplace.setup.laplace",
        "numpy.random.laplace",
        "numpy.random.binomial",
        "numpy.random.logistic",
        "numpy.core.tests.test_indexing.TestIndexing.test_boolean_assignment_value_mismatch.f",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.random.lognormal",
        "numpy.random.negative_binomial",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.random.noncentral_chisquare",
        "numpy.polynomial.tests.test_hermite.TestFitting.test_hermfit.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.polynomial.tests.test_classes.TestInterpolate.f",
        "numpy.ma.core.shape"
    ],
    "numpy.random.tests.test_random.TestSingleEltArrayInput.test_three_arg_funcs": [
        "numpy.random.hypergeometric",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.random.noncentral_f",
        "numpy.random.triangular",
        "numpy.ma.core.shape"
    ],
    "numpy.lib._iotools._to_filehandle": [
        "numpy.lib._iotools._is_string_like"
    ],
    "numpy.lib._iotools.flatten_dtype": [
        "numpy.lib._iotools.flatten_dtype",
        "numpy.prod"
    ],
    "numpy.lib._iotools.LineSplitter.__init__": [
        "numpy.lib._iotools.LineSplitter._variablewidth_splitter",
        "numpy.cumsum",
        "numpy.lib._iotools.LineSplitter.autostrip",
        "numpy.lib._iotools.LineSplitter._fixedwidth_splitter",
        "numpy.lib._iotools.LineSplitter._delimited_splitter"
    ],
    "numpy.lib._iotools.LineSplitter.__call__": [
        "numpy.lib._iotools._decode_line",
        "numpy.lib._iotools.LineSplitter._delimited_splitter"
    ],
    "numpy.lib._iotools.NameValidator.__init__": [
        "numpy.ma.add",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.f2py.func2subr.createsubrwrapper.add",
        "numpy.add",
        "numpy.core.defchararray.add",
        "clapack_scrub.LineQueue.add"
    ],
    "numpy.lib._iotools.NameValidator.validate": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.core.defchararray.strip",
        "numpy.f2py.auxfuncs.replace",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.ma.core.append"
    ],
    "numpy.lib._iotools.NameValidator.__call__": [
        "numpy.lib._iotools.NameValidator.validate"
    ],
    "numpy.lib._iotools.ConverterLockError": [
        "numpy.lib._iotools.ConverterError"
    ],
    "numpy.lib._iotools.StringConverter": [
        "numpy.lib._iotools.str2bool"
    ],
    "numpy.lib._iotools.StringConverter._getdtype": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.lib._iotools.StringConverter._dtypeortype": [
        "numpy.datetime64"
    ],
    "numpy.lib._iotools.StringConverter.upgrade_mapper": [
        "numpy.lib._iotools.StringConverter._getsubdtype",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib._iotools.StringConverter.__init__": [
        "numpy.lib._iotools.StringConverter._strict_call",
        "numpy.int64",
        "numpy.uint64",
        "numpy.lib._iotools.StringConverter._getdtype",
        "numpy.issubdtype",
        "numpy.lib._iotools.StringConverter._dtypeortype",
        "numpy.dtype",
        "numpy.lib._iotools.str2bool"
    ],
    "numpy.lib._iotools.StringConverter._loose_call": [
        "numpy.int64"
    ],
    "numpy.lib._iotools.StringConverter._strict_call": [
        "numpy.lib._iotools.StringConverter._dtypeortype",
        "numpy.int64",
        "numpy.array"
    ],
    "numpy.lib._iotools.StringConverter.__call__": [
        "numpy.lib._iotools.StringConverter._strict_call"
    ],
    "numpy.lib._iotools.StringConverter.upgrade": [
        "numpy.lib._iotools.StringConverter.upgrade",
        "numpy.lib._iotools.ConverterError",
        "numpy.lib._iotools.ConverterLockError",
        "numpy.lib._iotools.StringConverter._strict_call"
    ],
    "numpy.lib._iotools.StringConverter.iterupgrade": [
        "numpy.lib._iotools.ConverterError",
        "numpy.lib._iotools.ConverterLockError",
        "numpy.lib._iotools.StringConverter.iterupgrade",
        "numpy.lib._iotools.StringConverter._strict_call"
    ],
    "numpy.lib._iotools.StringConverter.update": [
        "numpy.core.fromnumeric.all",
        "numpy.iterable",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.lib._iotools.StringConverter._getdtype",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.lib._iotools.StringConverter._dtypeortype"
    ],
    "numpy.lib._iotools.easy_dtype": [
        "numpy.lib._iotools.NameValidator",
        "numpy.dtype",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split"
    ],
    "numpy.lib.arraysetops.ediff1d": [
        "numpy.lib.user_array.container.__array_wrap__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.__array_wrap__",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.memmap.memmap.__array_wrap__",
        "numpy.subtract",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array_wrap__",
        "numpy.ravel",
        "numpy.dtype",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_with_iterable.with_wrap.__array_wrap__",
        "numpy.ma.core.max",
        "numpy.core.fromnumeric.ravel",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array_wrap__",
        "numpy.max",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array_wrap__",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array_wrap__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array_wrap__",
        "numpy.core.getlimits.iinfo.max",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__array_wrap__",
        "numpy.empty",
        "numpy.core.tests.test_umath.TestOut.test_out_wrap_subok.ArrayWrap.__array_wrap__",
        "numpy.ma.core.MaskedArray.__array_wrap__"
    ],
    "numpy.lib.arraysetops.unique": [
        "numpy.lib.arraysetops._unique1d",
        "numpy.lib.arraysetops.unique.reshape_uniq",
        "numpy.AxisError",
        "numpy.asanyarray",
        "numpy.ascontiguousarray",
        "numpy.swapaxes",
        "numpy.lib.arraysetops._unpack_tuple"
    ],
    "numpy.lib.arraysetops.unique.reshape_uniq": [
        "numpy.swapaxes"
    ],
    "numpy.lib.arraysetops._unique1d": [
        "numpy.diff",
        "numpy.ma.core.MaskedArray.sort",
        "numpy.matrixlib.defmatrix.matrix.flatten",
        "numpy.core.fromnumeric.sort",
        "numpy.ma.core.argsort",
        "numpy.core.fromnumeric.argsort",
        "numpy.ma.core.sort",
        "numpy.sort",
        "numpy.bool_",
        "numpy.empty",
        "numpy.nonzero",
        "numpy.argsort",
        "numpy.ma.core.MaskedArray.argsort",
        "numpy.core.defchararray.chararray.argsort",
        "numpy.cumsum",
        "numpy.concatenate",
        "numpy.intp"
    ],
    "numpy.lib.arraysetops.intersect1d": [
        "numpy.lib.arraysetops.unique",
        "numpy.concatenate"
    ],
    "numpy.lib.arraysetops.setxor1d": [
        "numpy.lib.arraysetops.unique",
        "numpy.concatenate"
    ],
    "numpy.lib.arraysetops.in1d": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.unique",
        "numpy.empty",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.zeros",
        "numpy.ones",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel",
        "numpy.concatenate"
    ],
    "numpy.lib.arraysetops.isin": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.asarray",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.arraysetops.union1d": [
        "numpy.lib.arraysetops.unique",
        "numpy.concatenate"
    ],
    "numpy.lib.arraysetops.setdiff1d": [
        "numpy.lib.arraysetops.unique",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.lib.arraysetops.in1d",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel"
    ],
    "numpy.lib.mixins._binary_method.func": [
        "numpy.lib.mixins._disables_array_ufunc"
    ],
    "numpy.lib.mixins._binary_method": [
        "numpy.lib.mixins._binary_method.func"
    ],
    "numpy.lib.mixins._reflected_binary_method.func": [
        "numpy.lib.mixins._disables_array_ufunc"
    ],
    "numpy.lib.mixins._reflected_binary_method": [
        "numpy.lib.mixins._reflected_binary_method.func"
    ],
    "numpy.lib.mixins._inplace_binary_method": [
        "numpy.lib.mixins._inplace_binary_method.func"
    ],
    "numpy.lib.mixins._numeric_methods": [
        "numpy.lib.mixins._reflected_binary_method",
        "numpy.lib.mixins._binary_method",
        "numpy.lib.mixins._inplace_binary_method"
    ],
    "numpy.lib.mixins._unary_method": [
        "numpy.lib.mixins._unary_method.func"
    ],
    "numpy.lib.mixins.NDArrayOperatorsMixin": [
        "numpy.lib.mixins._unary_method",
        "numpy.lib.mixins._binary_method",
        "numpy.lib.mixins._reflected_binary_method",
        "numpy.lib.mixins._numeric_methods"
    ],
    "numpy.lib.type_check.mintypecode": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.defchararray.index",
        "numpy.core.fromnumeric.sort",
        "numpy.sort",
        "numpy.core.defchararray.chararray.index",
        "numpy.ma.append",
        "numpy.ma.core.sort",
        "numpy.char.index",
        "npy_tempita._looper.loop_pos.index",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.type_check.asfarray": [
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.type_check.real": [
        "numpy.lib.type_check.real",
        "numpy.real"
    ],
    "numpy.lib.type_check.imag": [
        "numpy.lib.type_check.imag",
        "numpy.imag"
    ],
    "numpy.lib.type_check.iscomplex": [
        "numpy.core.numeric.asanyarray"
    ],
    "numpy.lib.type_check.isreal": [
        "numpy.lib.type_check.imag"
    ],
    "numpy.lib.type_check.isrealobj": [
        "numpy.lib.type_check.iscomplexobj"
    ],
    "numpy.lib.type_check._getmaxmin": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.core.getlimits.finfo",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.core"
    ],
    "numpy.lib.type_check.nan_to_num": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.lib.ufunclike.isneginf",
        "numpy.lib.ufunclike.isposinf",
        "numpy.lib.type_check._getmaxmin"
    ],
    "numpy.lib.type_check.real_if_close": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.core.getlimits.finfo",
        "numpy.core.numeric.asanyarray",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.core"
    ],
    "numpy.lib.type_check.common_type": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.type_check.iscomplexobj",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.lib.shape_base._make_along_axis_idx": [
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.lib.shape_base.take_along_axis": [
        "numpy.lib.shape_base._make_along_axis_idx"
    ],
    "numpy.lib.shape_base.put_along_axis": [
        "numpy.lib.shape_base._make_along_axis_idx"
    ],
    "numpy.lib.shape_base.apply_along_axis": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.core.numeric.asanyarray",
        "numpy.lib.index_tricks.ndindex",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.matrixlib.defmatrix.matrix",
        "npy_tempita.compat3.next",
        "numpy.core.fromnumeric.transpose"
    ],
    "numpy.lib.shape_base.apply_over_axes": [
        "numpy.lib.shape_base.expand_dims",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.shape_base.expand_dims": [
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.shape_base.column_stack": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.shape_base._replace_zero_by_x_arrays": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.lib.shape_base.array_split": [
        "numpy.cumsum",
        "numpy.ma.append",
        "numpy.core.fromnumeric.cumsum",
        "numpy.append",
        "numpy.ma.core.MaskedArray.cumsum",
        "numpy.int",
        "numpy.divmod",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.shape_base.split": [
        "numpy.lib.shape_base.array_split"
    ],
    "numpy.lib.shape_base.hsplit": [
        "numpy.lib.shape_base.split"
    ],
    "numpy.lib.shape_base.vsplit": [
        "numpy.lib.shape_base.split"
    ],
    "numpy.lib.shape_base.dsplit": [
        "numpy.lib.shape_base.split"
    ],
    "numpy.lib.shape_base.kron": [
        "numpy.core.numeric.asanyarray",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.shape_base.get_array_prepare",
        "numpy.lib.shape_base.get_array_wrap",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.shape_base.tile": [
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.repeat",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.repeat",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.user_array.container": [
        "numpy.lib.user_array.container.__add__",
        "numpy.lib.user_array.container.__mul__"
    ],
    "numpy.lib.user_array.container.__repr__": [
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.lib.user_array.container.__getitem__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__setitem__": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype"
    ],
    "numpy.lib.user_array.container.__abs__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__neg__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__add__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__sub__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rsub__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__mul__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__div__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rdiv__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__mod__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rmod__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__divmod__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rdivmod__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__pow__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rpow__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__lshift__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rshift__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rlshift__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rrshift__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__and__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rand__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__xor__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__rxor__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__or__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__ror__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__pos__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__invert__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container._scalarfunc": [
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.lib.user_array.container.__complex__": [
        "numpy.lib.user_array.container._scalarfunc"
    ],
    "numpy.lib.user_array.container.__float__": [
        "numpy.lib.user_array.container._scalarfunc"
    ],
    "numpy.lib.user_array.container.__int__": [
        "numpy.lib.user_array.container._scalarfunc",
        "numpy.int"
    ],
    "numpy.lib.user_array.container.__long__": [
        "numpy.lib.user_array.container._scalarfunc"
    ],
    "numpy.lib.user_array.container.__hex__": [
        "numpy.lib.user_array.container._scalarfunc"
    ],
    "numpy.lib.user_array.container.__oct__": [
        "numpy.lib.user_array.container._scalarfunc"
    ],
    "numpy.lib.user_array.container.__lt__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__le__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__eq__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__ne__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__gt__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__ge__": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.copy": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.byteswap": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.astype": [
        "numpy.lib.user_array.container._rc"
    ],
    "numpy.lib.user_array.container.__array_wrap__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.lib.user_array.container.__setattr__": [
        "numpy.core.records.record.__setattr__",
        "numpy.ma.core.MaskedArray.__setattr__",
        "npy_tempita.bunch.__setattr__",
        "numpy.core.records.recarray.__setattr__",
        "numpy.ma.mrecords.MaskedRecords.__setattr__",
        "numpy.lib.user_array.container.__setattr__"
    ],
    "numpy.lib.function_base.rot90": [
        "numpy.core.numeric.asanyarray",
        "numpy.lib.function_base.flip"
    ],
    "numpy.lib.function_base.flip": [
        "numpy.core.numeric.normalize_axis_tuple",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.function_base.average": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.ndarray.sum",
        "numpy.True_.copy",
        "numpy.asanyarray",
        "numpy.result_type",
        "numpy.broadcast_to",
        "numpy.core.fromnumeric.sum",
        "numpy.ma.copy",
        "numpy.bool_",
        "numpy.any",
        "numpy.ma.sum",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.sum",
        "numpy.lib.user_array.container.copy",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.copy"
    ],
    "numpy.lib.function_base.asarray_chkfinite": [
        "numpy.core.fromnumeric.all",
        "numpy.core.numeric.asarray",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.lib.function_base.piecewise": [
        "numpy.core.numeric.asanyarray",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.core.numeric.isscalar",
        "numpy.any",
        "numpy.core.fromnumeric.size",
        "numpy.size",
        "numpy.ma.core.size",
        "numpy.concatenate"
    ],
    "numpy.lib.function_base.select": [
        "numpy.broadcast_arrays",
        "numpy.core.fromnumeric.shape",
        "numpy.copyto",
        "numpy.full",
        "numpy.asarray",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.result_type",
        "numpy.issubdtype",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.user_array.container.astype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.bool_",
        "numpy.core.fromnumeric.ndim"
    ],
    "numpy.lib.function_base.gradient": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.dtype",
        "numpy.core.defchararray.replace",
        "numpy.distutils.conv_template.parse_string.replace",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.asanyarray",
        "numpy.core.numeric.normalize_axis_tuple",
        "numpy.f2py.auxfuncs.replace",
        "numpy.issubdtype",
        "numpy.ma.append",
        "numpy.diff",
        "numpy.core.defchararray.chararray.replace",
        "numpy.core.fromnumeric.all",
        "numpy.empty_like",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ones",
        "numpy.append",
        "numpy.double",
        "numpy.datetime64",
        "numpy.timedelta64",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.all",
        "numpy.ndim",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.lib.function_base.diff": [
        "numpy.core.numeric.asanyarray",
        "numpy.bool_"
    ],
    "numpy.lib.function_base.interp": [
        "numpy.argsort",
        "numpy.float64",
        "numpy.asarray",
        "numpy.concatenate",
        "numpy.abs",
        "numpy.complex128",
        "numpy.iscomplexobj"
    ],
    "numpy.lib.function_base.angle": [
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.function_base.unwrap": [
        "numpy.lib.function_base.diff",
        "numpy.abs",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.function_base.trim_zeros": [
        "npy_tempita._looper.loop_pos.first"
    ],
    "numpy.lib.function_base.unique": [
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.function_base.extract": [
        "numpy.core.fromnumeric.ravel",
        "numpy.core.fromnumeric.nonzero"
    ],
    "numpy.lib.function_base.place": [
        "numpy.ndarray"
    ],
    "numpy.lib.function_base._parse_input_dimensions": [
        "numpy.core.fromnumeric.shape",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.shape",
        "numpy.ma.append",
        "numpy.lib.function_base.append",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.function_base._update_dim_sizes",
        "numpy.lib.stride_tricks._broadcast_shape",
        "numpy.core.fromnumeric.ndim",
        "numpy.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.function_base._create_arrays": [
        "numpy.lib.function_base._calculate_shapes"
    ],
    "numpy.lib.function_base.vectorize.__init__": [
        "numpy.lib.function_base._parse_gufunc_signature",
        "numpy.lib.function_base.iterable"
    ],
    "numpy.lib.function_base.vectorize.__call__": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.lib.function_base.vectorize._vectorize_call",
        "numpy.lib.function_base.vectorize.__call__.func"
    ],
    "numpy.lib.function_base.vectorize.__call__.func": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.lib._iotools.StringConverter.update"
    ],
    "numpy.lib.function_base.vectorize._vectorize_call": [
        "numpy.lib.function_base.vectorize._vectorize_call_with_signature",
        "numpy.lib.function_base.vectorize._get_ufunc_and_otypes"
    ],
    "numpy.lib.function_base.vectorize._vectorize_call_with_signature": [
        "numpy.lib.function_base._update_dim_sizes",
        "numpy.ndindex",
        "numpy.lib.function_base._create_arrays",
        "numpy.lib.function_base._parse_input_dimensions",
        "numpy.lib.function_base._calculate_shapes",
        "numpy.lib.function_base._parse_gufunc_signature"
    ],
    "numpy.lib.function_base.cov": [
        "numpy.conj",
        "numpy.core.fromnumeric.reshape",
        "numpy.asarray",
        "numpy.result_type",
        "numpy.around",
        "numpy.float64",
        "numpy.core.fromnumeric.sum",
        "numpy.core.fromnumeric.any",
        "numpy.true_divide",
        "numpy.int",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.lib.function_base.average",
        "numpy.concatenate",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.function_base.corrcoef": [
        "numpy.lib.function_base.cov",
        "numpy.lib.twodim_base.diag",
        "numpy.iscomplexobj",
        "numpy.clip"
    ],
    "numpy.lib.function_base.blackman": [
        "numpy.core.numeric.ones"
    ],
    "numpy.lib.function_base.bartlett": [
        "numpy.core.numeric.ones"
    ],
    "numpy.lib.function_base.hanning": [
        "numpy.core.numeric.ones"
    ],
    "numpy.lib.function_base.hamming": [
        "numpy.core.numeric.ones"
    ],
    "numpy.lib.function_base._i0_1": [
        "numpy.lib.function_base._chbevl"
    ],
    "numpy.lib.function_base._i0_2": [
        "numpy.lib.function_base._chbevl"
    ],
    "numpy.lib.function_base.i0": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.lib.function_base._i0_1",
        "numpy.lib.function_base._i0_2",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.lib.function_base.kaiser": [
        "numpy.dual",
        "numpy.array"
    ],
    "numpy.lib.function_base.sinc": [
        "numpy.asanyarray"
    ],
    "numpy.lib.function_base._ureduce": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.asanyarray",
        "numpy.core.numeric.normalize_axis_tuple",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.lib.function_base.median": [
        "numpy.lib.function_base._median",
        "numpy.lib.function_base._ureduce"
    ],
    "numpy.lib.function_base._median": [
        "numpy.core.fromnumeric.partition",
        "numpy.asanyarray",
        "numpy.core.fromnumeric.mean",
        "numpy.lib.utils._median_nancheck",
        "numpy.issubdtype"
    ],
    "numpy.lib.function_base.percentile": [
        "numpy.lib.function_base._quantile_unchecked",
        "numpy.true_divide",
        "numpy.lib.function_base._quantile_is_valid"
    ],
    "numpy.lib.function_base.quantile": [
        "numpy.lib.function_base._quantile_unchecked",
        "numpy.asanyarray",
        "numpy.lib.function_base._quantile_is_valid"
    ],
    "numpy.lib.function_base._quantile_unchecked": [
        "numpy.lib.function_base._ureduce",
        "numpy.lib.function_base._quantile_ureduce_func"
    ],
    "numpy.lib.function_base._quantile_is_valid": [
        "numpy.count_nonzero"
    ],
    "numpy.lib.function_base._quantile_ureduce_func": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.numeric.asarray",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.isnan",
        "numpy.issubdtype",
        "numpy.array",
        "numpy.any",
        "numpy.moveaxis"
    ],
    "numpy.lib.function_base.trapz": [
        "numpy.ndarray.sum",
        "numpy.core.numeric.asanyarray",
        "numpy.sum",
        "numpy.lib.function_base.diff",
        "numpy.ma.sum",
        "numpy.asarray",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.lib.function_base.add_newdoc": [
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.strip"
    ],
    "numpy.lib.function_base.meshgrid": [
        "numpy.broadcast_arrays"
    ],
    "numpy.lib.function_base.delete": [
        "numpy.ndarray",
        "numpy.core.numeric.asarray",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.asarray",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.numeric.ones",
        "numpy.int",
        "numpy.can_cast"
    ],
    "numpy.lib.function_base.insert": [
        "numpy.core.numeric.ones",
        "numpy.ndarray",
        "numpy.core.numeric.asarray",
        "numpy.arange",
        "numpy.can_cast",
        "numpy.moveaxis",
        "numpy.array"
    ],
    "numpy.lib.function_base.append": [
        "numpy.core.numeric.asanyarray",
        "numpy.core.fromnumeric.ravel"
    ],
    "numpy.lib.arrayterator.Arrayterator.__getitem__": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.append",
        "numpy.ma.append",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.fromnumeric.ndim",
        "numpy.core.getlimits.iinfo.min",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.ma.core.append"
    ],
    "numpy.lib.arrayterator.Arrayterator.flat": [
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.lib.arrayterator.Arrayterator.__iter__": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.lib.arrayterator.Arrayterator.shape"
    ],
    "numpy.lib._datasource._python2_bz2open": [
        "numpy.lib._datasource._check_mode"
    ],
    "numpy.lib._datasource._python2_gzipopen": [
        "numpy.lib._datasource._python2_gzipopen.GzipWrap",
        "numpy.lib._datasource._check_mode",
        "numpy.random.bytes"
    ],
    "numpy.lib._datasource._python2_gzipopen.GzipWrap.read1": [
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read"
    ],
    "numpy.lib._datasource._FileOpeners._load": [
        "numpy.lib._datasource._python2_gzipopen",
        "numpy.lib._datasource._python2_bz2open"
    ],
    "numpy.lib._datasource._FileOpeners.keys": [
        "numpy.lib._datasource._FileOpeners._load"
    ],
    "numpy.lib._datasource._FileOpeners.__getitem__": [
        "numpy.lib._datasource._FileOpeners._load"
    ],
    "numpy.lib._datasource.open": [
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib._datasource.DataSource",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.lib._datasource.DataSource.__init__": [
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib._datasource.DataSource._iszip": [
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.lib._datasource.DataSource._splitzipext": [
        "numpy.lib._datasource.DataSource._iszip"
    ],
    "numpy.lib._datasource.DataSource._possible_names": [
        "numpy.lib._datasource.DataSource._iszip",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.lib._datasource.DataSource._cache": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib._datasource.open",
        "numpy.lib._datasource.DataSource._isurl",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib._datasource.DataSource._findfile": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib._datasource.DataSource._cache",
        "numpy.lib._datasource.DataSource._possible_names",
        "numpy.lib._datasource.DataSource._isurl",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib._datasource.DataSource.abspath": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.DataSource._sanitize_relative_path",
        "numpy.char.join"
    ],
    "numpy.lib._datasource.DataSource._sanitize_relative_path": [
        "cythonize.normpath",
        "npy_tempita._looper.loop_pos.last",
        "numpy.core.defchararray.chararray.lstrip",
        "numpy.core.defchararray.lstrip"
    ],
    "numpy.lib._datasource.DataSource.exists": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib._datasource.DataSource._isurl",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib._datasource.DataSource.open": [
        "numpy.lib._datasource.DataSource._iswritemode",
        "numpy.lib._datasource.DataSource._findfile",
        "numpy.lib._datasource.DataSource._splitzipext",
        "numpy.lib._datasource.DataSource._isurl",
        "numpy.lib._datasource._FileOpeners"
    ],
    "numpy.lib._datasource.Repository": [
        "numpy.lib._datasource.DataSource"
    ],
    "numpy.lib._datasource.Repository.__init__": [
        "numpy.lib._datasource.DataSource.__init__"
    ],
    "numpy.lib._datasource.Repository.__del__": [
        "numpy.lib._datasource.DataSource.__del__"
    ],
    "numpy.lib._datasource.Repository._fullpath": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.lib._datasource.Repository._findfile": [
        "numpy.lib._datasource.Repository._fullpath",
        "numpy.lib._datasource.DataSource._findfile"
    ],
    "numpy.lib._datasource.Repository.abspath": [
        "numpy.lib._datasource.Repository._fullpath",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib._datasource.Repository.exists": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib._datasource.Repository._fullpath"
    ],
    "numpy.lib._datasource.Repository.open": [
        "numpy.lib._datasource.Repository._fullpath",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.lib._datasource.Repository.listdir": [
        "numpy.lib._datasource.DataSource._isurl"
    ],
    "numpy.lib.format.magic": [
        "numpy.random.bytes"
    ],
    "numpy.lib.format.read_magic": [
        "numpy.lib.format._read_bytes"
    ],
    "numpy.lib.format.header_data_from_array_1_0": [
        "numpy.lib.format.dtype_to_descr"
    ],
    "numpy.lib.format._write_array_header": [
        "numpy.ma.append",
        "numpy.lib.format.magic",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib.format._filter_header"
    ],
    "numpy.lib.format.write_array_header_1_0": [
        "numpy.lib.format._write_array_header"
    ],
    "numpy.lib.format.write_array_header_2_0": [
        "numpy.lib.format._write_array_header"
    ],
    "numpy.lib.format.read_array_header_1_0": [
        "numpy.lib.format._read_array_header"
    ],
    "numpy.lib.format.read_array_header_2_0": [
        "numpy.lib.format._read_array_header"
    ],
    "numpy.lib.format._filter_header": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.format._read_array_header": [
        "numpy.lib.format._read_bytes",
        "numpy.all",
        "numpy.lib.format._filter_header",
        "numpy.dtype",
        "numpy.lib.utils.safe_eval"
    ],
    "numpy.lib.format.write_array": [
        "numpy.lib.format.header_data_from_array_1_0",
        "numpy.lib.format._write_array_header",
        "numpy.ma.core.MaskedArray.max",
        "numpy.nditer",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.core.MaskedArray.tofile",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.lib.format._check_version"
    ],
    "numpy.lib.format.read_array": [
        "numpy.lib.format.read_magic",
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.ma.core.MaskedArray.min",
        "numpy.fmin.reduce",
        "numpy.ma.core.min",
        "numpy.ndarray",
        "numpy.min",
        "numpy.int",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.int64",
        "numpy.fromfile",
        "numpy.lib.format._read_bytes",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.frombuffer",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.subtract.reduce",
        "numpy.logical_xor.reduce",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.core.getlimits.iinfo.min",
        "numpy.fmax.reduce",
        "numpy.lib.format._read_array_header",
        "numpy.lib.format._check_version"
    ],
    "numpy.lib.format.open_memmap": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.format.read_magic",
        "numpy.lib.format.dtype_to_descr",
        "numpy.memmap",
        "numpy.lib.format._write_array_header",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.format._read_array_header",
        "numpy.dtype",
        "numpy.lib.polynomial.poly1d.order",
        "numpy.lib.format._check_version"
    ],
    "numpy.lib.format._read_bytes": [
        "numpy.random.bytes"
    ],
    "numpy.lib.ufunclike._deprecate_out_named_y": [
        "numpy.lib.ufunclike._deprecate_out_named_y.func"
    ],
    "numpy.lib.ufunclike.fix": [
        "numpy.core.numeric.asanyarray"
    ],
    "numpy.lib.scimath._fix_real_lt_zero": [
        "numpy.lib.type_check.isreal",
        "numpy.lib.scimath._tocomplex",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.scimath._fix_int_lt_zero": [
        "numpy.lib.type_check.isreal",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.scimath._fix_real_abs_gt_1": [
        "numpy.lib.type_check.isreal",
        "numpy.abs",
        "numpy.lib.scimath._tocomplex",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.scimath.sqrt": [
        "numpy.lib.scimath._fix_real_lt_zero"
    ],
    "numpy.lib.scimath.log": [
        "numpy.lib.scimath._fix_real_lt_zero"
    ],
    "numpy.lib.scimath.log10": [
        "numpy.lib.scimath._fix_real_lt_zero"
    ],
    "numpy.lib.scimath.logn": [
        "numpy.lib.scimath._fix_real_lt_zero"
    ],
    "numpy.lib.scimath.log2": [
        "numpy.lib.scimath._fix_real_lt_zero"
    ],
    "numpy.lib.scimath.power": [
        "numpy.lib.scimath._fix_int_lt_zero",
        "numpy.lib.scimath._fix_real_lt_zero"
    ],
    "numpy.lib.scimath.arccos": [
        "numpy.lib.scimath._fix_real_abs_gt_1"
    ],
    "numpy.lib.scimath.arcsin": [
        "numpy.lib.scimath._fix_real_abs_gt_1"
    ],
    "numpy.lib.scimath.arctanh": [
        "numpy.lib.scimath._fix_real_abs_gt_1"
    ],
    "numpy.lib.twodim_base.fliplr": [
        "numpy.core.numeric.asanyarray"
    ],
    "numpy.lib.twodim_base.flipud": [
        "numpy.core.numeric.asanyarray"
    ],
    "numpy.lib.twodim_base.eye": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.lib.twodim_base.diag": [
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.core.numeric.asanyarray",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.abs"
    ],
    "numpy.lib.twodim_base.diagflat": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.ravel",
        "numpy.dtype",
        "numpy.core.fromnumeric.ravel",
        "numpy.abs",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.ravel"
    ],
    "numpy.lib.twodim_base.tri": [
        "numpy.lib.twodim_base._min_int"
    ],
    "numpy.lib.twodim_base.tril": [
        "numpy.core.numeric.asanyarray",
        "numpy.lib.twodim_base.tri"
    ],
    "numpy.lib.twodim_base.triu": [
        "numpy.core.numeric.asanyarray",
        "numpy.lib.twodim_base.tri"
    ],
    "numpy.lib.twodim_base.vander": [
        "numpy.int",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.twodim_base.histogram2d": [
        "numpy.histogramdd",
        "numpy.core.numeric.asarray",
        "numpy"
    ],
    "numpy.lib.twodim_base.mask_indices": [
        "numpy.int",
        "numpy.core.numeric.ones"
    ],
    "numpy.lib.twodim_base.tril_indices": [
        "numpy.lib.twodim_base.tri"
    ],
    "numpy.lib.twodim_base.tril_indices_from": [
        "numpy.lib.twodim_base.tril_indices"
    ],
    "numpy.lib.twodim_base.triu_indices": [
        "numpy.lib.twodim_base.tri"
    ],
    "numpy.lib.twodim_base.triu_indices_from": [
        "numpy.lib.twodim_base.triu_indices"
    ],
    "numpy.lib.financial._convert_when": [
        "numpy.ndarray"
    ],
    "numpy.lib.financial.fv": [
        "numpy.asarray",
        "numpy.where",
        "numpy.lib.financial._convert_when"
    ],
    "numpy.lib.financial.pmt": [
        "numpy.where",
        "numpy.lib.financial._convert_when",
        "numpy.array"
    ],
    "numpy.lib.financial.nper": [
        "numpy.errstate",
        "numpy.log",
        "numpy.lib.financial._convert_when",
        "numpy.asarray",
        "numpy.where"
    ],
    "numpy.lib.financial.ipmt": [
        "numpy.lib.financial.pmt",
        "numpy.where",
        "numpy.lib.financial._convert_when",
        "numpy.lib.financial._rbl",
        "numpy.logical_and",
        "numpy.broadcast_arrays"
    ],
    "numpy.lib.financial._rbl": [
        "numpy.lib.financial.fv"
    ],
    "numpy.lib.financial.ppmt": [
        "numpy.lib.financial.ipmt",
        "numpy.lib.financial.pmt"
    ],
    "numpy.lib.financial.pv": [
        "numpy.asarray",
        "numpy.where",
        "numpy.lib.financial._convert_when"
    ],
    "numpy.lib.financial.rate": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.financial._convert_when",
        "numpy.all",
        "numpy.asarray",
        "numpy.abs",
        "numpy.lib.financial._g_div_gp"
    ],
    "numpy.lib.financial.irr": [
        "numpy.lib.type_check.real",
        "numpy.real",
        "numpy.argmin",
        "npy_tempita._looper.loop_pos.item",
        "numpy.roots"
    ],
    "numpy.lib.financial.npv": [
        "numpy.ndarray.sum",
        "numpy.sum",
        "numpy.ma.sum",
        "numpy.asarray",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.lib.financial.mirr": [
        "numpy.lib.financial.npv",
        "numpy.asarray"
    ],
    "numpy.lib.index_tricks.ix_": [
        "numpy.core.numeric.asarray",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.ma.append",
        "numpy.core.numerictypes.issubdtype",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.index_tricks.nd_grid.__getitem__": [
        "numpy.abs",
        "numpy.ma.append",
        "numpy.core.fromnumeric.size",
        "numpy.append",
        "numpy.core.numeric.indices",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.size",
        "numpy.ma.core.append",
        "numpy.ma.core.size"
    ],
    "numpy.lib.index_tricks.AxisConcatenator.__getitem__": [
        "numpy.core.function_base.linspace",
        "numpy.split",
        "numpy.polynomial._polybase.ABCPolyBase.linspace",
        "numpy.ma.append",
        "numpy.core.numerictypes.find_common_type",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.function_base.append",
        "numpy.core.defchararray.split",
        "numpy.linspace",
        "numpy.abs",
        "numpy.int",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.lib.user_array.container.astype",
        "numpy.core.multiarray.scalar",
        "numpy.core.fromnumeric.ndim",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.ma.core.append"
    ],
    "numpy.lib.index_tricks.RClass": [
        "numpy.lib.index_tricks.AxisConcatenator"
    ],
    "numpy.lib.index_tricks.RClass.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.lib.index_tricks.CClass": [
        "numpy.lib.index_tricks.AxisConcatenator"
    ],
    "numpy.lib.index_tricks.CClass.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.lib.index_tricks.ndenumerate": [
        "numpy.lib.index_tricks.ndenumerate.__next__"
    ],
    "numpy.lib.index_tricks.ndenumerate.__init__": [
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat"
    ],
    "numpy.lib.index_tricks.ndenumerate.__next__": [
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.lib.index_tricks.ndenumerate.__next__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "npy_tempita.compat3.next",
        "numpy.lib.arrayterator.Arrayterator.flat"
    ],
    "numpy.lib.index_tricks.ndindex": [
        "numpy.lib.index_tricks.ndindex.__next__"
    ],
    "numpy.lib.index_tricks.ndindex.__init__": [
        "numpy.lib.stride_tricks.as_strided",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.core.numeric.zeros_like",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.index_tricks.ndindex.ndincr": [
        "npy_tempita.compat3.next",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.lib.index_tricks.ndindex.__next__"
    ],
    "numpy.lib.index_tricks.ndindex.__next__": [
        "npy_tempita.compat3.next",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.lib.index_tricks.ndindex.__next__"
    ],
    "numpy.lib.index_tricks.fill_diagonal": [
        "numpy.ndarray.sum",
        "numpy.sum",
        "numpy.lib.function_base.diff",
        "numpy.ma.sum",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.lib.index_tricks.diag_indices_from": [
        "numpy.lib.function_base.diff",
        "numpy.lib.index_tricks.diag_indices"
    ],
    "numpy.lib.utils.get_include": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy"
    ],
    "numpy.lib.utils._Deprecate.__call__": [
        "numpy.lib.utils._set_function_name",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.lib.utils._Deprecate.__call__.newfunc"
    ],
    "numpy.lib.utils._Deprecate.__call__.newfunc": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.lib.utils.deprecate": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.lib.utils._Deprecate",
        "numpy.lib.utils._Deprecate.__init__"
    ],
    "numpy.lib.utils.who": [
        "numpy.core.fromnumeric.shape",
        "numpy.core.getlimits.iinfo.max",
        "numpy.lib._datasource._FileOpeners.keys",
        "numpy.shape",
        "numpy.ma.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.int",
        "numpy.ma.core.shape",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.utils._makenamedict": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.lib.utils._info": [
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_intra_padding.aligned",
        "fortran",
        "numpy.core.tests.test_multiarray.TestPEP3118Dtype.test_trailing_padding.aligned"
    ],
    "numpy.lib.utils.info": [
        "numpy.ma.append",
        "numpy.lib.utils._split_line",
        "numpy.append",
        "numpy.lib.utils._makenamedict",
        "numpy.lib.utils._info",
        "numpy.lib.utils.info",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.utils.lookfor": [
        "numpy.ma.core.MaskedArray.sort",
        "numpy.core.fromnumeric.sort",
        "numpy.core.defchararray.split",
        "numpy.sort",
        "numpy.core.defchararray.strip",
        "numpy.ma.append",
        "numpy.ma.core.sort",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.ok",
        "numpy.lib.utils._lookfor_generate_cache",
        "numpy.ma.core.append",
        "numpy.lib.utils.lookfor.relevance_value"
    ],
    "numpy.lib.utils.lookfor.relevance": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.ndarray.sum",
        "numpy.core.defchararray.split",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.core.fromnumeric.sum",
        "numpy.core.defchararray.chararray.split",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.sum",
        "numpy.core.getlimits.iinfo.max",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.sum",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.lib.utils.lookfor.relevance_value": [
        "numpy.lib.utils._lookfor_generate_cache",
        "numpy.lib.utils.lookfor.relevance"
    ],
    "numpy.lib.utils._lookfor_generate_cache": [
        "numpy.core.defchararray.index",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.index",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib.utils._getmembers",
        "numpy.char.index",
        "npy_tempita._looper.loop_pos.index",
        "numpy.lib.utils._lookfor_generate_cache",
        "numpy.char.join"
    ],
    "numpy.lib.utils.SafeEval.visit": [
        "numpy.lib.utils.SafeEval.default"
    ],
    "numpy.lib.utils.SafeEval.visitExpression": [
        "numpy.lib.utils.SafeEval.visit"
    ],
    "numpy.lib.utils.SafeEval.visitUnaryOp": [
        "numpy.lib.utils.SafeEval.visit"
    ],
    "numpy.lib.utils._median_nancheck": [
        "numpy.ma.core.isMaskedArray",
        "numpy.ma.isMaskedArray",
        "numpy.isnan",
        "numpy.count_nonzero",
        "numpy.moveaxis"
    ],
    "numpy.lib.stride_tricks.as_strided": [
        "numpy.lib.stride_tricks._maybe_view_as_subclass",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.asarray",
        "numpy.lib.stride_tricks.DummyArray",
        "numpy.array"
    ],
    "numpy.lib.stride_tricks._broadcast_to": [
        "numpy.core.fromnumeric.any",
        "numpy.iterable",
        "numpy.nditer",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.lib.stride_tricks._maybe_view_as_subclass",
        "numpy.array"
    ],
    "numpy.lib.stride_tricks.broadcast_to": [
        "numpy.lib.stride_tricks._broadcast_to"
    ],
    "numpy.lib.stride_tricks._broadcast_shape": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.broadcast",
        "numpy.lib.stride_tricks.broadcast_to"
    ],
    "numpy.lib.stride_tricks.broadcast_arrays": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.lib.stride_tricks._broadcast_shape",
        "numpy.core.fromnumeric.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.all",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.lib.recfunctions.recursive_fill_fields": [
        "numpy.lib.recfunctions.recursive_fill_fields"
    ],
    "numpy.lib.recfunctions.get_names": [
        "numpy.lib.recfunctions.get_names",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.recfunctions.get_names_flat": [
        "numpy.lib.recfunctions.get_names_flat",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.recfunctions.flatten_descr": [
        "numpy.lib.recfunctions.flatten_descr",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.recfunctions.zip_dtype": [
        "numpy.lib.recfunctions.get_fieldspec",
        "numpy.lib.recfunctions.flatten_descr",
        "numpy.dtype",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.recfunctions.get_fieldstructure": [
        "numpy.lib.recfunctions.get_fieldstructure",
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.recfunctions._izip_fields_flat": [
        "numpy.lib.recfunctions._izip_fields_flat",
        "numpy.void"
    ],
    "numpy.lib.recfunctions._izip_fields": [
        "numpy.void",
        "numpy.lib.recfunctions._izip_fields"
    ],
    "numpy.lib.recfunctions.izip_records": [
        "numpy.lib.recfunctions._izip_fields_flat",
        "numpy.lib.recfunctions._izip_fields"
    ],
    "numpy.lib.recfunctions._fix_output": [
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.ma.MaskedArray",
        "numpy.recarray"
    ],
    "numpy.lib.recfunctions._fix_defaults": [
        "numpy.lib.npyio.NpzFile.items"
    ],
    "numpy.lib.recfunctions.merge_arrays": [
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.max",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.lib.user_array.container.__array__",
        "numpy.ravel",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.lib.recfunctions.zip_dtype",
        "numpy.dtype",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.lib.recfunctions.izip_records",
        "numpy.asanyarray",
        "numpy.ma.core.max",
        "numpy.core.fromnumeric.ravel",
        "numpy.ma.array",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.max",
        "numpy.ma.append",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__",
        "numpy.array",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.void",
        "numpy.recarray",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.ones",
        "numpy.ma.MaskedArray",
        "npy_tempita._looper.loop_pos.item",
        "numpy.fromiter",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.core.getlimits.iinfo.max",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.append",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.lib.polynomial.poly1d.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.lib.function_base.append",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__",
        "numpy.ma.core.append",
        "numpy.ma.core._check_fill_value"
    ],
    "numpy.lib.recfunctions.drop_fields": [
        "numpy.lib._iotools._is_string_like",
        "numpy.lib.recfunctions.drop_fields._drop_descr",
        "numpy.lib.recfunctions._fix_output",
        "numpy.empty",
        "numpy.lib.recfunctions.recursive_fill_fields"
    ],
    "numpy.lib.recfunctions.drop_fields._drop_descr": [
        "numpy.lib.recfunctions.drop_fields._drop_descr"
    ],
    "numpy.lib.recfunctions._keep_fields": [
        "numpy.lib.recfunctions._fix_output",
        "numpy.empty",
        "numpy.lib.recfunctions.recursive_fill_fields"
    ],
    "numpy.lib.recfunctions.rec_drop_fields": [
        "numpy.lib.recfunctions.drop_fields"
    ],
    "numpy.lib.recfunctions.rename_fields._recursive_rename_fields": [
        "numpy.lib.recfunctions.rename_fields._recursive_rename_fields"
    ],
    "numpy.lib.recfunctions.rename_fields": [
        "numpy.lib.recfunctions.rename_fields._recursive_rename_fields"
    ],
    "numpy.lib.recfunctions.append_fields": [
        "numpy.lib.recfunctions.recursive_fill_fields",
        "numpy.lib.recfunctions.get_fieldspec",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.recfunctions._fix_output",
        "numpy.ma.core.max",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.masked_all",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.lib.recfunctions.rec_append_fields": [
        "numpy.lib.recfunctions.append_fields"
    ],
    "numpy.lib.recfunctions.stack_arrays": [
        "numpy.core.defchararray.index",
        "numpy.ndarray",
        "numpy.lib.recfunctions.get_fieldspec",
        "numpy.ma.core.MaskedArray.max",
        "numpy.cumsum",
        "numpy.core.defchararray.chararray.index",
        "numpy.lib.recfunctions._fix_output",
        "numpy.lib.recfunctions._fix_defaults",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.append",
        "numpy.char.index",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.concatenate",
        "npy_tempita._looper.loop_pos.index",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.sum",
        "numpy.lib.function_base.append",
        "numpy.ma.masked_all",
        "numpy.ma.core.append"
    ],
    "numpy.lib.recfunctions.find_duplicates": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.ravel",
        "numpy.dtype",
        "numpy.lib.recfunctions.get_fieldstructure",
        "numpy.core.fromnumeric.ravel",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.concatenate"
    ],
    "numpy.lib.recfunctions.join_by": [
        "numpy.core.defchararray.index",
        "numpy.lib.recfunctions.get_fieldspec",
        "numpy.ma.core.MaskedArray.max",
        "numpy.dtype",
        "numpy.core.defchararray.chararray.index",
        "numpy.lib.recfunctions._fix_output",
        "numpy.lib.recfunctions._fix_defaults",
        "numpy.ma.core.max",
        "numpy.lib.recfunctions._keep_fields",
        "numpy.max",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.char.index",
        "numpy.matrixlib.defmatrix.matrix.max",
        "npy_tempita.compat3.next",
        "numpy.ma.concatenate",
        "npy_tempita._looper.loop_pos.index",
        "numpy.core.getlimits.iinfo.max",
        "numpy.ma.masked_all",
        "numpy.concatenate"
    ],
    "numpy.lib.recfunctions.rec_join": [
        "numpy.lib.recfunctions.join_by"
    ],
    "numpy.lib.arraypad._arange_ndarray": [
        "numpy.arange"
    ],
    "numpy.lib.arraypad._round_ifneeded": [
        "numpy.issubdtype"
    ],
    "numpy.lib.arraypad._slice_first": [
        "numpy.lib.arraypad._slice_at_axis"
    ],
    "numpy.lib.arraypad._slice_last": [
        "numpy.lib.arraypad._slice_at_axis"
    ],
    "numpy.lib.arraypad._do_prepend": [
        "numpy.concatenate"
    ],
    "numpy.lib.arraypad._do_append": [
        "numpy.concatenate"
    ],
    "numpy.lib.arraypad._prepend_const": [
        "numpy.full",
        "numpy.lib.arraypad._do_prepend"
    ],
    "numpy.lib.arraypad._append_const": [
        "numpy.full",
        "numpy.lib.arraypad._do_append"
    ],
    "numpy.lib.arraypad._prepend_edge": [
        "numpy.lib.arraypad._slice_first",
        "numpy.lib.arraypad._do_prepend"
    ],
    "numpy.lib.arraypad._append_edge": [
        "numpy.lib.arraypad._slice_last",
        "numpy.lib.arraypad._do_append"
    ],
    "numpy.lib.arraypad._prepend_ramp": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.fromnumeric.repeat",
        "numpy.lib.arraypad._round_ifneeded",
        "numpy.lib.arraypad._slice_first",
        "numpy.lib.arraypad._do_prepend",
        "numpy.float64",
        "numpy.repeat"
    ],
    "numpy.lib.arraypad._append_ramp": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.fromnumeric.repeat",
        "numpy.lib.arraypad._round_ifneeded",
        "numpy.lib.arraypad._slice_last",
        "numpy.lib.arraypad._do_append",
        "numpy.float64",
        "numpy.repeat"
    ],
    "numpy.lib.arraypad._prepend_max": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arraypad._slice_first",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.lib.arraypad._do_prepend",
        "numpy.core.fromnumeric.repeat",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.lib.arraypad._prepend_edge",
        "numpy.repeat"
    ],
    "numpy.lib.arraypad._append_max": [
        "numpy.lib.arraypad._append_edge",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.lib.arraypad._slice_last",
        "numpy.lib.arraypad._do_append",
        "numpy.core.fromnumeric.repeat",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.repeat"
    ],
    "numpy.lib.arraypad._prepend_mean": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.lib.arraypad._round_ifneeded",
        "numpy.lib.arraypad._slice_first",
        "numpy.mean",
        "numpy.lib.arraypad._do_prepend",
        "numpy.core.fromnumeric.repeat",
        "numpy.core.fromnumeric.mean",
        "numpy.repeat",
        "numpy.lib.arraypad._prepend_edge",
        "numpy.ma.mean"
    ],
    "numpy.lib.arraypad._append_mean": [
        "numpy.lib.arraypad._append_edge",
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.mean",
        "numpy.matrixlib.defmatrix.matrix.mean",
        "numpy.ma.core.MaskedArray.mean",
        "numpy.lib.arraypad._round_ifneeded",
        "numpy.mean",
        "numpy.lib.arraypad._slice_last",
        "numpy.lib.arraypad._do_append",
        "numpy.core.fromnumeric.repeat",
        "numpy.core.fromnumeric.mean",
        "numpy.repeat",
        "numpy.ma.mean"
    ],
    "numpy.lib.arraypad._prepend_med": [
        "numpy.median",
        "numpy.lib.arraypad._round_ifneeded",
        "numpy.lib.arraypad._slice_first",
        "numpy.lib.arraypad._do_prepend",
        "numpy.lib.arraypad._prepend_edge"
    ],
    "numpy.lib.arraypad._append_med": [
        "numpy.median",
        "numpy.lib.arraypad._round_ifneeded",
        "numpy.lib.arraypad._slice_last",
        "numpy.lib.arraypad._append_edge",
        "numpy.lib.arraypad._do_append"
    ],
    "numpy.lib.arraypad._prepend_min": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.lib.arraypad._slice_first",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.lib.arraypad._do_prepend",
        "numpy.core.fromnumeric.repeat",
        "numpy.core.getlimits.iinfo.min",
        "numpy.lib.arraypad._prepend_edge",
        "numpy.repeat"
    ],
    "numpy.lib.arraypad._append_min": [
        "numpy.lib.arraypad._append_edge",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.lib.arraypad._slice_last",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.lib.arraypad._do_append",
        "numpy.core.fromnumeric.repeat",
        "numpy.core.getlimits.iinfo.min",
        "numpy.repeat"
    ],
    "numpy.lib.arraypad._pad_ref": [
        "numpy.lib.arraypad._slice_at_axis",
        "numpy.lib.arraypad._slice_last",
        "numpy.lib.arraypad._slice_first",
        "numpy.concatenate"
    ],
    "numpy.lib.arraypad._pad_sym": [
        "numpy.lib.arraypad._slice_at_axis",
        "numpy.lib.arraypad._slice_last",
        "numpy.lib.arraypad._slice_first",
        "numpy.concatenate"
    ],
    "numpy.lib.arraypad._pad_wrap": [
        "numpy.lib.arraypad._slice_last",
        "numpy.lib.arraypad._slice_first",
        "numpy.concatenate"
    ],
    "numpy.lib.arraypad._normalize_shape": [
        "numpy.lib.user_array.container.astype",
        "numpy.int",
        "numpy.broadcast_to",
        "numpy.asarray"
    ],
    "numpy.lib.arraypad._validate_lengths": [
        "numpy.lib.arraypad._normalize_shape"
    ],
    "numpy.lib.arraypad.pad": [
        "numpy.lib.arraypad._append_med",
        "numpy.lib.arraypad._append_edge",
        "numpy.ma.core.MaskedArray.min",
        "numpy.lib.arraypad._prepend_min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.lib.arraypad._prepend_ramp",
        "numpy.lib.arraypad._append_min",
        "numpy.lib.arraypad._append_ramp",
        "numpy.lib.arraypad._pad_ref",
        "numpy.zeros",
        "numpy.lib.arraypad._prepend_max",
        "numpy.lib.arraypad._pad_sym",
        "numpy.array",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.lib.arraypad._append_max",
        "numpy.lib.arraypad._pad_wrap",
        "numpy.lib.arraypad._prepend_mean",
        "numpy.lib.arraypad._normalize_shape",
        "numpy.lib.arraypad._prepend_const",
        "numpy.lib.arraypad._append_mean",
        "numpy.lib.arraypad._append_const",
        "numpy.lib.arraypad._validate_lengths",
        "numpy.core.getlimits.iinfo.min",
        "numpy.lib.arraypad._prepend_med",
        "numpy.lib.arraypad._prepend_edge",
        "numpy.apply_along_axis"
    ],
    "numpy.lib.polynomial.poly": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.core.numeric.asarray",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.lib.type_check.mintypecode",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.core.numeric.convolve"
    ],
    "numpy.lib.polynomial.roots": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.numeric.ones",
        "numpy.int",
        "numpy.lib.twodim_base.diag"
    ],
    "numpy.lib.polynomial.polyint": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.int",
        "numpy.core.numeric.asarray",
        "numpy.lib.polynomial.poly1d",
        "numpy.lib.polynomial.polyint",
        "numpy.core.numeric.ones"
    ],
    "numpy.lib.polynomial.polyder": [
        "numpy.int",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d",
        "numpy.lib.polynomial.polyder",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.polynomial.polyfit": [
        "numpy.core.numeric.asarray",
        "numpy.ndarray.sum",
        "numpy.linalg.inv",
        "numpy.core.fromnumeric.sum",
        "numpy.linalg.lstsq",
        "numpy.core.numeric.outer",
        "numpy.lib.twodim_base.vander",
        "numpy.ma.sum",
        "numpy.int",
        "numpy.sum",
        "numpy.lib.polynomial.RankWarning",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.lib.polynomial.polyval": [
        "numpy.lib.polynomial.poly1d",
        "numpy.core.numeric.zeros_like",
        "numpy.core.numeric.asarray"
    ],
    "numpy.lib.polynomial.polyadd": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d"
    ],
    "numpy.lib.polynomial.polysub": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d"
    ],
    "numpy.lib.polynomial.polymul": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d",
        "numpy.core.numeric.convolve"
    ],
    "numpy.lib.polynomial.polydiv": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.lib.polynomial.poly1d",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max",
        "numpy.core.numeric.allclose"
    ],
    "numpy.lib.polynomial.poly1d": [
        "numpy.lib.polynomial.poly1d.__rdiv__",
        "numpy.lib.polynomial.poly1d.order",
        "numpy.lib.polynomial.poly1d.coeffs",
        "numpy.lib.polynomial.poly1d.__div__",
        "numpy.lib.polynomial.poly1d.roots"
    ],
    "numpy.lib.polynomial.poly1d.order": [
        "numpy.lib.polynomial.poly1d._coeffs"
    ],
    "numpy.lib.polynomial.poly1d.roots": [
        "numpy.lib.polynomial.poly1d._coeffs",
        "numpy.lib.polynomial.poly1d.roots"
    ],
    "numpy.lib.polynomial.poly1d.__init__": [
        "numpy.lib._iotools.StringConverter.update",
        "numpy.lib.polynomial.poly",
        "numpy.lib.function_base.trim_zeros"
    ],
    "numpy.lib.polynomial.poly1d.__array__": [
        "numpy.core.numeric.asarray",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__repr__": [
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__len__": [
        "numpy.lib.polynomial.poly1d.order"
    ],
    "numpy.lib.polynomial.poly1d.__str__": [
        "numpy.lib.type_check.real",
        "numpy.lib.type_check.imag",
        "numpy.lib.type_check.iscomplex",
        "numpy.multiply.accumulate",
        "numpy.core.defchararray.startswith",
        "numpy.lib.polynomial._raise_power",
        "numpy.lib.polynomial.poly1d.__str__.fmt_float",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.lib.polynomial.poly1d.coeffs",
        "numpy.subtract.accumulate",
        "numpy.add.accumulate",
        "numpy.lib.polynomial.poly1d.variable",
        "numpy.divide.accumulate",
        "numpy.ma.core._MaskedBinaryOperation.accumulate"
    ],
    "numpy.lib.polynomial.poly1d.__call__": [
        "numpy.lib.polynomial.poly1d.coeffs",
        "numpy.lib.polynomial.polyval"
    ],
    "numpy.lib.polynomial.poly1d.__neg__": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__mul__": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.polymul",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__rmul__": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.polymul",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__add__": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d.coeffs",
        "numpy.lib.polynomial.polyadd"
    ],
    "numpy.lib.polynomial.poly1d.__radd__": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d.coeffs",
        "numpy.lib.polynomial.polyadd"
    ],
    "numpy.lib.polynomial.poly1d.__pow__": [
        "numpy.int",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.polymul",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__sub__": [
        "numpy.lib.polynomial.polysub",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__rsub__": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.polysub",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__div__": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.polydiv",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__rdiv__": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.polydiv",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__eq__": [
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.all",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.polynomial.poly1d.__ne__": [
        "numpy.lib.polynomial.poly1d.__eq__"
    ],
    "numpy.lib.polynomial.poly1d.__getitem__": [
        "numpy.lib.polynomial.poly1d.coeffs",
        "numpy.lib.polynomial.poly1d.order"
    ],
    "numpy.lib.polynomial.poly1d.__setitem__": [
        "numpy.lib.polynomial.poly1d.order",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.__iter__": [
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.integ": [
        "numpy.lib.polynomial.polyint",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d.coeffs"
    ],
    "numpy.lib.polynomial.poly1d.deriv": [
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.lib.polynomial.poly1d.coeffs",
        "numpy.lib.polynomial.polyder"
    ],
    "numpy.lib.npyio.loads": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.lib.npyio.BagObj.__getattribute__": [
        "numpy.ma.__getattribute__",
        "numpy.core.records.recarray.__getattribute__",
        "numpy.ma.mrecords.MaskedRecords.__getattribute__",
        "numpy.core.records.record.__getattribute__",
        "numpy.__getattribute__",
        "numpy.lib.npyio.BagObj.__getattribute__"
    ],
    "numpy.lib.npyio.BagObj.__dir__": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "numpy.lib.npyio.zipfile_factory": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.lib.npyio.NpzFile.__init__": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.npyio.BagObj",
        "numpy.lib.npyio.zipfile_factory",
        "numpy.lib.npyio.BagObj.__init__",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.npyio.NpzFile.__exit__": [
        "numpy.lib.npyio.NpzFile.close"
    ],
    "numpy.lib.npyio.NpzFile.close": [
        "numpy.lib.npyio.zipfile_factory"
    ],
    "numpy.lib.npyio.NpzFile.__del__": [
        "numpy.lib.npyio.NpzFile.close"
    ],
    "numpy.lib.npyio.NpzFile.__getitem__": [
        "numpy.lib.format.read_array"
    ],
    "numpy.lib.npyio.NpzFile.iterkeys": [
        "numpy.lib.npyio.NpzFile.__iter__"
    ],
    "numpy.lib.npyio.NpzFile.__contains__": [
        "numpy.lib.npyio.NpzFile.__contains__"
    ],
    "numpy.lib.npyio.load": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.lib.format.read_array",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.lib.format.open_memmap",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.lib.npyio.NpzFile",
        "numpy.lib.npyio.NpzFile.__init__",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.lib.npyio.save": [
        "numpy.core.defchararray.chararray.endswith",
        "numpy.asanyarray",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.format.write_array",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.lib.npyio.savez": [
        "numpy.lib.npyio._savez",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.lib.npyio.savez_compressed": [
        "numpy.lib.npyio._savez",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.lib.npyio._savez": [
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.split",
        "numpy.asanyarray",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.npyio.zipfile_factory",
        "numpy.lib._datasource.open",
        "numpy.lib._iotools._is_string_like",
        "numpy.lib.format.write_array",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.lib.npyio._getconv": [
        "numpy.unicode_",
        "numpy.longdouble",
        "numpy.int64",
        "numpy.bytes_",
        "numpy.bool_",
        "numpy.uint64",
        "numpy.lib.npyio._getconv.floatconv"
    ],
    "numpy.lib.npyio.loadtxt": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.dtype",
        "numpy.lib.npyio._getconv",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib.npyio.loadtxt.flatten_dtype_internal",
        "numpy.array",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.lib.npyio.loadtxt.split_line",
        "numpy.squeeze",
        "numpy.atleast_1d",
        "numpy.lib.npyio.loadtxt.read_data",
        "npy_tempita.compat3.next",
        "numpy.lib.npyio.loadtxt.tobytes_first",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib._datasource.open",
        "numpy.lib._iotools._decode_line",
        "numpy.lib._iotools._is_string_like"
    ],
    "numpy.lib.npyio.loadtxt.flatten_dtype_internal": [
        "numpy.int",
        "numpy.lib.npyio.loadtxt.flatten_dtype_internal",
        "numpy.prod"
    ],
    "numpy.lib.npyio.loadtxt.pack_items": [
        "numpy.ma.append",
        "numpy.lib.npyio.loadtxt.pack_items",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.npyio.loadtxt.split_line": [
        "numpy.lib._iotools._decode_line"
    ],
    "numpy.lib.npyio.loadtxt.read_data": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.ma.append",
        "numpy.lib.npyio.loadtxt.pack_items",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.lib.npyio.loadtxt.split_line",
        "npy_tempita.compat3.next",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.npyio.savetxt": [
        "numpy.core.fromnumeric.shape",
        "numpy.iscomplexobj",
        "numpy.lib._datasource.open",
        "numpy.asarray",
        "numpy.shape",
        "numpy.real",
        "numpy.ma.append",
        "numpy.lib.function_base.append",
        "numpy.lib._iotools._is_string_like",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.lib.type_check.real",
        "numpy.lib.type_check.imag",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write_bytes",
        "numpy.imag",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.npyio.savetxt.WriteWrap.__init__": [
        "numpy.lib.npyio.savetxt.WriteWrap.first_write"
    ],
    "numpy.lib.npyio.savetxt.WriteWrap.write": [
        "numpy.lib.npyio.savetxt.WriteWrap.first_write"
    ],
    "numpy.lib.npyio.savetxt.WriteWrap.first_write": [
        "numpy.lib.npyio.savetxt.WriteWrap.write_normal",
        "numpy.lib.npyio.savetxt.WriteWrap.write_bytes"
    ],
    "numpy.lib.npyio.fromregex": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.lib.npyio.genfromtxt": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._iotools.flatten_dtype",
        "numpy.bytes_",
        "numpy.insert",
        "numpy.lib._iotools.LineSplitter",
        "numpy.lib._iotools.NameValidator",
        "numpy.lib._iotools.StringConverter.upgrade",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib._iotools.StringConverter.iterupgrade",
        "numpy.lib._iotools.StringConverter.update",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.dtype",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.core.defchararray.chararray.index",
        "numpy.lib._iotools.ConverterError",
        "numpy.core.defchararray.strip",
        "numpy.lib._iotools.ConversionWarning",
        "numpy.lib._iotools.ConverterLockError",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.core.max",
        "numpy.lib._iotools.easy_dtype",
        "numpy.issubdtype",
        "numpy.max",
        "numpy.array",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "numpy.char.index",
        "numpy.matrixlib.defmatrix.matrix.max",
        "npy_tempita.compat3.next",
        "numpy.core.defchararray.chararray.strip",
        "npy_tempita._looper.loop_pos.index",
        "numpy.ma.MaskedArray",
        "numpy.core.defchararray.index",
        "numpy.core.getlimits.iinfo.max",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.function_base.insert",
        "numpy.lib._datasource.open",
        "numpy.lib._iotools._decode_line",
        "numpy.lib._iotools._is_string_like",
        "numpy.lib.npyio.genfromtxt.tobytes_first",
        "numpy.lib._iotools.has_nested_fields"
    ],
    "numpy.lib.npyio.genfromtxt.encode_unicode_cols": [
        "numpy.core.defchararray.chararray.encode",
        "numpy.core.defchararray.encode"
    ],
    "numpy.lib.npyio.ndfromtxt": [
        "numpy.lib.npyio.genfromtxt"
    ],
    "numpy.lib.npyio.mafromtxt": [
        "numpy.lib.npyio.genfromtxt"
    ],
    "numpy.lib.npyio.recfromtxt": [
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.ma.mrecords",
        "numpy.lib.npyio.genfromtxt",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.recarray",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.lib.npyio.recfromcsv": [
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.ma.mrecords",
        "numpy.lib.npyio.genfromtxt",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.recarray",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.lib._version.NumpyVersion._compare": [
        "numpy.lib._version.NumpyVersion.__init__",
        "numpy.lib._version.NumpyVersion._compare_version",
        "numpy.lib._version.NumpyVersion._compare_pre_release"
    ],
    "numpy.lib._version.NumpyVersion.__lt__": [
        "numpy.lib._version.NumpyVersion._compare"
    ],
    "numpy.lib._version.NumpyVersion.__le__": [
        "numpy.lib._version.NumpyVersion._compare"
    ],
    "numpy.lib._version.NumpyVersion.__eq__": [
        "numpy.lib._version.NumpyVersion._compare"
    ],
    "numpy.lib._version.NumpyVersion.__ne__": [
        "numpy.lib._version.NumpyVersion._compare"
    ],
    "numpy.lib._version.NumpyVersion.__gt__": [
        "numpy.lib._version.NumpyVersion._compare"
    ],
    "numpy.lib._version.NumpyVersion.__ge__": [
        "numpy.lib._version.NumpyVersion._compare"
    ],
    "numpy.lib.nanfunctions._replace_nan": [
        "numpy.object_",
        "numpy.copyto",
        "numpy.isnan",
        "numpy.array"
    ],
    "numpy.lib.nanfunctions._copyto": [
        "numpy.ndarray",
        "numpy.copyto"
    ],
    "numpy.lib.nanfunctions._remove_nan_1d": [
        "numpy.isnan",
        "numpy.nonzero"
    ],
    "numpy.lib.nanfunctions._divide_by_count": [
        "numpy.ndarray",
        "numpy.errstate",
        "numpy.divide"
    ],
    "numpy.lib.nanfunctions.nanmin": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.ndarray",
        "numpy.lib.nanfunctions._replace_nan",
        "numpy.object_",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.lib.nanfunctions._copyto",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.amin",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.any",
        "numpy.logical_xor.reduce",
        "numpy.all",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.lib.nanfunctions.nanmax": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.ndarray",
        "numpy.lib.nanfunctions._replace_nan",
        "numpy.object_",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.lib.nanfunctions._copyto",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.amax",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.any",
        "numpy.logical_xor.reduce",
        "numpy.all",
        "numpy.divide.reduce",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.lib.nanfunctions.nanargmin": [
        "numpy.any",
        "numpy.argmin",
        "numpy.all",
        "numpy.lib.nanfunctions._replace_nan"
    ],
    "numpy.lib.nanfunctions.nanargmax": [
        "numpy.argmax",
        "numpy.any",
        "numpy.all",
        "numpy.lib.nanfunctions._replace_nan"
    ],
    "numpy.lib.nanfunctions.nansum": [
        "numpy.sum",
        "numpy.lib.nanfunctions._replace_nan"
    ],
    "numpy.lib.nanfunctions.nanprod": [
        "numpy.lib.nanfunctions._replace_nan",
        "numpy.prod"
    ],
    "numpy.lib.nanfunctions.nancumsum": [
        "numpy.cumsum",
        "numpy.lib.nanfunctions._replace_nan"
    ],
    "numpy.lib.nanfunctions.nancumprod": [
        "numpy.cumprod",
        "numpy.lib.nanfunctions._replace_nan"
    ],
    "numpy.lib.nanfunctions.nanmean": [
        "numpy.lib.nanfunctions._replace_nan",
        "numpy.sum",
        "numpy.lib.nanfunctions._divide_by_count",
        "numpy.mean",
        "numpy.dtype",
        "numpy.intp"
    ],
    "numpy.lib.nanfunctions._nanmedian1d": [
        "numpy.median",
        "numpy.lib.nanfunctions._remove_nan_1d"
    ],
    "numpy.lib.nanfunctions._nanmedian": [
        "numpy.lib.nanfunctions._nanmedian_small",
        "numpy.lib.nanfunctions._nanmedian1d",
        "numpy.apply_along_axis"
    ],
    "numpy.lib.nanfunctions._nanmedian_small": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.extras.median",
        "numpy.ma.median",
        "numpy.median",
        "numpy.ma.core.filled",
        "numpy.ma.masked_array",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.isnan",
        "numpy.ma.core.MaskedArray.filled",
        "numpy.core.fromnumeric.ravel",
        "numpy.lib.function_base.median",
        "numpy.ravel",
        "numpy.count_nonzero"
    ],
    "numpy.lib.nanfunctions.nanmedian": [
        "numpy.lib.nanfunctions._nanmedian",
        "numpy.asanyarray",
        "numpy.nanmean",
        "numpy.lib.function_base._ureduce"
    ],
    "numpy.lib.nanfunctions.nanpercentile": [
        "numpy.true_divide",
        "numpy.asanyarray",
        "numpy.lib.nanfunctions._nanquantile_unchecked",
        "numpy.lib.function_base._quantile_is_valid"
    ],
    "numpy.lib.nanfunctions.nanquantile": [
        "numpy.asanyarray",
        "numpy.lib.nanfunctions._nanquantile_unchecked",
        "numpy.lib.function_base._quantile_is_valid"
    ],
    "numpy.lib.nanfunctions._nanquantile_unchecked": [
        "numpy.nanmean",
        "numpy.lib.function_base._ureduce",
        "numpy.lib.nanfunctions._nanquantile_ureduce_func"
    ],
    "numpy.lib.nanfunctions._nanquantile_ureduce_func": [
        "numpy.lib.nanfunctions._nanquantile_1d",
        "numpy.apply_along_axis",
        "numpy.moveaxis"
    ],
    "numpy.lib.nanfunctions._nanquantile_1d": [
        "numpy.lib.function_base._quantile_unchecked",
        "numpy.lib.nanfunctions._remove_nan_1d",
        "numpy.full"
    ],
    "numpy.lib.nanfunctions.nanvar": [
        "numpy.matrix",
        "numpy.lib.type_check.real",
        "numpy.real",
        "numpy.lib.nanfunctions._replace_nan",
        "numpy.lib.nanfunctions._copyto",
        "numpy.sum",
        "numpy.lib.nanfunctions._divide_by_count",
        "numpy.multiply",
        "numpy.subtract",
        "numpy.any",
        "numpy.var",
        "numpy.dtype",
        "numpy.intp"
    ],
    "numpy.lib.nanfunctions.nanstd": [
        "numpy.sqrt",
        "numpy.lib.nanfunctions.nanvar",
        "numpy.ndarray"
    ],
    "numpy.lib.histograms._hist_bin_sqrt": [
        "numpy.sqrt"
    ],
    "numpy.lib.histograms._hist_bin_sturges": [
        "numpy.log2"
    ],
    "numpy.lib.histograms._hist_bin_scott": [
        "numpy.std"
    ],
    "numpy.lib.histograms._hist_bin_doane": [
        "numpy.sqrt",
        "numpy.mean",
        "numpy.power",
        "numpy.true_divide",
        "numpy.std",
        "numpy.absolute",
        "numpy.log2"
    ],
    "numpy.lib.histograms._hist_bin_fd": [
        "numpy.percentile",
        "numpy.subtract"
    ],
    "numpy.lib.histograms._hist_bin_auto": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.min",
        "numpy.lib.histograms._hist_bin_sturges",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.lib.histograms._hist_bin_fd",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.lib.histograms._ravel_and_check_weights": [
        "numpy.asarray"
    ],
    "numpy.lib.histograms._get_outer_edges": [
        "numpy.isfinite"
    ],
    "numpy.lib.histograms._get_bin_edges": [
        "numpy.logical_or.reduce",
        "numpy.minimum.reduce",
        "numpy.fmin.reduce",
        "numpy.int",
        "numpy.logical_and.reduce",
        "numpy.maximum.reduce",
        "numpy.lib.histograms._get_outer_edges",
        "numpy.linspace",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.lcm.reduce",
        "numpy.result_type",
        "numpy.lib.histograms._hist_bin_sturges",
        "numpy.multiply.reduce",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.any",
        "numpy.logical_xor.reduce",
        "numpy.asarray",
        "numpy.ndim",
        "numpy.ceil",
        "numpy.issubdtype",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.divide.reduce",
        "numpy.power.reduce",
        "numpy.fmax.reduce"
    ],
    "numpy.lib.histograms._search_sorted_inclusive": [
        "numpy.concatenate"
    ],
    "numpy.lib.histograms.histogram_bin_edges": [
        "numpy.lib.histograms._ravel_and_check_weights",
        "numpy.lib.histograms._get_bin_edges"
    ],
    "numpy.lib.histograms.histogram": [
        "numpy.lib.user_array.container.astype",
        "numpy.bincount",
        "numpy.lib.histograms._ravel_and_check_weights",
        "numpy.fmin.reduce",
        "numpy.lib.histograms._search_sorted_inclusive",
        "numpy.maximum.reduce",
        "numpy.lib.histograms._get_bin_edges",
        "numpy.logical_xor.reduce",
        "numpy.dtype",
        "numpy.multiply.reduce",
        "numpy.ndarray.sum",
        "numpy.sort",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.intp",
        "numpy.array",
        "numpy.core.fromnumeric.sum",
        "numpy.diff",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.ma.sum",
        "numpy.argsort",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.double",
        "numpy.minimum.reduce",
        "numpy.sum",
        "numpy.can_cast",
        "numpy.lcm.reduce",
        "numpy.zeros",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.fmax.reduce",
        "numpy.concatenate",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.lib.histograms.histogramdd": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.core.fromnumeric.sum",
        "numpy.core.fromnumeric.any",
        "numpy.ones",
        "numpy.sum",
        "numpy.bincount",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.shape",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.ma.sum",
        "numpy.empty",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.linspace",
        "numpy.int",
        "numpy.ravel_multi_index",
        "numpy.ma.core.reshape",
        "numpy.ndim",
        "numpy.ma.core.shape",
        "numpy.lib.histograms._get_outer_edges",
        "numpy.diff",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.reshape",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.setup.configuration": [
        "numpy.distutils.misc_util.Configuration",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.__init__"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_simple": [
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.linspace",
        "numpy.testing._private.utils.rand",
        "numpy.lib.histograms.histogram",
        "numpy.random.rand",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_one_bin": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.histograms.histogram",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_normed": [
        "numpy.diff",
        "numpy.matlib.rand",
        "numpy.sum",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.lib.histograms.histogram",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_density": [
        "numpy.diff",
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.histogram",
        "numpy.lib.histograms.histogram",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_outliers": [
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.sum",
        "numpy.arange",
        "numpy.ma.sum",
        "numpy.lib.histograms.histogram",
        "numpy.testing.assert_almost_equal",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_type": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.arange",
        "numpy.lib.histograms.histogram",
        "numpy.issubdtype"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_f32_rounding": [
        "numpy.float32",
        "numpy.histogram2d",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_weights": [
        "numpy.zeros",
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.random.rand",
        "numpy.linspace",
        "numpy.ones",
        "numpy.arange",
        "numpy.testing._private.utils.rand",
        "numpy.lib.histograms.histogram",
        "numpy.concatenate",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_exotic_weights": [
        "numpy.lib.histograms.histogram",
        "numpy.array"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_no_side_effects": [
        "numpy.histogram",
        "numpy.array"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_empty": [
        "numpy.array",
        "numpy.lib.histograms.histogram",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_error_binnum_type": [
        "numpy.linspace",
        "numpy.lib.histograms.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_finite_range": [
        "numpy.linspace",
        "numpy.lib.histograms.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_bin_edge_cases": [
        "numpy.testing.assert_",
        "numpy.histogram",
        "numpy.array"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_last_bin_inclusive_range": [
        "numpy.histogram",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_unsigned_monotonicity_check": [
        "numpy.array",
        "numpy.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_object_array_of_0d": [
        "numpy.histogram",
        "numpy.lib.histograms.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_some_nan_values": [
        "numpy.lib.histograms.histogram",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_datetime": [
        "numpy.int",
        "numpy.dtype",
        "numpy.datetime64",
        "numpy.lib.histograms.histogram",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.do_precision_lower_bound": [
        "numpy.histogram",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.do_precision_upper_bound": [
        "numpy.histogram",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.do_precision": [
        "numpy.lib.tests.test_histograms.TestHistogram.do_precision_lower_bound",
        "numpy.lib.tests.test_histograms.TestHistogram.do_precision_upper_bound"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_precision": [
        "numpy.half",
        "numpy.longdouble",
        "numpy.double",
        "numpy.single",
        "numpy.lib.tests.test_histograms.TestHistogram.do_precision"
    ],
    "numpy.lib.tests.test_histograms.TestHistogram.test_histogram_bin_edges": [
        "numpy.lib.histograms.histogram_bin_edges",
        "numpy.array",
        "numpy.lib.histograms.histogram",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_empty": [
        "numpy.array",
        "numpy.lib.histograms.histogram",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple": [
        "numpy.testing.assert_equal",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.linspace",
        "numpy.histogram",
        "numpy.concatenate"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_small": [
        "numpy.testing.assert_equal",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.arange",
        "numpy.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_incorrect_methods": [
        "numpy.lib.histograms.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_novariance": [
        "numpy.testing.assert_equal",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.histogram",
        "numpy.ones"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_limited_variance": [
        "numpy.linspace",
        "numpy.ones",
        "numpy.lib.histograms.histogram_bin_edges",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_outlier": [
        "numpy.hstack",
        "numpy.testing.assert_equal",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.linspace",
        "numpy.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple_range": [
        "numpy.hstack",
        "numpy.testing.assert_equal",
        "numpy.lib.npyio.NpzFile.items",
        "numpy.linspace",
        "numpy.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramOptimBinNums.test_simple_weighted": [
        "numpy.lib.histograms.histogram"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_simple": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.arange",
        "numpy.all",
        "numpy.lib.histograms.histogramdd"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_shape_3d": [
        "numpy.matlib.rand",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.lib.histograms.histogramdd"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_shape_4d": [
        "numpy.matlib.rand",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.lib.histograms.histogramdd"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_weights": [
        "numpy.int",
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.lib.histograms.histogramdd"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_identical_samples": [
        "numpy.int",
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.lib.histograms.histogramdd",
        "numpy.array"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_empty": [
        "numpy.zeros",
        "numpy.lib.histograms.histogramdd",
        "numpy.histogramdd",
        "numpy.array"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_bins_errors": [
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.histogramdd",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_inf_edges": [
        "numpy.errstate",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.histogramdd",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_rightmost_binedge": [
        "numpy.testing.assert_",
        "numpy.lib.histograms.histogramdd",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_finite_range": [
        "numpy.random.random",
        "numpy.lib.histograms.histogramdd"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_equal_edges": [
        "numpy.lib.histograms.histogramdd",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_edge_dtype": [
        "numpy.array",
        "numpy.lib.histograms.histogramdd",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_histograms.TestHistogramdd.test_large_integers": [
        "numpy.int64",
        "numpy.array",
        "numpy.lib.histograms.histogramdd",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_twodim_base.get_mat": [
        "numpy.add.outer",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_twodim_base.TestEye.test_basic": [
        "numpy.eye",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_twodim_base.TestEye.test_diag": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.eye"
    ],
    "numpy.lib.tests.test_twodim_base.TestEye.test_2d": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.eye"
    ],
    "numpy.lib.tests.test_twodim_base.TestEye.test_diag2d": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.eye"
    ],
    "numpy.lib.tests.test_twodim_base.TestEye.test_eye_bounds": [
        "numpy.testing.assert_equal",
        "numpy.eye"
    ],
    "numpy.lib.tests.test_twodim_base.TestEye.test_strings": [
        "numpy.testing.assert_equal",
        "numpy.eye"
    ],
    "numpy.lib.tests.test_twodim_base.TestEye.test_bool": [
        "numpy.eye",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_twodim_base.TestEye.test_order": [
        "numpy.testing.assert_equal",
        "numpy.eye"
    ],
    "numpy.lib.tests.test_twodim_base.TestDiag.test_vector": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.zeros",
        "numpy.diag"
    ],
    "numpy.lib.tests.test_twodim_base.TestDiag.test_matrix": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.zeros",
        "numpy.diag"
    ],
    "numpy.lib.tests.test_twodim_base.TestDiag.test_fortran_order": [
        "numpy.lib.tests.test_twodim_base.TestDiag.test_matrix",
        "numpy.lib.tests.test_twodim_base.get_mat",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.TestDiag.test_diag_bounds": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A",
        "numpy.testing.assert_equal",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A",
        "numpy.core.tests.test_scalarinherit.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.diag",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.lib.tests.test_twodim_base.TestDiag.test_failure": [
        "numpy.diag"
    ],
    "numpy.lib.tests.test_twodim_base.TestFliplr.test_basic": [
        "numpy.lib.tests.test_twodim_base.get_mat",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_twodim_base.TestFlipud.test_basic": [
        "numpy.lib.tests.test_twodim_base.get_mat",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_simple": [
        "numpy.testing.assert_array_equal",
        "numpy.linspace",
        "numpy.histogram2d",
        "numpy.eye",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_asym": [
        "numpy.testing.assert_array_equal",
        "numpy.linspace",
        "numpy.histogram2d",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_norm": [
        "numpy.histogram2d",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_all_outliers": [
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.testing._private.utils.rand",
        "numpy.histogram2d",
        "numpy.random.rand"
    ],
    "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_empty": [
        "numpy.zeros",
        "numpy.histogram2d",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.TestHistogram2d.test_binparameter_combination": [
        "numpy.histogram2d",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_twodim_base.TestTri.test_dtype": [
        "numpy.testing.assert_array_equal",
        "numpy.tri",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.test_tril_triu_ndim2": [
        "numpy.testing.assert_array_equal",
        "numpy.triu",
        "numpy.ones",
        "numpy.tril",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_twodim_base.test_tril_triu_ndim3": [
        "numpy.testing.assert_array_equal",
        "numpy.triu",
        "numpy.tril",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_twodim_base.test_tril_triu_with_inf": [
        "numpy.testing.assert_array_equal",
        "numpy.triu",
        "numpy.tril",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.test_tril_triu_dtype": [
        "numpy.zeros",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_twodim_base.test_mask_indices": [
        "numpy.triu",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_twodim_base.test_tril_indices": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.TestTriuIndices.test_triu_indices": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.TestTrilIndicesFrom.test_exceptions": [
        "numpy.ones"
    ],
    "numpy.lib.tests.test_twodim_base.TestTriuIndicesFrom.test_exceptions": [
        "numpy.ones"
    ],
    "numpy.lib.tests.test_twodim_base.TestVander.test_basic": [
        "numpy.testing.assert_array_equal",
        "numpy.vander",
        "numpy.array"
    ],
    "numpy.lib.tests.test_twodim_base.TestVander.test_dtypes": [
        "numpy.vander",
        "numpy.int8",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_shape_base._add_keepdims": [
        "numpy.lib.tests.test_shape_base._add_keepdims.wrapped"
    ],
    "numpy.lib.tests.test_shape_base._add_keepdims.wrapped": [
        "numpy.expand_dims"
    ],
    "numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_argequivalent": [
        "numpy.random",
        "numpy.lib.tests.test_shape_base._add_keepdims",
        "numpy.lib.shape_base.take_along_axis",
        "numpy.sort",
        "numpy.argmax",
        "numpy.partition",
        "numpy.testing.assert_equal",
        "numpy.argmin",
        "numpy.argsort",
        "numpy.argpartition",
        "numpy.random.rand"
    ],
    "numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_invalid": [
        "numpy.lib.shape_base.take_along_axis",
        "numpy.ones",
        "numpy.AxisError",
        "numpy.intp",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_empty": [
        "numpy.lib.shape_base.take_along_axis",
        "numpy.ones",
        "numpy.intp",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestTakeAlongAxis.test_broadcast": [
        "numpy.lib.shape_base.take_along_axis",
        "numpy.ones",
        "numpy.intp",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestPutAlongAxis.test_replace_max": [
        "numpy.lib.tests.test_shape_base._add_keepdims",
        "numpy.argmax",
        "numpy.testing.assert_equal",
        "numpy.lib.shape_base.put_along_axis",
        "numpy.argmin",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestPutAlongAxis.test_broadcast": [
        "numpy.testing.assert_equal",
        "numpy.lib.shape_base.take_along_axis",
        "numpy.ma.core.reshape",
        "numpy.lib.shape_base.put_along_axis",
        "numpy.ones",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_simple": [
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.testing.assert_array_equal",
        "numpy.ones"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_simple101": [
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.testing.assert_array_equal",
        "numpy.ones"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_3d": [
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_preserve_subclass.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_preserve_subclass": [
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_preserve_subclass.double",
        "numpy.ma.masked.view",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_preserve_subclass.MyNDArray",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass.MinimalSubclass": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass": [
        "numpy.ma.masked.view",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass.MinimalSubclass",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass.minimal_function",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_scalar_array": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_0d_array": [
        "numpy.ma.masked.view",
        "numpy.ndarray",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_0d_array.sum_to_0d",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_0d_array.sum_to_0d": [
        "numpy.sum",
        "numpy.squeeze",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.reshape",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion.f1to2",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion.f1to2": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass_preservation.MinimalSubclass": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass_preservation": [
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_0d_array",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_subclass_preservation.MinimalSubclass",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_scalar_array",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion_ma.f1to2": [
        "numpy.ma.core.masked_where",
        "numpy.ma.masked_where",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion_ma": [
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.ma.masked_array",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.lib.shape_base.apply_along_axis",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_axis_insertion_ma.f1to2",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_tuple_func1d": [
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_tuple_func1d.sample_1d",
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.apply_along_axis"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_empty.never_call": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_empty": [
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_empty.never_call",
        "numpy.ones",
        "numpy.empty",
        "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_empty.empty_to_1",
        "numpy.testing.assert_equal",
        "numpy.apply_along_axis"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_empty.empty_to_1": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyAlongAxis.test_with_iterable_object": [
        "numpy.testing.assert_equal",
        "numpy.ndindex",
        "numpy.array",
        "numpy.apply_along_axis"
    ],
    "numpy.lib.tests.test_shape_base.TestApplyOverAxes.test_simple": [
        "numpy.testing.assert_array_equal",
        "numpy.sum",
        "numpy.ma.core.reshape",
        "numpy.lib.shape_base.apply_over_axes",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_shape_base.TestExpandDims.test_functionality": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.lib.shape_base.expand_dims",
        "numpy.empty",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_shape_base.TestExpandDims.test_deprecations": [
        "numpy.empty",
        "numpy.lib.shape_base.expand_dims"
    ],
    "numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_0_split": [
        "numpy.arange",
        "numpy.lib.shape_base.array_split"
    ],
    "numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split": [
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.arange",
        "numpy.lib.shape_base.array_split",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_rows": [
        "numpy.lib.shape_base.array_split",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.zeros",
        "numpy.array",
        "numpy.lib.tests.test_shape_base.compare_results"
    ],
    "numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_cols": [
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.arange",
        "numpy.lib.shape_base.array_split",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestArraySplit.test_integer_split_2D_default": [
        "numpy.lib.shape_base.array_split",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.zeros",
        "numpy.array",
        "numpy.lib.tests.test_shape_base.compare_results"
    ],
    "numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_simple": [
        "numpy.core.numeric.indices",
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.arange",
        "numpy.lib.shape_base.array_split",
        "numpy.indices"
    ],
    "numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_low_bound": [
        "numpy.core.numeric.indices",
        "numpy.indices",
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.arange",
        "numpy.lib.shape_base.array_split",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestArraySplit.test_index_split_high_bound": [
        "numpy.core.numeric.indices",
        "numpy.indices",
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.arange",
        "numpy.lib.shape_base.array_split",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestSplit.test_equal_split": [
        "numpy.lib.shape_base.split",
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_shape_base.TestSplit.test_unequal_split": [
        "numpy.lib.shape_base.split",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_shape_base.TestColumnStack.test_non_iterable": [
        "numpy.lib.shape_base.column_stack"
    ],
    "numpy.lib.tests.test_shape_base.TestDstack.test_non_iterable": [
        "numpy.lib.shape_base.dstack"
    ],
    "numpy.lib.tests.test_shape_base.TestDstack.test_0D_array": [
        "numpy.lib.shape_base.dstack",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestDstack.test_1D_array": [
        "numpy.lib.shape_base.dstack",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestDstack.test_2D_array": [
        "numpy.lib.shape_base.dstack",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestDstack.test_2D_array2": [
        "numpy.lib.shape_base.dstack",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestHsplit.test_non_iterable": [
        "numpy.lib.shape_base.hsplit"
    ],
    "numpy.lib.tests.test_shape_base.TestHsplit.test_0D_array": [
        "numpy.lib.shape_base.hsplit",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_shape_base.TestHsplit.test_1D_array": [
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.lib.shape_base.hsplit",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestHsplit.test_2D_array": [
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.lib.shape_base.hsplit",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestVsplit.test_non_iterable": [
        "numpy.lib.shape_base.vsplit"
    ],
    "numpy.lib.tests.test_shape_base.TestVsplit.test_0D_array": [
        "numpy.lib.shape_base.vsplit",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestVsplit.test_1D_array": [
        "numpy.lib.shape_base.vsplit",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_shape_base.TestVsplit.test_2D_array": [
        "numpy.lib.shape_base.vsplit",
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestDsplit.test_non_iterable": [
        "numpy.lib.shape_base.dsplit"
    ],
    "numpy.lib.tests.test_shape_base.TestDsplit.test_0D_array": [
        "numpy.lib.shape_base.dsplit",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestDsplit.test_1D_array": [
        "numpy.lib.shape_base.dsplit",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestDsplit.test_2D_array": [
        "numpy.lib.shape_base.dsplit",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_shape_base.TestDsplit.test_3D_array": [
        "numpy.lib.tests.test_shape_base.compare_results",
        "numpy.lib.shape_base.dsplit",
        "numpy.array"
    ],
    "numpy.lib.tests.test_shape_base.TestSqueeze.test_basic": [
        "numpy.squeeze",
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.random.rand",
        "numpy.reshape",
        "numpy.random"
    ],
    "numpy.lib.tests.test_shape_base.TestKron.test_return_type.myarray": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_shape_base.TestKron.test_return_type": [
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.lib.tests.test_shape_base.TestKron.test_return_type.myarray",
        "numpy.ones",
        "numpy.lib.shape_base.kron"
    ],
    "numpy.lib.tests.test_shape_base.TestTile.test_basic": [
        "npy_tempita.compat3.b",
        "numpy.lib.shape_base.tile",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_shape_base.TestTile.test_tile_one_repetition_on_array_gh4679": [
        "numpy.testing.assert_equal",
        "numpy.arange",
        "numpy.lib.shape_base.tile"
    ],
    "numpy.lib.tests.test_shape_base.TestTile.test_empty": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_shape_base.TestTile.test_kroncompare": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.random.randint",
        "numpy.ones",
        "numpy.random",
        "numpy.ma.core.shape",
        "numpy.lib.shape_base.kron",
        "numpy.lib.shape_base.tile"
    ],
    "numpy.lib.tests.test_shape_base.TestMayShareMemory.test_basic": [
        "numpy.may_share_memory",
        "numpy.ones",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_shape_base.compare_results": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test__iotools.TestLineSplitter.test_no_delimiter": [
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.testing.assert_equal",
        "numpy.lib._iotools.LineSplitter"
    ],
    "numpy.lib.tests.test__iotools.TestLineSplitter.test_space_delimiter": [
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.testing.assert_equal",
        "numpy.lib._iotools.LineSplitter"
    ],
    "numpy.lib.tests.test__iotools.TestLineSplitter.test_tab_delimiter": [
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.testing.assert_equal",
        "numpy.lib._iotools.LineSplitter"
    ],
    "numpy.lib.tests.test__iotools.TestLineSplitter.test_other_delimiter": [
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.testing.assert_equal",
        "numpy.lib._iotools.LineSplitter"
    ],
    "numpy.lib.tests.test__iotools.TestLineSplitter.test_constant_fixed_width": [
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.testing.assert_equal",
        "numpy.lib._iotools.LineSplitter"
    ],
    "numpy.lib.tests.test__iotools.TestLineSplitter.test_variable_fixed_width": [
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.testing.assert_equal",
        "numpy.lib._iotools.LineSplitter"
    ],
    "numpy.lib.tests.test__iotools.TestNameValidator.test_case_sensitivity": [
        "numpy.lib._iotools.NameValidator.validate",
        "numpy.lib._iotools.NameValidator",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestNameValidator.test_excludelist": [
        "numpy.lib._iotools.NameValidator.validate",
        "numpy.lib._iotools.NameValidator",
        "numpy.testing.assert_equal",
        "numpy.lib._iotools.NameValidator.__init__"
    ],
    "numpy.lib.tests.test__iotools.TestNameValidator.test_missing_names": [
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.lib._iotools.NameValidator",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestNameValidator.test_validate_nb_names": [
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.lib._iotools.NameValidator",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestNameValidator.test_validate_wo_names": [
        "numpy.testing.assert_",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.lib._iotools.NameValidator",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_creation": [
        "numpy.int",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.lib._iotools.StringConverter",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_upgrade": [
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.lib._iotools.StringConverter.upgrade",
        "numpy.testing.assert_",
        "numpy.lib._iotools.StringConverter"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_missing": [
        "numpy.lib._iotools.StringConverter.upgrade",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.lib._iotools.StringConverter",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_upgrademapper": [
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.lib.tests.test__iotools._bytes_to_date",
        "numpy.lib._iotools.StringConverter.upgrade_mapper",
        "numpy.lib._iotools.StringConverter",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_string_to_object": [
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.testing.assert_",
        "numpy.lib.tests.test__iotools._bytes_to_date",
        "numpy.lib._iotools.StringConverter",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default": [
        "numpy.lib._iotools.StringConverter.upgrade",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.lib._iotools.StringConverter._dtypeortype",
        "numpy.dtype",
        "numpy.lib._iotools.StringConverter",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_keep_default_zero": [
        "numpy.int",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.lib._iotools.StringConverter",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_keep_missing_values": [
        "numpy.int",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.lib._iotools.StringConverter",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_int64_dtype": [
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.testing.assert_",
        "numpy.int64",
        "numpy.lib._iotools.StringConverter"
    ],
    "numpy.lib.tests.test__iotools.TestStringConverter.test_uint64_dtype": [
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.testing.assert_",
        "numpy.lib._iotools.StringConverter",
        "numpy.uint64"
    ],
    "numpy.lib.tests.test__iotools.TestMiscFunctions.test_has_nested_dtype": [
        "numpy.int",
        "numpy.dtype",
        "numpy.lib._iotools.has_nested_fields",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestMiscFunctions.test_easy_dtype": [
        "numpy.int",
        "numpy.lib._iotools.easy_dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__iotools.TestMiscFunctions.test_flatten_dtype": [
        "numpy.int",
        "numpy.lib._iotools.flatten_dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.get_mat": [
        "numpy.ma.core.outer",
        "numpy.add.outer",
        "numpy.multiply.outer",
        "numpy.core.numeric.outer",
        "numpy.ma.core._extrema_operation.outer",
        "numpy.maximum.outer",
        "numpy.arange",
        "numpy.outer",
        "numpy.minimum.outer",
        "numpy.ma.core._MaskedBinaryOperation.outer"
    ],
    "numpy.lib.tests.test_function_base.TestRot90.test_basic": [
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestRot90.test_axes": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ones",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_function_base.TestRot90.test_rotation_axes": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_axes": [
        "numpy.ones",
        "numpy.flip",
        "numpy.AxisError"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_basic_lr": [
        "numpy.flip",
        "numpy.lib.tests.test_function_base.get_mat",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_basic_ud": [
        "numpy.flip",
        "numpy.lib.tests.test_function_base.get_mat",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis0": [
        "numpy.flip",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis1": [
        "numpy.flip",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_3d_swap_axis2": [
        "numpy.flip",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_4d": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.swapaxes",
        "numpy.testing.assert_equal",
        "numpy.flip",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.reshape",
        "numpy.swapaxes"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_default_axis": [
        "numpy.flip",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFlip.test_multiple_axes": [
        "numpy.flip",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestAny.test_basic": [
        "numpy.testing.assert_",
        "numpy.any"
    ],
    "numpy.lib.tests.test_function_base.TestAny.test_nd": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.any",
        "numpy.sometrue"
    ],
    "numpy.lib.tests.test_function_base.TestAll.test_basic": [
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestAll.test_nd": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.alltrue"
    ],
    "numpy.lib.tests.test_function_base.TestCopy.test_basic": [
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.copy",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestCopy.test_order": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.copy"
    ],
    "numpy.lib.tests.test_function_base.TestAverage.test_basic": [
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.random.rand",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestAverage.test_weights": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.ndarray.sum",
        "numpy.testing.assert_equal",
        "numpy.result_type",
        "numpy.float64",
        "numpy.core.fromnumeric.sum",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.sum",
        "numpy.sum",
        "numpy.testing.assert_almost_equal",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.lib.tests.test_function_base.TestAverage.test_returned": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestAverage.test_subclasses.subclass": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_function_base.TestAverage.test_subclasses": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.average",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.lib.tests.test_function_base.TestAverage.test_subclasses.subclass"
    ],
    "numpy.lib.tests.test_function_base.TestAverage.test_upcasting": [
        "numpy.dtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestAverage.test_object_dtype": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestSelect": [
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestSelect.test_basic": [
        "numpy.lib.tests.test_function_base.TestSelect._select",
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestSelect.test_broadcasting": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.shape",
        "numpy.array",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestSelect.test_return_dtype": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.complex_",
        "numpy.testing.assert_equal",
        "numpy.isnan",
        "numpy.int8",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestSelect.test_deprecated_empty": [
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestSelect.test_non_bool_deprecation": [
        "numpy.lib.user_array.container.astype",
        "numpy.uint8",
        "numpy.int_",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestSelect.test_many_arguments": [
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestInsert.test_basic": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.float64",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestInsert.test_multidim": [
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.AxisError",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.concatenate"
    ],
    "numpy.lib.tests.test_function_base.TestInsert.test_0d": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestInsert.test_subclass.SubClass": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_function_base.TestInsert.test_subclass": [
        "numpy.lib.tests.test_function_base.TestInsert.test_subclass.SubClass",
        "numpy.ma.masked.view",
        "numpy.insert",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_function_base.TestInsert.test_index_array_copied": [
        "numpy.insert",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestInsert.test_structured_array": [
        "numpy.testing.assert_array_equal",
        "numpy.insert",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestAmax.test_basic": [
        "npy_tempita.compat3.b",
        "numpy.amax",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestAmin.test_basic": [
        "npy_tempita.compat3.b",
        "numpy.amin",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPtp.test_basic": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestCumsum.test_basic": [
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.float32",
        "numpy.testing.assert_array_equal",
        "numpy.cumsum",
        "numpy.uint8",
        "numpy.float64",
        "numpy.complex64",
        "numpy.uint32",
        "numpy.uint16",
        "numpy.complex128",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestProd.test_basic": [
        "numpy.int16",
        "numpy.float32",
        "numpy.int32",
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.complex64",
        "numpy.prod",
        "numpy.uint32",
        "numpy.uint16",
        "numpy.complex128",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestCumprod.test_basic": [
        "numpy.int16",
        "numpy.float32",
        "numpy.int32",
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.cumprod",
        "numpy.complex64",
        "numpy.uint32",
        "numpy.uint16",
        "numpy.complex128",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestDiff.test_basic": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_function_base.TestDiff.test_axis": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.AxisError"
    ],
    "numpy.lib.tests.test_function_base.TestDiff.test_nd": [
        "numpy.random.rand",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestDiff.test_n": [
        "numpy.ndarray",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.int_",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max"
    ],
    "numpy.lib.tests.test_function_base.TestDiff.test_times": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.datetime64"
    ],
    "numpy.lib.tests.test_function_base.TestDiff.test_subclass": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_function_base.TestDelete.setup": [
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestDelete._check_inverse_of_slicing": [
        "numpy.int",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.asarray",
        "numpy.reshape",
        "numpy.intp"
    ],
    "numpy.lib.tests.test_function_base.TestDelete.test_slices": [
        "numpy.lib.tests.test_function_base.TestDelete._check_inverse_of_slicing"
    ],
    "numpy.lib.tests.test_function_base.TestDelete.test_fancy": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.lib.tests.test_function_base.TestDelete._check_inverse_of_slicing",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestDelete.test_single": [
        "numpy.lib.tests.test_function_base.TestDelete._check_inverse_of_slicing"
    ],
    "numpy.lib.tests.test_function_base.TestDelete.test_0d": [
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestDelete.test_subclass.SubClass": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_function_base.TestDelete.test_subclass": [
        "numpy.testing.assert_",
        "numpy.lib.tests.test_function_base.TestDelete.test_subclass.SubClass"
    ],
    "numpy.lib.tests.test_function_base.TestDelete.test_array_order_preserve": [
        "numpy.testing.assert_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_basic": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_args": [
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.array",
        "numpy.ones",
        "numpy.stack",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.cumsum",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_badargs": [
        "numpy.ma.core.reshape",
        "numpy.ones",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.cumsum",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_datetime64": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_masked": [
        "numpy.gradient",
        "numpy.ma.core.array",
        "numpy.arange",
        "numpy.rec.array",
        "numpy.char.array",
        "numpy.testing.assert_equal",
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ma.arange"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_second_order_accurate": [
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.sort",
        "numpy.gradient",
        "numpy.random.random",
        "numpy.all",
        "numpy.random.seed"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_spacing": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.tile",
        "numpy.arange",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_specific_axes": [
        "numpy.testing.assert_array_equal",
        "numpy.AxisError",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_timedelta64": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_inexact_dtypes": [
        "numpy.float16",
        "numpy.float32",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestGradient.test_values": [
        "numpy.arange"
    ],
    "numpy.lib.tests.test_function_base.TestAngle.test_basic": [
        "numpy.sqrt",
        "numpy.arctan",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestTrimZeros.test_basic": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestTrimZeros.test_leading_skip": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestTrimZeros.test_trailing_skip": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestExtins.test_basic": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestExtins.test_place": [
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestExtins.test_both": [
        "numpy.testing.assert_array_equal",
        "numpy.random.rand"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_simple": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_simple.addsubtract",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_scalar": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_scalar.addsubtract",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_large": [
        "numpy.linspace",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_ufunc": [
        "numpy.cos",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_keywords": [
        "numpy.array",
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords.foo",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords2_ticket_2100.foo",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_keywords3_ticket_2100": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords3_ticket_2100.mypolyval",
        "numpy.vectorize",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords4_ticket_2100.f",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_keywords5_ticket_2100.f": [
        "numpy.prod"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_coverage1_ticket_2100.foo",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_assigning_docstring.foo",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156.Foo.bar": [
        "npy_tempita.compat3.b"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156.Foo.bar",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.lib.tests.test_function_base.TestVectorize.test_UnboundMethod_ticket_1156.Foo"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_execution_order_ticket_1487": [
        "numpy.testing.assert_equal",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_string_ticket_1892": [
        "numpy.vectorize",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_cache": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_cache.f",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_otypes": [
        "numpy.vectorize",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_parse_gufunc_signature": [
        "numpy.lib.function_base._parse_gufunc_signature",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_signature_simple": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_simple.addsubtract",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_mean_last.mean",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_signature_center": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_center.center",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_signature_two_outputs": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_signature_outer": [
        "numpy.outer",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_signature_computed_size": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded": [
        "numpy.lib.tests.test_function_base.TestVectorize.test_signature_excluded.foo",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_signature_otypes": [
        "numpy.testing.assert_array_equal",
        "numpy.dtype",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestVectorize.test_size_zero_output": [
        "numpy.int",
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.vectorize"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_forward": [
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_reverse": [
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_random": [
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.all",
        "numpy.random.rand"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_right_basic": [
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_right_open": [
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_right_open_reverse": [
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_right_open_random": [
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.all",
        "numpy.random.rand"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_monotonic": [
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_casting_error": [
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_function_base.TestDigitize.test_return_type": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_function_base.TestUnwrap.test_simple": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.random.rand"
    ],
    "numpy.lib.tests.test_function_base.TestFilterwindows.test_hanning": [
        "numpy.sum",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFilterwindows.test_hamming": [
        "numpy.sum",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFilterwindows.test_bartlett": [
        "numpy.sum",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_function_base.TestFilterwindows.test_blackman": [
        "numpy.sum",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_function_base.TestTrapz.test_simple": [
        "numpy.sqrt",
        "numpy.arange",
        "numpy.exp",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_function_base.TestTrapz.test_ndim": [
        "numpy.ones_like",
        "numpy.ndarray.sum",
        "numpy.linspace",
        "numpy.sum",
        "numpy.ma.sum",
        "numpy.testing.assert_almost_equal",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.lib.tests.test_function_base.TestTrapz.test_masked": [
        "numpy.ma.array",
        "numpy.core.defchararray.array",
        "numpy.arange",
        "numpy.rec.array",
        "numpy.core.records.array",
        "numpy.char.array",
        "numpy.ma.core.array",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestSinc.test_simple": [
        "numpy.testing.assert_",
        "numpy.linspace"
    ],
    "numpy.lib.tests.test_function_base.TestSinc.test_array_like": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_function_base.TestUnique.test_simple": [
        "numpy.all",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_function_base.TestCheckFinite.test_simple": [
        "numpy.lib.function_base.asarray_chkfinite",
        "numpy.lib.asarray_chkfinite"
    ],
    "numpy.lib.tests.test_function_base.TestCheckFinite.test_dtype_order": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.float64",
        "numpy.testing.assert_",
        "numpy.lib.function_base.asarray_chkfinite",
        "numpy.lib.asarray_chkfinite"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef": [
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef.test_non_array": [
        "numpy.testing.assert_almost_equal",
        "numpy.corrcoef"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef.test_simple": [
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef.test_ddof": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef.test_bias": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef.test_complex": [
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef.test_xy": [
        "numpy.array",
        "numpy.corrcoef"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef.test_empty": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestCorrCoef.test_extreme": [
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.array",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_function_base.TestCov": [
        "numpy.ones",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_basic": [
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_complex": [
        "numpy.ones",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_xy": [
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_empty": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_wrong_ddof": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_1D_rowvar": [
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_1D_variance": [
        "numpy.array",
        "numpy.var"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_fweights": [
        "numpy.ones",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_aweights": [
        "numpy.ones",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestCov.test_unit_fweights_and_aweights": [
        "numpy.ones",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.Test_I0.test_simple": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestKaiser.test_simple": [
        "numpy.isfinite",
        "numpy.testing.assert_",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestMsort.test_simple": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestMeshgrid.test_simple": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestMeshgrid.test_single_input": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestMeshgrid.test_no_input": [
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args"
    ],
    "numpy.lib.tests.test_function_base.TestMeshgrid.test_indexing": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_function_base.TestMeshgrid.test_sparse": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestMeshgrid.test_return_type": [
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.meshgrid",
        "numpy.float64"
    ],
    "numpy.lib.tests.test_function_base.TestMeshgrid.test_writeback": [
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.meshgrid"
    ],
    "numpy.lib.tests.test_function_base.TestPiecewise.test_simple": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestPiecewise.test_two_conditions": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPiecewise.test_scalar_domains_three_conditions": [
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPiecewise.test_default": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPiecewise.test_0d": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestPiecewise.test_0d_comparison": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_function_base.TestPiecewise.test_0d_0d_condition": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPiecewise.test_multidimensional_extrafunc": [
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestBincount": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_simple": [
        "numpy.bincount",
        "numpy.ones",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_simple2": [
        "numpy.bincount",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_simple_weight": [
        "numpy.bincount",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_simple_weight2": [
        "numpy.bincount",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_with_minlength": [
        "numpy.bincount",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_smaller_than_maxvalue": [
        "numpy.bincount",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_with_minlength_and_weights": [
        "numpy.bincount",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_empty": [
        "numpy.int",
        "numpy.testing.assert_array_equal",
        "numpy.bincount",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_empty_with_minlength": [
        "numpy.int",
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.bincount",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_with_incorrect_minlength": [
        "numpy.int",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestBincount.test_dtype_reference_leaks": [
        "numpy.bincount",
        "numpy.double",
        "numpy.dtype",
        "numpy.intp",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestInterp.test_basic": [
        "numpy.linspace",
        "numpy.testing.assert_almost_equal",
        "numpy.interp"
    ],
    "numpy.lib.tests.test_function_base.TestInterp.test_right_left_behavior": [
        "numpy.double",
        "numpy.ones",
        "numpy.arange",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestInterp.test_scalar_interpolation_point": [
        "numpy.float32",
        "numpy.linspace",
        "numpy.float64",
        "numpy.testing.assert_almost_equal",
        "numpy.interp"
    ],
    "numpy.lib.tests.test_function_base.TestInterp.test_complex_interp": [
        "numpy.linspace",
        "numpy.testing.assert_almost_equal",
        "numpy.interp"
    ],
    "numpy.lib.tests.test_function_base.TestInterp.test_zero_dimensional_interpolation_point": [
        "numpy.testing.assert_",
        "numpy.linspace",
        "numpy.float64",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.interp"
    ],
    "numpy.lib.tests.test_function_base.TestInterp.test_if_len_x_is_small": [
        "numpy.sin",
        "numpy.arange",
        "numpy.testing.assert_almost_equal",
        "numpy.interp"
    ],
    "numpy.lib.tests.test_function_base.TestInterp.test_period": [
        "numpy.ma.core.reshape",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_almost_equal",
        "numpy.interp",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.compare_results": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_basic": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.percentile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_api": [
        "numpy.ones",
        "numpy.percentile"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_2D": [
        "numpy.percentile",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_linear": [
        "numpy.percentile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_lower_higher": [
        "numpy.percentile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_midpoint": [
        "numpy.percentile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_nearest": [
        "numpy.percentile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_sequence": [
        "numpy.testing.assert_equal",
        "numpy.percentile",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_axis": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.percentile",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.testing.assert_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_scalar_q": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.percentile",
        "numpy.dtype",
        "numpy.isscalar",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.ma.core.reshape",
        "numpy.empty",
        "numpy.testing.assert_almost_equal",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_exception": [
        "numpy.percentile"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_list": [
        "numpy.percentile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_out": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.percentile",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.ma.core.reshape",
        "numpy.empty",
        "numpy.zeros",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_empty_dim": [
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_no_overwrite": [
        "numpy.percentile",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_no_p_overwrite": [
        "numpy.ma.mrecords.MaskedRecords.tolist",
        "numpy.testing.assert_array_equal",
        "numpy.linspace",
        "numpy.arange",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.percentile",
        "numpy.matrixlib.defmatrix.matrix.tolist"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_percentile_overwrite": [
        "numpy.percentile",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_extended_axis": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.percentile",
        "numpy.ravel",
        "numpy.random.normal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.random.shuffle",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ravel",
        "numpy.matrixlib.defmatrix.matrix.flatten",
        "numpy.ma.copy",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.moveaxis",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.dstack",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_extended_axis_invalid": [
        "numpy.ones",
        "numpy.AxisError",
        "numpy.percentile"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_keepdims": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ones",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_out": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.percentile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_out_nan": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.percentile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestPercentile.test_nan_behavior": [
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.percentile",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestQuantile.test_basic": [
        "numpy.quantile",
        "numpy.testing.assert_equal",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_function_base.TestQuantile.test_no_p_overwrite": [
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.quantile",
        "numpy.array"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_basic": [
        "numpy.median",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.testing.assert_almost_equal",
        "numpy.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_axis_keyword": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.median",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.random.randint",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_overwrite_keyword": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.median",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.random.shuffle",
        "numpy.core.fromnumeric.ravel",
        "numpy.array",
        "numpy.ma.copy",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_array_like": [
        "numpy.median",
        "numpy.testing.assert_almost_equal",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_subclass": [
        "numpy.median",
        "numpy.lib.tests.test_function_base.TestMedian.test_subclass.MySubClass",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_out": [
        "numpy.median",
        "numpy.zeros",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_out_nan": [
        "numpy.median",
        "numpy.zeros",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_nan_behavior": [
        "numpy.median",
        "numpy.arange",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_empty": [
        "numpy.median",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_object": [
        "numpy.median",
        "numpy.testing.assert_",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_extended_axis": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.median",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.core.fromnumeric.reshape",
        "numpy.ravel",
        "numpy.random.normal",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.random.shuffle",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.ravel",
        "numpy.matrixlib.defmatrix.matrix.flatten",
        "numpy.ma.copy",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.moveaxis",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.dstack",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.lib.user_array.container.copy",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_extended_axis_invalid": [
        "numpy.median",
        "numpy.ones",
        "numpy.AxisError"
    ],
    "numpy.lib.tests.test_function_base.TestMedian.test_keepdims": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ones",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc.test_ufunc_arg": [
        "numpy.add"
    ],
    "numpy.lib.tests.test_function_base.TestAdd_newdoc_ufunc.test_string_arg": [
        "numpy.add"
    ],
    "numpy.lib.tests.test_function_base.TestAdd_newdoc": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.lib.tests.test_function_base.TestAdd_newdoc.test_add_doc": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.setup": [
        "numpy.int",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_zip_descr": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.lib.recfunctions.zip_descr",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_drop_fields": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.drop_fields",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_rename_fields": [
        "numpy.lib.recfunctions.rename_fields",
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.lib.recfunctions.get_names"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_names_flat": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.lib.recfunctions.get_names_flat"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_get_fieldstructure": [
        "numpy.int",
        "numpy.lib.recfunctions.get_fieldstructure",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates": [
        "numpy.int",
        "numpy.lib.recfunctions.find_duplicates",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecFunctions.test_find_duplicates_ignoremask": [
        "numpy.ma.masked.view",
        "numpy.int",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.recfunctions.find_duplicates",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_simple_flexible": [
        "numpy.int",
        "numpy.zeros",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.recursive_fill_fields",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestRecursiveFillFields.test_masked_flexible": [
        "numpy.int",
        "numpy.ma.zeros",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.recursive_fill_fields",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.setup": [
        "numpy.int",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo": [
        "numpy.int",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_solo_w_flatten": [
        "numpy.int",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_standard": [
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.int",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.core.fromnumeric.ravel",
        "numpy.ravel",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten": [
        "numpy.int",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_flatten_wflexible": [
        "numpy.int",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_wmasked_arrays": [
        "numpy.int",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.mrecords.MaskedRecords",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_singlefield": [
        "numpy.ma.masked.view",
        "numpy.int",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_w_shorter_flex": [
        "numpy.ma.masked.view",
        "numpy.int",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestMergeArrays.test_singlerecord": [
        "numpy.int",
        "numpy.lib.recfunctions.merge_arrays",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestAppendFields.setup": [
        "numpy.int",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_single": [
        "numpy.int",
        "numpy.lib.recfunctions.append_fields",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_double": [
        "numpy.int",
        "numpy.lib.recfunctions.append_fields",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_flex": [
        "numpy.int",
        "numpy.lib.recfunctions.append_fields",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestAppendFields.test_append_on_nested": [
        "numpy.int",
        "numpy.lib.recfunctions.append_fields",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.setup": [
        "numpy.int",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.test_solo": [
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_fields": [
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.test_unnamed_and_named_fields": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.test_matching_named_fields": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.test_defaults": [
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.test_autoconversion": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.test_checktitles": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestStackArrays.test_subdtype": [
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.lib.recfunctions.stack_arrays",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.setup": [
        "numpy.int",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_inner_join": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_join": [
        "numpy.int",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_join_subdtype": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.MaskedArray",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_outer_join": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.lib.recfunctions.join_by",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_leftouter_join": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.lib.recfunctions.join_by",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_different_field_order": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.join_by"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_duplicate_keys": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.lib.recfunctions.join_by"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes_key": [
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_same_name_different_dtypes": [
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_subarray_key": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy.test_padded_dtype": [
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.dtype",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy2.setup": [
        "numpy.int",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r1postfix": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_postfix": [
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy2.test_no_r2postfix": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.recfunctions.join_by",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestJoinBy2.test_two_keys_two_vars": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.tile",
        "numpy.arange",
        "numpy.lib.recfunctions.join_by",
        "numpy.repeat",
        "numpy.array"
    ],
    "numpy.lib.tests.test_recfunctions.TestAppendFieldsObj.test_append_to_objects": [
        "numpy.int",
        "numpy.lib.recfunctions.append_fields",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_mixins.ArrayLike": [
        "numpy.lib.mixins.NDArrayOperatorsMixin",
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_mixins.ArrayLike.__init__": [
        "numpy.asarray"
    ],
    "numpy.lib.tests.test_mixins.ArrayLike.__array_ufunc__": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ],
    "numpy.lib.tests.test_mixins.ArrayLike.__repr__": [
        "numpy.asarray"
    ],
    "numpy.lib.tests.test_mixins.wrap_array_like": [
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__"
    ],
    "numpy.lib.tests.test_mixins._assert_equal_type_and_value": [
        "numpy.testing.assert_equal",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_array_like_add.check": [
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_array_like_add": [
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.array",
        "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_array_like_add.check"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_inplace": [
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.array",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out": [
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_opt_out.OptOut",
        "numpy.lib.tests.test_mixins.ArrayLike"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_subclass.SubArrayLike": [
        "numpy.lib.tests.test_mixins.ArrayLike"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_subclass": [
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_subclass.SubArrayLike",
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_object": [
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_unary_methods": [
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.abs",
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value",
        "numpy.array"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_forward_binary_methods": [
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.lib.tests.test_mixins.wrap_array_like",
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value",
        "numpy.array"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_reflected_binary_methods": [
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.lib.tests.test_mixins.wrap_array_like",
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_at": [
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.equal.at",
        "numpy.testing.assert_",
        "numpy.multiply.at",
        "numpy.invert.at",
        "numpy.power.at",
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value",
        "numpy.add.at",
        "numpy.array",
        "numpy.negative.at"
    ],
    "numpy.lib.tests.test_mixins.TestNDArrayOperatorsMixin.test_ufunc_two_outputs": [
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "numpy.frexp",
        "numpy.lib.tests.test_mixins.ArrayLike",
        "numpy.lib.tests.test_mixins._assert_equal_type_and_value",
        "numpy.array"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_rate": [
        "numpy.rate",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_rate_decimal": [
        "numpy.rate",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_irr": [
        "numpy.irr",
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_pv": [
        "numpy.testing.assert_almost_equal",
        "numpy.pv"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_pv_decimal": [
        "numpy.pv",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_fv": [
        "numpy.fv",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_fv_decimal": [
        "numpy.testing.assert_equal",
        "numpy.fv"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_pmt": [
        "numpy.pmt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_pmt_decimal": [
        "numpy.pmt",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_ppmt": [
        "numpy.ppmt",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_decimal": [
        "numpy.ppmt",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_special_rate": [
        "numpy.ppmt",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_special_rate_decimal.raise_error_because_not_equal": [
        "numpy.ppmt",
        "numpy.ma.core.MaskedArray.round",
        "numpy.round",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_special_rate_decimal": [
        "numpy.ppmt",
        "numpy.lib.tests.test_financial.TestFinancial.test_ppmt_special_rate_decimal.raise_error_because_not_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_ipmt": [
        "numpy.testing.assert_almost_equal",
        "numpy.ipmt"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_ipmt_decimal": [
        "numpy.testing.assert_equal",
        "numpy.ipmt"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_nper": [
        "numpy.nper",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_nper2": [
        "numpy.nper",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_npv": [
        "numpy.testing.assert_almost_equal",
        "numpy.npv"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_npv_decimal": [
        "numpy.npv",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_mirr": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.mirr",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_mirr_decimal": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.mirr",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_when": [
        "numpy.nper",
        "numpy.pmt",
        "numpy.ppmt",
        "numpy.pv",
        "numpy.ipmt",
        "numpy.rate",
        "numpy.fv",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_decimal_with_when": [
        "numpy.rate",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.testing.assert_equal",
        "numpy.pv",
        "numpy.fv",
        "numpy.pmt",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.ppmt"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_broadcast": [
        "numpy.nper",
        "numpy.ppmt",
        "numpy.ipmt",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_financial.TestFinancial.test_broadcast_decimal": [
        "numpy.ppmt",
        "numpy.ipmt",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_ufunclike.TestUfunclike.test_isposinf": [
        "numpy.lib.ufunclike.isposinf",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_ufunclike.TestUfunclike.test_isneginf": [
        "numpy.lib.ufunclike.isneginf",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix": [
        "numpy.lib.ufunclike.fix",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_ufunclike.TestUfunclike.test_fix_with_subclass.MyArray",
        "numpy.lib.ufunclike.fix",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_ufunclike.TestUfunclike.test_deprecated": [
        "numpy.lib.ufunclike.isneginf",
        "numpy.lib.ufunclike.isposinf",
        "numpy.lib.ufunclike.fix"
    ],
    "numpy.lib.tests.test_ufunclike.TestUfunclike.test_scalar": [
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.isposinf",
        "numpy.fix",
        "numpy.array",
        "numpy.float64"
    ],
    "numpy.lib.tests.test_packbits.test_packbits": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_equal",
        "numpy.uint8",
        "numpy.array",
        "numpy.packbits"
    ],
    "numpy.lib.tests.test_packbits.test_packbits_empty": [
        "numpy.testing.assert_equal",
        "numpy.uint8",
        "numpy.empty",
        "numpy.packbits"
    ],
    "numpy.lib.tests.test_packbits.test_packbits_empty_with_axis": [
        "numpy.testing.assert_equal",
        "numpy.uint8",
        "numpy.empty",
        "numpy.packbits"
    ],
    "numpy.lib.tests.test_packbits.test_packbits_large": [
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.packbits",
        "numpy.unpackbits",
        "numpy.random.randint",
        "numpy.array",
        "numpy.min",
        "numpy.copy",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.core.min",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.astype",
        "numpy.lib.function_base.copy",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.uint8",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.lib.user_array.container.copy"
    ],
    "numpy.lib.tests.test_packbits.test_packbits_very_large": [
        "numpy.ones",
        "numpy.packbits"
    ],
    "numpy.lib.tests.test_packbits.test_unpackbits": [
        "numpy.unpackbits",
        "numpy.testing.assert_array_equal",
        "numpy.uint8",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_packbits.test_unpackbits_empty": [
        "numpy.unpackbits",
        "numpy.testing.assert_array_equal",
        "numpy.uint8",
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_packbits.test_unpackbits_empty_with_axis": [
        "numpy.unpackbits",
        "numpy.uint8",
        "numpy.empty",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_packbits.test_unpackbits_large": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.tile",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.uint8",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.packbits",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.unpackbits",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_poly1d": [
        "numpy.poly1d",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_cov_parameters": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.random.random",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.testing.assert_array_equal",
        "numpy.ma.masked.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.cov",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.True_.copy"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_mem_digitize": [
        "numpy.digitize"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_unique_zero_sized": [
        "numpy.unique",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_mem_vectorise": [
        "numpy.zeros",
        "numpy.vectorize"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_mgrid_single_element": [
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize": [
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.vectorize"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_poly1d_nan_roots": [
        "numpy.poly1d",
        "numpy.linalg.linalg.LinAlgError"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_mem_polymul": [
        "numpy.polymul"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_mem_string_concat": [
        "numpy.append",
        "numpy.array"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_poly_div": [
        "numpy.testing.assert_equal",
        "numpy.poly1d",
        "numpy.polydiv"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_poly_eq": [
        "numpy.poly1d",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_polyfit_build": [
        "numpy.polyfit",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_polydiv_type": [
        "numpy.int",
        "numpy.polydiv",
        "numpy.testing.assert_",
        "numpy.ones"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_histogramdd_too_many_bins": [
        "numpy.ones",
        "numpy.histogramdd"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_polyint_type": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.int"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_ndenumerate_crash": [
        "numpy.ndenumerate",
        "numpy.array"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_asfarray_none": [
        "numpy.asfarray",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing": [
        "numpy.int",
        "numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing.dp",
        "numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing.dp2"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing.dp": [
        "numpy.int",
        "numpy.ones",
        "numpy.ix_",
        "numpy.random.randint"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_large_fancy_indexing.dp2": [
        "numpy.int",
        "numpy.ones",
        "numpy.ix_",
        "numpy.random.randint"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_void_coercion": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_",
        "numpy.zeros"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_who_with_0dim_array": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.who",
        "numpy.array"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_include_dirs": [
        "numpy.testing.assert_",
        "numpy.get_include"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_polyder_return_type": [
        "numpy.testing.assert_",
        "numpy.polyder",
        "numpy.poly1d",
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_append_fields_dtype_list": [
        "numpy.lib.user_array.container.astype",
        "numpy.lib.recfunctions",
        "numpy.lib.recfunctions.append_fields",
        "numpy.int32",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_loadtxt_fields_subarrays": [
        "numpy.testing.assert_equal",
        "numpy.loadtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_nansum_with_boolean": [
        "numpy.zeros",
        "numpy.nansum"
    ],
    "numpy.lib.tests.test_regression.TestRegression.test_py3_compat": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_regression.TestRegression.test_py3_compat.C",
        "numpy.info",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpy.lib.tests.test_io.RoundtripTest": [
        "numpy.testing._private.decorators.skipif",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.lib.tests.test_io.RoundtripTest.roundtrip": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.load",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "numpy.lib.npyio.NpzFile"
    ],
    "numpy.lib.tests.test_io.RoundtripTest.check_roundtrips": [
        "numpy.lib.tests.test_io.RoundtripTest.roundtrip",
        "numpy.asfortranarray"
    ],
    "numpy.lib.tests.test_io.RoundtripTest.test_array": [
        "numpy.int",
        "numpy.csingle",
        "numpy.cdouble",
        "numpy.array",
        "numpy.lib.tests.test_io.RoundtripTest.check_roundtrips"
    ],
    "numpy.lib.tests.test_io.RoundtripTest.test_array_object": [
        "numpy.array",
        "numpy.lib.tests.test_io.RoundtripTest.check_roundtrips"
    ],
    "numpy.lib.tests.test_io.RoundtripTest.test_1D": [
        "numpy.int",
        "numpy.lib.tests.test_io.RoundtripTest.roundtrip",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.RoundtripTest.test_mmap": [
        "numpy.lib.tests.test_io.RoundtripTest.roundtrip",
        "numpy.asfortranarray",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.RoundtripTest.test_record": [
        "numpy.array",
        "numpy.lib.tests.test_io.RoundtripTest.check_roundtrips"
    ],
    "numpy.lib.tests.test_io.RoundtripTest.test_format_2_0": [
        "numpy.ones",
        "numpy.lib.tests.test_io.RoundtripTest.check_roundtrips"
    ],
    "numpy.lib.tests.test_io.TestSaveLoad": [
        "numpy.lib.tests.test_io.RoundtripTest"
    ],
    "numpy.lib.tests.test_io.TestSaveLoad.roundtrip": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.save",
        "numpy.load",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.RoundtripTest.roundtrip"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad": [
        "numpy.testing._private.decorators.skipif",
        "numpy.lib.tests.test_io.RoundtripTest",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.roundtrip": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap_and_prepare_out.StoreArrayPrepareWrap.args",
        "numpy.load",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.RoundtripTest.roundtrip",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.savez"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_big_arrays": [
        "numpy.load",
        "numpy.uint8",
        "numpy.savez",
        "numpy.empty"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_multiple_arrays": [
        "numpy.lib.tests.test_io.TestSavezLoad.roundtrip",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_named_arrays": [
        "numpy.load",
        "numpy.ma.testutils.assert_equal",
        "numpy.savez",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_BagObj": [
        "numpy.load",
        "numpy.ma.testutils.assert_equal",
        "numpy.savez",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_savez_filename_clashes.writer": [
        "numpy.matlib.randn",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err",
        "numpy.savez",
        "numpy.random.randn"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_savez_filename_clashes": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.char.join"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_not_closing_opened_fid": [
        "numpy.testing.assert_",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.load",
        "numpy.savez"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_closing_fid": [
        "numpy.load",
        "numpy.savez"
    ],
    "numpy.lib.tests.test_io.TestSavezLoad.test_closing_zipfile_after_load": [
        "numpy.load",
        "numpy.testing.assert_",
        "numpy.savez"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_array": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_1D": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_0D_3D": [
        "numpy.array",
        "numpy.savetxt"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_record": [
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_delimiter": [
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_format": [
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_header_footer": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.lib.tests.test_io.TestSaveTxt.test_header_footer",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_file_roundtrip": [
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_complex_arrays": [
        "numpy.zeros",
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.complex128"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_complex_negative_exponent": [
        "numpy.zeros",
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.complex128"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer": [
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_unicode": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.core.defchararray.join",
        "numpy.savetxt",
        "numpy.char.join",
        "numpy.core.defchararray.decode",
        "numpy.core.defchararray.chararray.join",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_unicode_roundtrip": [
        "numpy.loadtxt",
        "numpy.core.defchararray.join",
        "numpy.savetxt",
        "numpy.core.defchararray.chararray.decode",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append",
        "numpy.core.defchararray.decode"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_unicode_bytestream": [
        "numpy.core.defchararray.decode",
        "numpy.core.defchararray.chararray.decode",
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestSaveTxt.test_unicode_stringstream": [
        "numpy.core.defchararray.decode",
        "numpy.core.defchararray.chararray.decode",
        "numpy.ma.testutils.assert_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.LoadTxtBase": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.lib.tests.test_io.LoadTxtBase.check_compressed": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_io.LoadTxtBase.test_compressed_gzip": [
        "numpy.lib.tests.test_io.LoadTxtBase.check_compressed"
    ],
    "numpy.lib.tests.test_io.LoadTxtBase.test_encoding": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.lib.tests.test_io.LoadTxtBase.test_stringload": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.core.defchararray.chararray.encode",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.core.defchararray.decode",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.core.defchararray.encode"
    ],
    "numpy.lib.tests.test_io.LoadTxtBase.test_binary_decode": [
        "numpy.core.defchararray.split",
        "numpy.lib.shape_base.split",
        "numpy.testing.assert_array_equal",
        "numpy.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.LoadTxtBase.test_converters_decode": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.core.defchararray.decode",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.LoadTxtBase.test_converters_nodecode": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.decode",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt": [
        "numpy.testing._private.decorators.skipif",
        "numpy.loadtxt",
        "numpy.lib.tests.test_io.LoadTxtBase"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_record": [
        "numpy.int32",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_array": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_1D": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_missing": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_converters_with_usecols": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_comments_unicode": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_comments_byte": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_comments_multiple": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_comments_multi_chars": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_skiprows": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_usecols": [
        "numpy.int64",
        "numpy.loadtxt",
        "numpy.savetxt",
        "numpy.uint32",
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.uint8",
        "numpy.testing.assert_array_equal",
        "numpy.uint16",
        "numpy.uint64",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.int",
        "numpy.lib.tests.test_io.TestLoadTxt.test_usecols.CrazyInt"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_fancy_dtype": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.dtype",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_shaped_dtype": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.dtype",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_3d_shaped_dtype": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.dtype",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_str_dtype": [
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.bytes_",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_empty_file": [
        "numpy.loadtxt",
        "numpy.int64",
        "numpy.ma.testutils.assert_equal",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_unused_converter": [
        "numpy.lib.tests.test_io.TextIO.writelines",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_dtype_with_object": [
        "numpy.lib.mixins._unary_method.func",
        "numpy.int",
        "numpy.lib.function_base.vectorize.__call__.func",
        "numpy.loadtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.mixins._binary_method.func",
        "numpy.lib.ufunclike._deprecate_out_named_y.func",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.mixins._reflected_binary_method.func",
        "numpy.lib.mixins._inplace_binary_method.func",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_uint64_type": [
        "numpy.loadtxt",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.uint64"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_int64_type": [
        "numpy.loadtxt",
        "numpy.int64",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_from_float_hex": [
        "numpy.lib.user_array.container.astype",
        "numpy.float32",
        "numpy.loadtxt",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_from_complex": [
        "numpy.loadtxt",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_complex_misformatted": [
        "numpy.zeros",
        "numpy.loadtxt",
        "numpy.testing.assert_",
        "numpy.savetxt",
        "numpy.ma.testutils.assert_equal",
        "numpy.complex128"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_universal_newline": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.loadtxt",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_empty_field_after_tab": [
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_structure_unpack": [
        "numpy.loadtxt",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_ndmin_keyword": [
        "numpy.loadtxt",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.int",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source": [
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.lib.tests.test_io.TestLoadTxt.test_generator_source.count"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_bad_line": [
        "numpy.loadtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_none_as_string": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.dtype",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write"
    ],
    "numpy.lib.tests.test_io.TestLoadTxt.test_binary_load": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.core.defchararray.splitlines",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.loadtxt",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.chararray.splitlines",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.Testfromregex.test_record": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.float64",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.fromregex",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.Testfromregex.test_record_2": [
        "numpy.int32",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.fromregex",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.Testfromregex.test_record_3": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.float64",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.fromregex",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.Testfromregex.test_record_unicode": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.core.defchararray.decode",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.float64",
        "numpy.fromregex",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.Testfromregex.test_compiled_bytes": [
        "numpy.testing.assert_array_equal",
        "numpy.float64",
        "numpy.fromregex",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt": [
        "numpy.lib.tests.test_io.LoadTxtBase",
        "numpy.genfromtxt"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_record": [
        "numpy.int32",
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_array": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_1D": [
        "numpy.int",
        "numpy.testing.assert_array_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_comments": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_skiprows": [
        "numpy.int",
        "numpy.loadtxt",
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_skip_footer": [
        "numpy.genfromtxt",
        "numpy.ma.testutils.assert_equal",
        "numpy.ma.append",
        "numpy.array",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_skip_footer_with_invalid": [
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib._iotools.ConversionWarning",
        "numpy.genfromtxt"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_header": [
        "numpy.testing.assert_",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype": [
        "numpy.testing.assert_",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_uniform": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.dtype",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_names_overwrite": [
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_commented_header": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_names_and_comments_none": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_autonames_and_usecols": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_converters_with_usecols_and_names": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.object_",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_converters_cornercases2": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_unused_converter": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_invalid_converter": [
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib._iotools.ConverterError",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_tricky_converter_bug1666": [
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_converters_and_usecols": [
        "numpy.int",
        "numpy.ma.core.array",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.recfromcsv",
        "numpy.rec.array",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.char.array",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.core.defchararray.array",
        "numpy.core.records.array",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_dtype_with_object": [
        "numpy.lib.mixins._unary_method.func",
        "numpy.int",
        "numpy.lib.function_base.vectorize.__call__.func",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.mixins._binary_method.func",
        "numpy.lib.ufunclike._deprecate_out_named_y.func",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.mixins._reflected_binary_method.func",
        "numpy.lib.mixins._inplace_binary_method.func",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_userconverters_with_explicit_dtype": [
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_utf8_userconverters_with_explicit_dtype": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.core.defchararray.decode",
        "numpy.ma.testutils.assert_equal",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_spacedelimiter": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_integer_delimiter": [
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_missing": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_missing_with_tabs": [
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_usecols": [
        "numpy.ma.testutils.assert_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_usecols_as_css": [
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_structured_dtype": [
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_integer": [
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_usecols_with_named_columns": [
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_empty_file": [
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array",
        "numpy.genfromtxt"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_fancy_dtype_alt": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.dtype",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.mafromtxt",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_shaped_dtype": [
        "numpy.int",
        "numpy.testing.assert_array_equal",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.dtype",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_withmissing": [
        "numpy.int",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.mafromtxt",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_user_missing_values": [
        "numpy.int",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.mafromtxt",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_user_filling_values": [
        "numpy.int",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_withmissing_float": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.mafromtxt",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_uniform": [
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_with_masked_column_various": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.ma.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise": [
        "numpy.lib.function_base.insert",
        "numpy.insert",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f",
        "numpy.ndfromtxt",
        "numpy.lib._iotools.ConversionWarning",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.ones",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise.f": [
        "numpy.lib.tests.test_io.TextIO",
        "numpy.ndfromtxt"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols": [
        "numpy.lib.function_base.insert",
        "numpy.insert",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f",
        "numpy.lib._iotools.ConversionWarning",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.ones",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_invalid_raise_with_usecols.f": [
        "numpy.lib.tests.test_io.TextIO",
        "numpy.ndfromtxt"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_inconsistent_dtype": [
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_default_field_format": [
        "numpy.int",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_wo_names": [
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_explicit_names": [
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_single_dtype_w_implicit_names": [
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_easy_structured_dtype": [
        "numpy.int",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_autostrip": [
        "numpy.testing.assert_",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_replace_space": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_replace_space_known_dtype": [
        "numpy.int",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_incomplete_names": [
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_names_auto_completion": [
        "numpy.int",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_names_with_usecols_bug1636": [
        "numpy.int",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_fixed_width_names": [
        "numpy.int",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_filling_values": [
        "numpy.int",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_comments_is_none": [
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy._globals.VisibleDeprecationWarning"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_latin1": [
        "numpy.linalg.norm",
        "numpy.core.defchararray.chararray.decode",
        "numpy.testing.assert_",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.core.defchararray.decode",
        "numpy.ma.testutils.assert_equal",
        "numpy.linalg.linalg.norm",
        "numpy._globals.VisibleDeprecationWarning"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_binary_decode_autodtype": [
        "numpy.core.defchararray.split",
        "numpy.lib.shape_base.split",
        "numpy.testing.assert_array_equal",
        "numpy.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_utf8_byte_encoding": [
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.linalg.norm",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.linalg.linalg.norm",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_utf8_file": [
        "numpy.core.defchararray.chararray.decode",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_array_equal",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.core.defchararray.decode",
        "numpy.ma.testutils.assert_equal",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_utf8_file_nodtype_unicode": [
        "numpy.core.defchararray.chararray.encode",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.genfromtxt",
        "numpy.core.defchararray.encode",
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_recfromtxt": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.recfromtxt",
        "numpy.ma.array",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.recarray",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_recfromcsv": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.recarray",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.recfromcsv",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_max_rows": [
        "numpy.lib._iotools.ConversionWarning",
        "numpy.genfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_filename": [
        "numpy.genfromtxt",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.ma.core.reshape",
        "numpy.lib._datasource.open",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_gft_from_gzip": [
        "numpy.genfromtxt",
        "numpy.core.fromnumeric.reshape",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.ma.core.reshape",
        "numpy.lib._datasource.open",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator": [
        "numpy.genfromtxt",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.lib.tests.test_io.TestFromTxt.test_gft_using_generator.count"
    ],
    "numpy.lib.tests.test_io.TestFromTxt.test_auto_dtype_largeint": [
        "numpy.testing.assert_",
        "numpy.int64",
        "numpy.ndfromtxt",
        "numpy.lib.tests.test_io.TextIO",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_loadtxt": [
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal",
        "numpy.savetxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_save_load": [
        "numpy.int",
        "numpy.testing.assert_array_equal",
        "numpy.load",
        "numpy.array",
        "numpy.save"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_savez_load": [
        "numpy.testing.assert_array_equal",
        "numpy.load",
        "numpy.savez"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_savez_compressed_load": [
        "numpy.testing.assert_array_equal",
        "numpy.load",
        "numpy.savez_compressed"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_genfromtxt": [
        "numpy.testing.assert_array_equal",
        "numpy.savetxt",
        "numpy.genfromtxt",
        "numpy.array"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_ndfromtxt": [
        "numpy.int",
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.ndfromtxt"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_mafromtxt": [
        "numpy.mafromtxt",
        "numpy.ma.array",
        "numpy.ma.testutils.assert_equal"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_recfromtxt": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.recfromtxt",
        "numpy.recarray"
    ],
    "numpy.lib.tests.test_io.TestPathUsage.test_recfromcsv": [
        "numpy.int",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_equal",
        "numpy.array",
        "numpy.recfromcsv",
        "numpy.recarray"
    ],
    "numpy.lib.tests.test_io.test_gzip_load": [
        "numpy.testing.assert_array_equal",
        "numpy.load",
        "numpy.random.random",
        "numpy.save"
    ],
    "numpy.lib.tests.test_io.test_gzip_loadtxt": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.loadtxt",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "numpy.lib.tests.test_io.test_gzip_loadtxt_from_string": [
        "numpy.loadtxt",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_io.test_npzfile_dict": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.load",
        "numpy.ma.testutils.assert_equal",
        "numpy.savez"
    ],
    "numpy.lib.tests.test_io.test_load_refcount": [
        "numpy.load",
        "numpy.savez"
    ],
    "numpy.lib.tests.test_utils.test_lookfor": [
        "numpy.testing.assert_",
        "numpy.lib.utils.lookfor"
    ],
    "numpy.lib.tests.test_utils.test_deprecate_decorator": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_utils.test_deprecate_decorator_message": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_utils.test_deprecate_fn": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_utils.test_safe_eval_nameconstant": [
        "numpy.lib.utils.safe_eval"
    ],
    "numpy.lib.tests.test_utils.test_byte_bounds": [
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.assert_equal",
        "numpy.lib.utils.byte_bounds",
        "numpy.core.fromnumeric.size",
        "numpy.ma.core.reshape",
        "numpy.size",
        "numpy.reshape",
        "numpy.ma.core.size",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_intersect1d": [
        "numpy.lib.arraysetops.intersect1d",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_setxor1d": [
        "numpy.lib.arraysetops.setxor1d",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_ediff1d": [
        "numpy.lib.arraysetops.ediff1d",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_isin._isin_slow": [
        "numpy.matrixlib.defmatrix.matrix.tolist",
        "numpy.ma.core.MaskedArray.tolist",
        "numpy.ma.mrecords.MaskedRecords.tolist"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_isin": [
        "numpy.ma.core.reshape",
        "numpy.lib.tests.test_arraysetops.TestSetOps.test_isin._isin_slow",
        "numpy.lib.tests.test_arraysetops.TestSetOps.test_isin.assert_isin_equal",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.vectorize",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_isin.assert_isin_equal": [
        "numpy.lib.arraysetops.isin",
        "numpy.vectorize",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d": [
        "numpy.testing.assert_array_equal",
        "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication.mult",
        "numpy.lib.arraysetops.in1d",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_char_array": [
        "numpy.lib.arraysetops.in1d",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_invert": [
        "numpy.invert",
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.core.tests.test_indexing.TestFloatNonIntegerArgument.test_non_integer_sequence_multiplication.mult",
        "numpy.lib.arraysetops.in1d"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_ravel": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.lib.arraysetops.in1d",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_first_array_is_object": [
        "numpy.array",
        "numpy.in1d",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_second_array_is_object": [
        "numpy.array",
        "numpy.in1d",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_both_arrays_are_object": [
        "numpy.array",
        "numpy.in1d",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_in1d_both_arrays_have_structured_dtype": [
        "numpy.int",
        "numpy.testing.assert_array_equal",
        "numpy.dtype",
        "numpy.in1d",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_union1d": [
        "numpy.lib.arraysetops.union1d",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.arange",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.uint32",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.lib.arraysetops.setdiff1d",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_setdiff1d_char_array": [
        "numpy.lib.arraysetops.setdiff1d",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestSetOps.test_manyways": [
        "numpy.lib.arraysetops.setxor1d",
        "numpy.lib.arraysetops.union1d",
        "numpy.testing.assert_array_equal",
        "numpy.lib.arraysetops.intersect1d",
        "numpy.lib.arraysetops.setdiff1d",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d.check_all": [
        "numpy.lib.arraysetops.unique",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d": [
        "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_1d.check_all",
        "numpy.chararray",
        "numpy.lib.arraysetops.unique",
        "numpy.linalg.inv",
        "numpy.testing.assert_equal",
        "npy_tempita.compat3.b",
        "numpy.multiply",
        "numpy.ma.append",
        "numpy.intp",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.append",
        "numpy.unique",
        "numpy.lib.function_base.append",
        "numpy.empty",
        "numpy.zeros",
        "numpy.linalg.linalg.inv",
        "numpy.ma.core.append"
    ],
    "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_errors": [
        "numpy.int",
        "numpy.lib.arraysetops.unique",
        "numpy.AxisError",
        "numpy.arange",
        "numpy.lib.tests.test_arraysetops.TestUnique._run_axis_tests"
    ],
    "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis_list": [
        "numpy.lib.arraysetops.unique",
        "numpy.testing.assert_array_equal",
        "numpy.asarray"
    ],
    "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_axis": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.tests.test_arraysetops.TestUnique._run_axis_tests",
        "numpy.lib.arraysetops.unique",
        "numpy.ma.masked.view",
        "numpy.ma.append",
        "numpy.array",
        "numpy.testing.assert_array_equal",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.append",
        "numpy.int",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_masked": [
        "numpy.ma.core.masked_equal",
        "numpy.testing.assert_array_equal",
        "numpy.unique",
        "numpy.ma.masked_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraysetops.TestUnique.test_unique_sort_order_with_axis": [
        "numpy.testing.assert_array_equal",
        "numpy.unique",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraysetops.TestUnique._run_axis_tests": [
        "numpy.lib.arraysetops.unique",
        "numpy.lib.user_array.container.astype",
        "numpy.dstack",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test__datasource.urlopen_stub": [
        "numpy.lib.tests.test__datasource.valid_httpurl"
    ],
    "numpy.lib.tests.test__datasource.setup": [
        "numpy.lib.tests.test__datasource.urlopen_stub"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceOpen.setup": [
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib._datasource.DataSource"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidHTTP": [
        "numpy.lib.tests.test__datasource.valid_httpurl",
        "numpy.lib._datasource.DataSource.open",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTP": [
        "numpy.testing.assert_",
        "numpy.lib.tests.test__datasource.invalid_httpurl",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidHTTPCacheURLError": [
        "numpy.lib._datasource.DataSource._cache",
        "numpy.lib.tests.test__datasource.invalid_httpurl"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidFile": [
        "numpy.testing.assert_",
        "numpy.lib.tests.test__datasource.valid_textfile",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_InvalidFile": [
        "numpy.lib.tests.test__datasource.invalid_textfile",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidGzipFile": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.testing.assert_equal",
        "numpy.char.join",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceOpen.test_ValidBz2File": [
        "numpy.core.defchararray.chararray.join",
        "numpy.core.defchararray.join",
        "numpy.testing.assert_equal",
        "numpy.char.join",
        "numpy.lib._datasource.DataSource.open"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceExists.setup": [
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib._datasource.DataSource"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidHTTP": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib.tests.test__datasource.valid_httpurl",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidHTTP": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib.tests.test__datasource.invalid_httpurl",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceExists.test_ValidFile": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.testing.assert_",
        "numpy.lib.tests.test__datasource.valid_textfile"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceExists.test_InvalidFile": [
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib.tests.test__datasource.invalid_textfile",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceAbspath.setup": [
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.lib._datasource.DataSource"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceAbspath.teardown": [
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidHTTP": [
        "numpy.lib.tests.test__datasource.valid_httpurl",
        "numpy.testing.assert_equal",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.strip",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidFile": [
        "numpy.lib.tests.test__datasource.valid_textfile",
        "numpy.core.defchararray.split",
        "numpy.testing.assert_equal",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidHTTP": [
        "numpy.lib.tests.test__datasource.valid_httpurl",
        "numpy.lib.tests.test__datasource.invalid_httpurl",
        "numpy.testing.assert_",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.strip",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidFile": [
        "numpy.lib.tests.test__datasource.valid_textfile",
        "numpy.core.defchararray.split",
        "numpy.lib.shape_base.split",
        "numpy.testing.assert_",
        "numpy.split",
        "numpy.core.defchararray.chararray.split",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_sandboxing": [
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.startswith",
        "numpy.testing.assert_",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.lib.tests.test__datasource.valid_textfile",
        "numpy.lib.shape_base.split",
        "numpy.split"
    ],
    "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_windows_os_sep": [
        "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_sandboxing",
        "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidHTTP",
        "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_ValidFile",
        "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidHTTP",
        "numpy.lib.tests.test__datasource.TestDataSourceAbspath.test_InvalidFile"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryAbspath.setup": [
        "numpy.lib._datasource.Repository",
        "numpy.lib._datasource.DataSource.abspath",
        "numpy.lib._datasource.Repository.__init__",
        "numpy.lib.tests.test__datasource.valid_baseurl"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryAbspath.teardown": [
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_ValidHTTP": [
        "numpy.lib.tests.test__datasource.valid_httpurl",
        "numpy.testing.assert_equal",
        "numpy.core.defchararray.strip",
        "numpy.lib.tests.test__datasource.valid_httpfile",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib._datasource.Repository.abspath",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_sandboxing": [
        "numpy.testing.assert_",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.lib._datasource.DataSource.abspath"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_windows_os_sep": [
        "numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_sandboxing",
        "numpy.lib.tests.test__datasource.TestRepositoryAbspath.test_ValidHTTP"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryExists.setup": [
        "numpy.lib._datasource.Repository",
        "numpy.lib.tests.test__datasource.valid_baseurl",
        "numpy.lib._datasource.Repository.__init__"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryExists.test_ValidFile": [
        "numpy.lib.tests.test__datasource.valid_textfile",
        "numpy.testing.assert_",
        "numpy.lib._datasource.Repository.exists"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryExists.test_InvalidFile": [
        "numpy.lib.tests.test__datasource.invalid_textfile",
        "numpy.lib._datasource.Repository.exists",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryExists.test_RemoveHTTPFile": [
        "numpy.lib._datasource.Repository.exists",
        "numpy.lib.tests.test__datasource.valid_httpurl",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__datasource.TestRepositoryExists.test_CachedHTTPFile": [
        "numpy.core.defchararray.chararray.join",
        "numpy.testing.assert_",
        "numpy.core.defchararray.join",
        "numpy.lib._datasource.Repository.exists",
        "numpy.lib.tests.test__datasource.valid_httpurl",
        "numpy.lib.tests.test__datasource.valid_textfile",
        "numpy.char.join"
    ],
    "numpy.lib.tests.test__datasource.TestOpenFunc.test_DataSourceOpen": [
        "numpy.lib._datasource.open",
        "numpy.testing.assert_",
        "numpy.lib.tests.test__datasource.valid_textfile"
    ],
    "numpy.lib.tests.test_format.teardown_module": [
        "numpy.testing._private.utils.tempdir"
    ],
    "numpy.lib.tests.test_format.BytesIOSRandomSize.read": [
        "numpy.random.randint"
    ],
    "numpy.lib.tests.test_format.roundtrip": [
        "numpy.lib.format.read_array",
        "numpy.lib.format.write_array"
    ],
    "numpy.lib.tests.test_format.roundtrip_randsize": [
        "numpy.lib.tests.test_format.BytesIOSRandomSize",
        "numpy.lib.format.read_array",
        "numpy.lib.format.write_array"
    ],
    "numpy.lib.tests.test_format.roundtrip_truncated": [
        "numpy.lib.format.read_array",
        "numpy.lib.format.write_array"
    ],
    "numpy.lib.tests.test_format.assert_equal_": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_format.test_roundtrip": [
        "numpy.lib.tests.test_format.roundtrip",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_format.test_roundtrip_randsize": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.tests.test_format.roundtrip_randsize",
        "numpy.array"
    ],
    "numpy.lib.tests.test_format.test_roundtrip_truncated": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.lib.tests.test_format.roundtrip_truncated"
    ],
    "numpy.lib.tests.test_format.test_long_str": [
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.lib.tests.test_format.roundtrip",
        "numpy.dtype"
    ],
    "numpy.lib.tests.test_format.test_memmap_roundtrip": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib.tests.test_format.assert_equal_",
        "numpy.lib.format.open_memmap",
        "numpy.testing._private.utils.tempdir",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.lib.format.write_array",
        "numpy.array"
    ],
    "numpy.lib.tests.test_format.test_compressed_roundtrip": [
        "numpy.core.defchararray.chararray.join",
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.load",
        "numpy.core.defchararray.join",
        "numpy.testing._private.utils.rand",
        "numpy.char.join",
        "numpy.savez_compressed",
        "numpy.random.rand",
        "numpy.testing._private.utils.tempdir"
    ],
    "numpy.lib.tests.test_format.test_python2_python3_interoperability": [
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.join",
        "numpy.load",
        "numpy.ones",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.lib.tests.test_format.test_pickle_python2_python3": [
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.encode",
        "numpy.core.defchararray.chararray.endswith",
        "numpy.core.defchararray.startswith",
        "numpy.load",
        "numpy.core.defchararray.chararray.join",
        "numpy.random.bytes",
        "numpy.array",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.char.join",
        "numpy.core.defchararray.encode",
        "numpy.core.defchararray.endswith"
    ],
    "numpy.lib.tests.test_format.test_pickle_disallow": [
        "numpy.testing._private.utils.tempdir",
        "numpy.save",
        "numpy.load",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.array"
    ],
    "numpy.lib.tests.test_format.test_version_2_0": [
        "numpy.lib.format.read_array",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.lib.format.write_array"
    ],
    "numpy.lib.tests.test_format.test_version_2_0_memmap": [
        "numpy.lib.format.open_memmap",
        "numpy.testing._private.utils.tempdir",
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ones"
    ],
    "numpy.lib.tests.test_format.test_write_version": [
        "numpy.arange",
        "numpy.lib.format.write_array"
    ],
    "numpy.lib.tests.test_format.test_read_magic": [
        "numpy.lib.format.read_magic",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.lib.format.write_array"
    ],
    "numpy.lib.tests.test_format.test_read_magic_bad_magic": [
        "numpy.lib.format.read_array"
    ],
    "numpy.lib.tests.test_format.test_read_version_1_0_bad_magic": [
        "numpy.lib.format.read_array"
    ],
    "numpy.lib.tests.test_format.test_bad_magic_args": [
        "numpy.lib.format.magic"
    ],
    "numpy.lib.tests.test_format.test_large_header": [
        "numpy.lib.format.write_array_header_1_0"
    ],
    "numpy.lib.tests.test_format.test_read_array_header_1_0": [
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.lib.format.write_array",
        "numpy.lib.format.read_array_header_1_0"
    ],
    "numpy.lib.tests.test_format.test_read_array_header_2_0": [
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.lib.format.write_array",
        "numpy.lib.format.read_array_header_2_0"
    ],
    "numpy.lib.tests.test_format.test_bad_header": [
        "numpy.lib.format.write_array_header_1_0",
        "numpy.lib.format.read_array_header_1_0"
    ],
    "numpy.lib.tests.test_format.test_large_file_support": [
        "numpy.testing._private.utils.tempdir",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.save",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.load",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join"
    ],
    "numpy.lib.tests.test_format.test_large_archive": [
        "numpy.uint8",
        "numpy.testing._private.utils.tempdir",
        "numpy.testing.assert_",
        "numpy.empty",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.load",
        "numpy.core.defchararray.join",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.savez"
    ],
    "numpy.lib.tests.test_type_check.assert_all": [
        "numpy.all",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestCommonType.test_basic": [
        "numpy.csingle",
        "numpy.int32",
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.cdouble",
        "numpy.float64",
        "numpy.float16",
        "numpy.lib.type_check.common_type",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestMintypecode.test_default_1": [
        "numpy.lib.type_check.mintypecode",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_type_check.TestMintypecode.test_default_2": [
        "numpy.lib.type_check.mintypecode",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_type_check.TestMintypecode.test_default_3": [
        "numpy.lib.type_check.mintypecode",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_type_check.TestIsscalar.test_basic": [
        "numpy.isscalar",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestReal.test_real": [
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.testing._private.utils.rand",
        "numpy.real",
        "numpy.ndarray",
        "numpy.random.rand",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_type_check.TestReal.test_cmplx": [
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.testing._private.utils.rand",
        "numpy.real",
        "numpy.ndarray",
        "numpy.random.rand",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_type_check.TestImag.test_real": [
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.testing._private.utils.rand",
        "numpy.imag",
        "numpy.ndarray",
        "numpy.random.rand",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_type_check.TestImag.test_cmplx": [
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.testing._private.utils.rand",
        "numpy.imag",
        "numpy.ndarray",
        "numpy.random.rand",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplex.test_fail": [
        "numpy.lib.type_check.iscomplex",
        "numpy.sometrue",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplex.test_pass": [
        "numpy.lib.type_check.iscomplex",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_type_check.TestIsreal.test_pass": [
        "numpy.lib.type_check.isreal",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_type_check.TestIsreal.test_fail": [
        "numpy.lib.type_check.isreal",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_basic": [
        "numpy.lib.type_check.iscomplexobj",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_scalar": [
        "numpy.lib.type_check.iscomplexobj",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_list": [
        "numpy.lib.type_check.iscomplexobj",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype": [
        "numpy.dtype"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck": [
        "numpy.lib.type_check.iscomplexobj",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.PdComplex": [
        "numpy.complex128"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.PdDtype": [
        "numpy.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.PdComplex"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.PdDtype"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd",
        "numpy.lib.type_check.iscomplexobj",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck": [
        "numpy.lib.type_check.iscomplexobj",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray"
    ],
    "numpy.lib.tests.test_type_check.TestIsrealobj.test_basic": [
        "numpy.lib.type_check.isrealobj",
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_type_check.TestIsnan.test_goodvalues": [
        "numpy.isnan",
        "numpy.all",
        "numpy.array",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestIsnan.test_posinf": [
        "numpy.isnan",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsnan.test_neginf": [
        "numpy.isnan",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsnan.test_ind": [
        "numpy.isnan",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsnan.test_integer": [
        "numpy.isnan",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestIsnan.test_complex": [
        "numpy.isnan",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestIsnan.test_complex1": [
        "numpy.isnan",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsfinite.test_goodvalues": [
        "numpy.isfinite",
        "numpy.all",
        "numpy.array",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestIsfinite.test_posinf": [
        "numpy.errstate",
        "numpy.isfinite",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsfinite.test_neginf": [
        "numpy.errstate",
        "numpy.isfinite",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsfinite.test_ind": [
        "numpy.errstate",
        "numpy.isfinite",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsfinite.test_integer": [
        "numpy.isfinite",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestIsfinite.test_complex": [
        "numpy.isfinite",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestIsfinite.test_complex1": [
        "numpy.errstate",
        "numpy.isfinite",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsinf.test_goodvalues": [
        "numpy.isinf",
        "numpy.all",
        "numpy.array",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestIsinf.test_posinf": [
        "numpy.isinf",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsinf.test_posinf_scalar": [
        "numpy.isinf",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsinf.test_neginf": [
        "numpy.isinf",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsinf.test_neginf_scalar": [
        "numpy.isinf",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsinf.test_ind": [
        "numpy.isinf",
        "numpy.errstate",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsposinf.test_generic": [
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestIsneginf.test_generic": [
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.lib.tests.test_type_check.TestNanToNum.test_generic": [
        "numpy.isfinite",
        "numpy.ndarray",
        "numpy.testing.assert_equal",
        "numpy.errstate",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.lib.type_check.nan_to_num",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestNanToNum.test_array": [
        "numpy.ndarray",
        "numpy.int",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.lib.type_check.nan_to_num"
    ],
    "numpy.lib.tests.test_type_check.TestNanToNum.test_integer": [
        "numpy.testing.assert_equal",
        "numpy.int_",
        "numpy.lib.type_check.nan_to_num",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestNanToNum.test_float": [
        "numpy.testing.assert_equal",
        "numpy.lib.type_check.nan_to_num",
        "numpy.float_",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestNanToNum.test_complex_good": [
        "numpy.complex_",
        "numpy.testing.assert_equal",
        "numpy.lib.type_check.nan_to_num",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad": [
        "numpy.isfinite",
        "numpy.testing.assert_equal",
        "numpy.complex_",
        "numpy.errstate",
        "numpy.array",
        "numpy.lib.type_check.nan_to_num",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestNanToNum.test_complex_bad2": [
        "numpy.isfinite",
        "numpy.testing.assert_equal",
        "numpy.complex_",
        "numpy.errstate",
        "numpy.array",
        "numpy.lib.type_check.nan_to_num",
        "numpy.lib.tests.test_type_check.assert_all"
    ],
    "numpy.lib.tests.test_type_check.TestRealIfClose.test_basic": [
        "numpy.matlib.rand",
        "numpy.testing.assert_array_equal",
        "numpy.lib.type_check.real_if_close",
        "numpy.lib.tests.test_type_check.assert_all",
        "numpy.testing._private.utils.rand",
        "numpy.lib.type_check.iscomplexobj",
        "numpy.lib.type_check.isrealobj",
        "numpy.random.rand"
    ],
    "numpy.lib.tests.test_type_check.TestArrayConversion.test_asfarray": [
        "numpy.lib.type_check.asfarray",
        "numpy.testing.assert_",
        "numpy.ndarray",
        "numpy.issubdtype",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_basic": [
        "numpy.unravel_index",
        "numpy.array",
        "numpy.ravel_multi_index",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_big_indices": [
        "numpy.intp",
        "numpy.ravel_multi_index",
        "numpy.testing.assert_equal",
        "numpy.int64",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_dtypes": [
        "numpy.int64",
        "numpy.uint32",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.unravel_index",
        "numpy.int16",
        "numpy.int32",
        "numpy.core.fromnumeric.shape",
        "numpy.array",
        "numpy.uint16",
        "numpy.uint64",
        "numpy.ravel_multi_index",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_clipmodes": [
        "numpy.ravel_multi_index",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_writeability": [
        "numpy.unravel_index",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_index_tricks.TestRavelUnravelIndex.test_0d": [
        "numpy.unravel_index",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestGrid.test_basic": [
        "numpy.testing.assert_almost_equal",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_index_tricks.TestGrid.test_linspace_equivalence": [
        "numpy.linspace",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestGrid.test_nd": [
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ones"
    ],
    "numpy.lib.tests.test_index_tricks.TestConcatenator.test_1d": [
        "numpy.ones",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestConcatenator.test_mixed_type": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_index_tricks.TestConcatenator.test_more_mixed_type": [
        "numpy.array",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_index_tricks.TestConcatenator.test_2d": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.matlib.rand",
        "numpy.core.fromnumeric.shape",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_index_tricks.TestConcatenator.test_0d": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestNdenumerate.test_basic": [
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.lib.index_tricks.ndenumerate",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestIndexExpression.test_regression_1": [
        "numpy.testing.assert_equal",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_index_tricks.TestIndexExpression.test_simple_1": [
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestIx_.test_regression_1": [
        "numpy.ix_",
        "numpy.arange",
        "numpy.intp",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.TestIx_.test_shape_and_dtype": [
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.all",
        "numpy.arange",
        "numpy.shape",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ix_",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.issubdtype",
        "numpy.ma.core.shape",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.all",
        "numpy.matrixlib.defmatrix.matrix.all"
    ],
    "numpy.lib.tests.test_index_tricks.TestIx_.test_bool": [
        "numpy.ix_",
        "numpy.testing.assert_equal",
        "numpy.nonzero"
    ],
    "numpy.lib.tests.test_index_tricks.TestIx_.test_1d_only": [
        "numpy.ix_"
    ],
    "numpy.lib.tests.test_index_tricks.TestIx_.test_repeated_input": [
        "numpy.arange",
        "numpy.lib.index_tricks.ix_",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.test_c_": [
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_basic": [
        "numpy.int",
        "numpy.zeros",
        "numpy.lib.index_tricks.fill_diagonal",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_tall_matrix": [
        "numpy.int",
        "numpy.zeros",
        "numpy.lib.index_tricks.fill_diagonal",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_tall_matrix_wrap": [
        "numpy.int",
        "numpy.zeros",
        "numpy.lib.index_tricks.fill_diagonal",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_wide_matrix": [
        "numpy.int",
        "numpy.zeros",
        "numpy.lib.index_tricks.fill_diagonal",
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_index_tricks.TestFillDiagonal.test_operate_4d_array": [
        "numpy.int",
        "numpy.zeros",
        "numpy.lib.index_tricks.fill_diagonal",
        "numpy.where",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_index_tricks.test_diag_indices": [
        "numpy.int",
        "numpy.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.lib.index_tricks.diag_indices",
        "numpy.array"
    ],
    "numpy.lib.tests.test_index_tricks.test_diag_indices_from": [
        "numpy.lib.index_tricks.diag_indices_from",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.random.random"
    ],
    "numpy.lib.tests.test_index_tricks.test_ndindex": [
        "numpy.lib.index_tricks.ndindex",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test__version.test_main_versions": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__version.test_version_1_point_10": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__version.test_alpha_beta_rc": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__version.test_dev_version": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__version.test_dev_a_b_rc_mixed": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__version.test_dev0_version": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test__version.test_dev0_a_b_rc_mixed": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_poly": [
        "numpy.core.tests.test_umath.TestSpecialMethods.test_gufunc_override.A",
        "numpy.f2py.tests.test_callback.TestF77Callback.check_function.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_out.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_mro.A",
        "numpy.random.randn",
        "numpy.poly",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_with_super.A",
        "numpy.isrealobj",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A",
        "numpy.ma.tests.test_core.TestMaskedArrayFunctions.test_compressed.A",
        "numpy.sqrt",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A",
        "numpy.testing.assert_",
        "numpy.core.tests.test_scalarinherit.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_exception.A",
        "numpy.iscomplexobj",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A",
        "numpy.lib.tests.test_function_base.TestDigitize.test_return_type.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority_with_scalar.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_not_implemented.A",
        "numpy.conjugate",
        "numpy.core.tests.test_multiarray.TestMethods.test_searchsorted_return_type.A",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A",
        "numpy.random.seed",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override_methods.A",
        "numpy.core.tests.test_multiarray.TestMatmulOperator.test_array_priority_override.A",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_ufunc_override.A",
        "numpy.matlib.randn",
        "numpy.concatenate",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_roots": [
        "numpy.testing.assert_array_equal",
        "numpy.roots"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_str_leading_zeros": [
        "numpy.poly1d",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_polyfit": [
        "numpy.testing.assert_almost_equal",
        "numpy.polyfit",
        "numpy.linspace",
        "numpy.core.tests.test_ufunc.TestUfunc.test_reduce_zero_axis.err",
        "numpy.arange",
        "numpy.concatenate",
        "numpy.polyval",
        "numpy.array"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_objects": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.object_",
        "numpy.poly",
        "numpy.testing.assert_equal",
        "numpy.issubdtype",
        "numpy.testing.assert_",
        "numpy.poly1d"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_complex": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.poly1d",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_integ_coeffs": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.poly1d",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_zero_dims": [
        "numpy.zeros",
        "numpy.poly"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_poly_int_overflow": [
        "numpy.diag",
        "numpy.testing.assert_almost_equal",
        "numpy.poly",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_poly_eq": [
        "numpy.poly1d",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_polydiv": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.complex128",
        "numpy.poly1d",
        "numpy.polydiv"
    ],
    "numpy.lib.tests.test_polynomial.TestDocs.test_poly_coeffs_immutable": [
        "numpy.poly1d",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax": [
        "numpy.nanmax",
        "numpy.nanmin"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_mutation": [
        "numpy.nanmax",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_keepdims": [
        "numpy.eye",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.nanmax",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_out": [
        "numpy.zeros",
        "numpy.nanmax",
        "numpy.eye",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_dtype_from_input": [
        "numpy.eye",
        "numpy.testing.assert_",
        "numpy.nanmax"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_result_values": [
        "numpy.nanmax",
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_allnans": [
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.isnan",
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.nanmax",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_masked": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.lib.function_base.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.ma.masked.copy",
        "numpy.True_.copy",
        "numpy.ma.fix_invalid",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.core.fromnumeric.any",
        "numpy.ma.copy",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.nanmin",
        "numpy.ma.core.fix_invalid",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.user_array.container.copy",
        "numpy.copy"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_scalar": [
        "numpy.nanmax",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_subclass.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_subclass": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_subclass.MyNDArray",
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.any",
        "numpy.nanmax",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MinMax.test_object_array": [
        "numpy.testing.assert_",
        "numpy.nanmin",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax": [
        "numpy.nanargmax",
        "numpy.nanargmin"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_mutation": [
        "numpy.nanargmax",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_result_values": [
        "numpy.core.fromnumeric.any",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.less",
        "numpy.isnan",
        "numpy.ma.core.MaskedArray.any",
        "numpy.greater",
        "numpy.any",
        "numpy.nanargmax",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_allnans": [
        "numpy.ma.core.reshape",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.nanargmax",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_empty": [
        "numpy.zeros",
        "numpy.nanargmax",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_scalar": [
        "numpy.nanargmax",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_subclass.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_subclass": [
        "numpy.ma.masked.view",
        "numpy.testing.assert_",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_ArgminArgmax.test_subclass.MyNDArray",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.nanargmax"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes": [
        "numpy.int8",
        "numpy.int16",
        "numpy.int32",
        "numpy.int64",
        "numpy.uint8",
        "numpy.uint32",
        "numpy.uint16",
        "numpy.uint64",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays": [
        "numpy.uint64"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmin": [
        "numpy.nanmin",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmax": [
        "numpy.nanmax",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanargmin": [
        "numpy.argmin",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.nanargmin",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanargmax": [
        "numpy.argmax",
        "numpy.nanargmax",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nansum": [
        "numpy.sum",
        "numpy.nansum",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanprod": [
        "numpy.nanprod",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.prod",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nancumsum": [
        "numpy.cumsum",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.nancumsum"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nancumprod": [
        "numpy.nancumprod",
        "numpy.cumprod",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanmean": [
        "numpy.mean",
        "numpy.nanmean",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanvar": [
        "numpy.var",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.nanvar",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.test_nanstd": [
        "numpy.std",
        "numpy.lib.tests.test_nanfunctions.TestNanFunctions_IntTypes.integer_arrays",
        "numpy.nanstd",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_mutation": [
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_keepdims": [
        "numpy.eye",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_out": [
        "numpy.zeros",
        "numpy.eye",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_dtype": [
        "numpy.eye",
        "numpy.testing.assert_",
        "numpy.nanvar",
        "numpy.nanstd"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_char": [
        "numpy.eye",
        "numpy.testing.assert_",
        "numpy.nanvar",
        "numpy.nanstd"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_dtype_from_input": [
        "numpy.eye",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_result_values": [
        "numpy.testing.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_scalar": [
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_subclass.MyNDArray": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_subclass": [
        "numpy.eye",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin.test_subclass.MyNDArray",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd": [
        "numpy.sum",
        "numpy.nansum",
        "numpy.nanprod",
        "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin",
        "numpy.prod"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_allnans": [
        "numpy.testing.assert_",
        "numpy.nansum"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_SumProd.test_empty": [
        "numpy.zeros",
        "numpy.nansum",
        "numpy.nanprod",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd": [
        "numpy.nancumprod",
        "numpy.cumsum",
        "numpy.cumprod",
        "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin",
        "numpy.nancumsum"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_allnans": [
        "numpy.nancumprod",
        "numpy.array_equal",
        "numpy.testing.assert_",
        "numpy.ones"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_empty": [
        "numpy.zeros",
        "numpy.nancumprod",
        "numpy.ones",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_keepdims": [
        "numpy.eye",
        "numpy.arange",
        "numpy.testing.assert_equal",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.cumprod",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.core.fromnumeric.ndim",
        "numpy.nancumprod",
        "numpy.random.RandomState",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_result_values": [
        "numpy.nancumprod",
        "numpy.array",
        "numpy.cumsum",
        "numpy.cumprod",
        "numpy.testing.assert_almost_equal",
        "numpy.nancumsum"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_CumSumProd.test_out": [
        "numpy.nancumprod",
        "numpy.cumprod",
        "numpy.eye",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd": [
        "numpy.mean",
        "numpy.std",
        "numpy.nanmean",
        "numpy.lib.tests.test_nanfunctions.SharedNanFunctionsTestsMixin",
        "numpy.var",
        "numpy.nanvar",
        "numpy.nanstd"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_dtype_error": [
        "numpy.bool_",
        "numpy.object_",
        "numpy.nanstd",
        "numpy.int_",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_out_dtype_error": [
        "numpy.empty",
        "numpy.bool_",
        "numpy.object_",
        "numpy.nanstd",
        "numpy.int_",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof": [
        "numpy.std",
        "numpy.var",
        "numpy.nanvar",
        "numpy.testing.assert_almost_equal",
        "numpy.nanstd",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_ddof_too_big": [
        "numpy.core.fromnumeric.any",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.isnan",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.std",
        "numpy.var",
        "numpy.nanvar",
        "numpy.nanstd",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_allnans": [
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.isnan",
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.nanstd",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_MeanVarStd.test_empty": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.zeros",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.nanstd"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_mutation": [
        "numpy.nanmedian",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_keepdims": [
        "numpy.nanmedian",
        "numpy.random.random",
        "numpy.eye",
        "numpy.testing.assert_equal",
        "numpy.median",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.ones",
        "numpy.intp"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_out": [
        "numpy.median",
        "numpy.zeros",
        "numpy.matlib.rand",
        "numpy.nanmedian",
        "numpy.testing._private.utils.rand",
        "numpy.insert",
        "numpy.testing.assert_almost_equal",
        "numpy.random.rand"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_small_large": [
        "numpy.nanmedian",
        "numpy.median",
        "numpy.compress",
        "numpy.ravel",
        "numpy.isnan",
        "numpy.core.fromnumeric.ravel",
        "numpy.matlib.randn",
        "numpy.random.randint",
        "numpy.ma.append",
        "numpy.random.randn",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.MaskedArray.ravel",
        "numpy.core.fromnumeric.size",
        "numpy.append",
        "numpy.matrixlib.defmatrix.matrix.ravel",
        "numpy.lib.function_base.append",
        "numpy.size",
        "numpy.ma.core.append",
        "numpy.ma.core.size"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_result_values": [
        "numpy.testing.assert_almost_equal",
        "numpy.nanmedian",
        "numpy.array"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_allnans": [
        "numpy.nanmedian",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.isnan",
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_empty": [
        "numpy.nanmedian",
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.zeros",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_scalar": [
        "numpy.nanmedian",
        "numpy.testing.assert_"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_extended_axis_invalid": [
        "numpy.ones",
        "numpy.nanmedian",
        "numpy.AxisError"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Median.test_float_special": [
        "numpy.float32",
        "numpy.nanmedian",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_mutation": [
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.nanpercentile"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_keepdims": [
        "numpy.random.random",
        "numpy.eye",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.ones",
        "numpy.percentile",
        "numpy.nanpercentile",
        "numpy.intp"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_out": [
        "numpy.zeros",
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.insert",
        "numpy.testing.assert_almost_equal",
        "numpy.percentile",
        "numpy.random.rand",
        "numpy.nanpercentile"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_result_values": [
        "numpy.transpose",
        "numpy.testing.assert_almost_equal",
        "numpy.array",
        "numpy.nanpercentile"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_allnans": [
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.core.fromnumeric.reshape",
        "numpy.nanpercentile",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.isnan",
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.ma.core.reshape",
        "numpy.all",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_empty": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.zeros",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.nanpercentile"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_scalar": [
        "numpy.testing.assert_",
        "numpy.arange",
        "numpy.isscalar",
        "numpy.testing.assert_equal",
        "numpy.nanpercentile"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_extended_axis_invalid": [
        "numpy.ones",
        "numpy.AxisError",
        "numpy.nanpercentile"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Percentile.test_multiple_percentiles": [
        "numpy.percentile",
        "numpy.nanpercentile",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.ones",
        "numpy.ma.core.shape"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_regression": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_equal",
        "numpy.nanquantile",
        "numpy.nanpercentile"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_basic": [
        "numpy.nanquantile",
        "numpy.testing.assert_equal",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_nanfunctions.TestNanFunctions_Quantile.test_no_p_overwrite": [
        "numpy.nanquantile",
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arrayterator.test": [
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__array__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__array__",
        "numpy.core.tests.test_multiarray.TestCreation.test_from_attribute.x.__array__",
        "numpy.lib.polynomial.poly1d.__array__",
        "numpy.ma.tests.test_subclassing.ComplicatedSubArray.flat",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_prepare.A.__array__",
        "numpy.testing.assert_",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_failing_wrap.A.__array__",
        "numpy.arange",
        "numpy.core.tests.test_regression.TestRegression.test_richcompare_crash.Foo.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_none_wrap.A.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.B.__array__",
        "numpy.lib.arrayterator.Arrayterator.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_wrap.with_wrap.__array__",
        "numpy.all",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_array_with_context.C.__array__",
        "numpy.lib.arrayterator.Arrayterator.flat",
        "numpy.lib.user_array.container.__array__",
        "numpy.random.seed",
        "numpy.core.tests.test_indexing.TestIndexing.test_scalar_return_type.ArrayLike.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_old_wrap.with_wrap.__array__",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_default_prepare.with_wrap.__array__",
        "numpy.core.tests.test_deprecations.TestComparisonDeprecations.test_void_dtype_equality_failures.NotArray.__array__",
        "numpy.random.randint",
        "numpy.core.tests.test_umath.TestSpecialMethods.test_priority.A.__array__"
    ],
    "numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_zero_padding_shortcuts": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_shallow_statistic_range": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestConditionalShortcuts.test_clip_statistic_range": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_stat_length": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_1": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_2": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_maximum_stat_length": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_1": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_2": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_minimum_stat_length": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_median": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_01": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_02": [
        "numpy.testing.assert_array_equal",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_median_stat_length": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_shape_one": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestStatistic.test_check_mean_2": [
        "numpy.lib.user_array.container.astype",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_zeros": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float": [
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float2": [
        "numpy.lib.user_array.container.astype",
        "numpy.core.fromnumeric.reshape",
        "numpy.float64",
        "numpy.array",
        "numpy.lib.pad",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_float3": [
        "numpy.lib.pad",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_odd_pad_amount": [
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestConstant.test_check_constant_pad_2d": [
        "numpy.pad",
        "numpy.ma.core.reshape",
        "numpy.lib.arraypad.pad",
        "numpy.array",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestConstant.test_check_large_integers": [
        "numpy.pad",
        "numpy.testing.assert_array_equal",
        "numpy.int64",
        "numpy.full",
        "numpy.uint64"
    ],
    "numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_simple": [
        "numpy.lib.user_array.container.astype",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestLinearRamp.test_check_2d": [
        "numpy.lib.user_array.container.astype",
        "numpy.lib.pad",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestReflect.test_check_simple": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestReflect.test_check_odd_method": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestReflect.test_check_large_pad": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestReflect.test_check_shape": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestReflect.test_check_01": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestReflect.test_check_02": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestReflect.test_check_03": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestReflect.test_check_padding_an_empty_array": [
        "numpy.zeros",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_simple": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_odd_method": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_large_pad": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_large_pad_odd": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_shape": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_01": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_02": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestSymmetric.test_check_03": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestWrap.test_check_simple": [
        "numpy.lib.pad",
        "numpy.array",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestWrap.test_check_large_pad": [
        "numpy.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestWrap.test_check_01": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestWrap.test_check_02": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_arraypad.TestStatLen.test_check_simple": [
        "numpy.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestEdge.test_check_simple": [
        "numpy.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestEdge.test_check_width_shape_1_2": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestZeroPadWidth.test_zero_pad_width": [
        "numpy.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_arraypad.TestLegacyVectorFunction.test_legacy_vector_functionality": [
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.lib.tests.test_arraypad.TestLegacyVectorFunction.test_legacy_vector_functionality._padwithtens",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestNdarrayPadWidth.test_check_simple": [
        "numpy.reshape",
        "numpy.testing.assert_array_equal",
        "numpy.lib.pad",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestUnicodeInput.test_unicode_mode": [
        "numpy.testing.assert_array_equal",
        "numpy.array",
        "numpy.pad"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError1.test_check_simple": [
        "numpy.reshape",
        "numpy.lib.pad",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError1.test_check_negative_stat_length": [
        "numpy.reshape",
        "numpy.lib.pad",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError1.test_check_negative_pad_width": [
        "numpy.reshape",
        "numpy.lib.pad",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError1.test_check_empty_array": [
        "numpy.zeros",
        "numpy.lib.pad",
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError2.test_check_negative_pad_amount": [
        "numpy.reshape",
        "numpy.lib.pad",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError3.test_check_kwarg_not_allowed": [
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError3.test_mode_not_set": [
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError3.test_malformed_pad_amount": [
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError3.test_malformed_pad_amount2": [
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestValueError3.test_pad_too_many_axes": [
        "numpy.ma.core.reshape",
        "numpy.lib.pad",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_arraypad.TestTypeError1.test_float": [
        "numpy.lib.pad",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestTypeError1.test_str": [
        "numpy.lib.pad",
        "numpy.arange",
        "numpy.array"
    ],
    "numpy.lib.tests.test_arraypad.TestTypeError1.test_object": [
        "numpy.lib.tests.test_arraypad.TestTypeError1.test_object.FooBar",
        "numpy.lib.pad",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_arraypad.TestTypeError1.test_complex": [
        "numpy.array",
        "numpy.lib.pad",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_arraypad.TestTypeError1.test_check_wrong_pad_amount": [
        "numpy.reshape",
        "numpy.lib.pad",
        "numpy.arange"
    ],
    "numpy.lib.tests.test_stride_tricks.assert_shapes_correct": [
        "numpy.testing.assert_equal",
        "numpy.lib.stride_tricks.broadcast_arrays"
    ],
    "numpy.lib.tests.test_stride_tricks.assert_incompatible_shapes_raise": [
        "numpy.lib.stride_tricks.broadcast_arrays"
    ],
    "numpy.lib.tests.test_stride_tricks.assert_same_as_ufunc": [
        "numpy.fmin.reduce",
        "numpy.maximum.reduce",
        "numpy.logical_xor.reduce",
        "numpy.core.fromnumeric.reshape",
        "numpy.multiply.reduce",
        "numpy.lib.stride_tricks.broadcast_arrays",
        "numpy.ma.core._extrema_operation.reduce",
        "numpy.logical_or.reduce",
        "numpy.logical_and.reduce",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core._MaskedBinaryOperation.reduce",
        "numpy.power.reduce",
        "numpy.minimum.reduce",
        "numpy.int",
        "numpy.ma.core.reshape",
        "numpy.lcm.reduce",
        "numpy.zeros",
        "numpy.gcd.reduce",
        "numpy.add.reduce",
        "numpy.subtract.reduce",
        "numpy.divide.reduce",
        "numpy.reshape",
        "numpy.fmax.reduce",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_stride_tricks.test_same": [
        "numpy.lib.stride_tricks.broadcast_arrays",
        "numpy.arange",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.lib.tests.test_stride_tricks.test_one_off": [
        "numpy.testing.assert_array_equal",
        "numpy.lib.stride_tricks.broadcast_arrays",
        "numpy.array"
    ],
    "numpy.lib.tests.test_stride_tricks.test_same_input_shapes": [
        "numpy.lib.tests.test_stride_tricks.assert_shapes_correct"
    ],
    "numpy.lib.tests.test_stride_tricks.test_two_compatible_by_ones_input_shapes": [
        "numpy.lib.tests.test_stride_tricks.assert_shapes_correct"
    ],
    "numpy.lib.tests.test_stride_tricks.test_two_compatible_by_prepending_ones_input_shapes": [
        "numpy.lib.tests.test_stride_tricks.assert_shapes_correct"
    ],
    "numpy.lib.tests.test_stride_tricks.test_incompatible_shapes_raise_valueerror": [
        "numpy.lib.tests.test_stride_tricks.assert_incompatible_shapes_raise"
    ],
    "numpy.lib.tests.test_stride_tricks.test_same_as_ufunc": [
        "numpy.lib.tests.test_stride_tricks.assert_same_as_ufunc"
    ],
    "numpy.lib.tests.test_stride_tricks.test_broadcast_to_succeeds": [
        "numpy.lib.stride_tricks.broadcast_to",
        "numpy.testing.assert_array_equal",
        "numpy.ma.core.reshape",
        "numpy.arange",
        "numpy.zeros",
        "numpy.array",
        "numpy.ones",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_stride_tricks.test_broadcast_to_raises": [
        "numpy.zeros"
    ],
    "numpy.lib.tests.test_stride_tricks.test_broadcast_shape": [
        "numpy.ones",
        "numpy.lib.stride_tricks._broadcast_shape",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_stride_tricks.test_as_strided": [
        "numpy.testing.assert_array_equal",
        "numpy.dtype",
        "numpy.arange",
        "numpy.empty",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.lib.tests.test_stride_tricks.as_strided_writeable": [
        "numpy.testing.assert_",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.full_like"
    ],
    "numpy.lib.tests.test_stride_tricks.VerySimpleSubClass": [
        "numpy.ndarray"
    ],
    "numpy.lib.tests.test_stride_tricks.VerySimpleSubClass.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_stride_tricks.SimpleSubClass": [
        "numpy.lib.tests.test_stride_tricks.VerySimpleSubClass"
    ],
    "numpy.lib.tests.test_stride_tricks.SimpleSubClass.__new__": [
        "numpy.ma.masked.view",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.lib.tests.test_stride_tricks.test_subclasses": [
        "numpy.lib.tests.test_stride_tricks.VerySimpleSubClass",
        "numpy.lib.tests.test_stride_tricks.SimpleSubClass",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.testing.assert_",
        "numpy.ndarray",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.shape",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.lib.stride_tricks.broadcast_to",
        "numpy.lib.stride_tricks.broadcast_arrays",
        "numpy.lib.stride_tricks._broadcast_shape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.lib.tests.test_stride_tricks.test_writeable": [
        "numpy.lib.stride_tricks.broadcast_to",
        "numpy.lib.stride_tricks.broadcast_arrays",
        "numpy.testing.assert_equal",
        "numpy.testing.assert_",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.zeros",
        "numpy.lib.stride_tricks._broadcast_shape",
        "numpy.array"
    ],
    "numpy.lib.tests.test_stride_tricks.test_reference_types": [
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.lib.stride_tricks.broadcast_to",
        "numpy.lib.stride_tricks.broadcast_arrays",
        "numpy.array"
    ],
    "numpy.linalg.linalg._raise_linalgerror_singular": [
        "numpy.linalg.linalg.LinAlgError"
    ],
    "numpy.linalg.linalg._raise_linalgerror_nonposdef": [
        "numpy.linalg.linalg.LinAlgError"
    ],
    "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence": [
        "numpy.linalg.linalg.LinAlgError"
    ],
    "numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence": [
        "numpy.linalg.linalg.LinAlgError"
    ],
    "numpy.linalg.linalg._raise_linalgerror_lstsq": [
        "numpy.linalg.linalg.LinAlgError"
    ],
    "numpy.linalg.linalg.get_linalg_error_extobj": [
        "numpy.linalg.linalg._determine_error_states"
    ],
    "numpy.linalg.linalg._commonType": [
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._realType"
    ],
    "numpy.linalg.linalg._to_native_byte_order": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.linalg.linalg._fastCopyAndTranspose": [
        "numpy.lib.user_array.container.astype"
    ],
    "numpy.linalg.linalg._assertRank2": [
        "numpy.linalg.linalg.LinAlgError",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.linalg.linalg._assertRankAtLeast2": [
        "numpy.linalg.linalg.LinAlgError",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.linalg.linalg._assertSquareness": [
        "numpy.linalg.linalg.LinAlgError",
        "numpy.core.fromnumeric.shape",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.shape",
        "numpy.min",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.min",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.core.shape",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min"
    ],
    "numpy.linalg.linalg._assertNdSquareness": [
        "numpy.linalg.linalg.LinAlgError",
        "numpy.core.fromnumeric.shape",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.shape",
        "numpy.min",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.min",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.core.shape",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min"
    ],
    "numpy.linalg.linalg._assertFinite": [
        "numpy.core.fromnumeric.all",
        "numpy.testing.tests.test_utils.TestAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.matrixlib.defmatrix.matrix.all",
        "numpy.ma.core.MaskedArray.all",
        "numpy.testing.tests.test_utils.TestArrayAlmostEqual.test_subclass_that_cannot_be_bool.MyArray.all",
        "numpy.all",
        "numpy.linalg.linalg.LinAlgError"
    ],
    "numpy.linalg.linalg._assertNoEmpty2d": [
        "numpy.linalg.linalg.LinAlgError",
        "numpy.linalg.linalg._isEmpty2d"
    ],
    "numpy.linalg.linalg.tensorsolve": [
        "numpy.lib.function_base.insert",
        "numpy.insert",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.solve"
    ],
    "numpy.linalg.linalg.solve": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._raise_linalgerror_singular",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.tensorinv": [
        "numpy.linalg.linalg.inv"
    ],
    "numpy.linalg.linalg.inv": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._raise_linalgerror_singular",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.matrix_power": [
        "numpy.lib.twodim_base.eye",
        "numpy.divmod",
        "numpy.linalg.linalg.inv",
        "numpy.linalg.linalg._assertRankAtLeast2",
        "numpy.linalg.linalg._assertNdSquareness"
    ],
    "numpy.linalg.linalg.cholesky": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._raise_linalgerror_nonposdef",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.qr": [
        "numpy.linalg.linalg._assertNoEmpty2d",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.linalg.linalg._makearray",
        "numpy.min",
        "numpy.int",
        "numpy.linalg.linalg.isComplexType",
        "numpy.lib.twodim_base.triu",
        "numpy.linalg.lapack_lite.dorgqr",
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._to_native_byte_order",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.linalg.linalg._fastCopyAndTranspose",
        "numpy.linalg.linalg.LinAlgError",
        "numpy.linalg.linalg._assertRank2",
        "numpy.core.getlimits.iinfo.min"
    ],
    "numpy.linalg.linalg.eigvals": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._realType",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg._complexType",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence",
        "numpy.linalg.linalg._assertFinite",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.eigvalsh": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._realType",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg._convertarray": [
        "numpy.linalg.linalg._commonType"
    ],
    "numpy.linalg.linalg.eig": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._realType",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg._complexType",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence",
        "numpy.linalg.linalg._assertFinite",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.eigh": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._realType",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.svd": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._assertNoEmpty2d",
        "numpy.linalg.linalg._realType",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.cond": [
        "numpy.core.fromnumeric.any",
        "numpy.linalg.linalg.isComplexType",
        "numpy.matrixlib.defmatrix.matrix.any",
        "numpy.linalg.linalg._commonType",
        "numpy.ma.core.MaskedArray.any",
        "numpy.any",
        "numpy.linalg.linalg._assertRankAtLeast2",
        "numpy.linalg.linalg.svd",
        "numpy.linalg.linalg.norm",
        "numpy.linalg.linalg._assertNdSquareness"
    ],
    "numpy.linalg.linalg.matrix_rank": [
        "numpy.linalg.linalg.eigvalsh",
        "numpy.int",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.linalg.linalg.svd",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.linalg.linalg.pinv": [
        "numpy.linalg.linalg.svd",
        "numpy.linalg.linalg.transpose",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg._isEmpty2d"
    ],
    "numpy.linalg.linalg.slogdet": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._realType",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.det": [
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg._assertNdSquareness",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._assertRankAtLeast2"
    ],
    "numpy.linalg.linalg.lstsq": [
        "numpy.linalg.linalg._assertNoEmpty2d",
        "numpy.linalg.linalg._raise_linalgerror_lstsq",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._realType",
        "numpy.ma.core.MaskedArray.max",
        "numpy.linalg.linalg._linalgRealType",
        "numpy.ma.core.max",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.linalg.linalg._commonType",
        "numpy.linalg.linalg.LinAlgError",
        "numpy.linalg.linalg._assertRank2",
        "numpy.core.getlimits.iinfo.max",
        "numpy.max"
    ],
    "numpy.linalg.linalg._multi_svd_norm": [
        "numpy.linalg.linalg.svd"
    ],
    "numpy.linalg.linalg.norm": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.ndarray.sum",
        "numpy.lib.type_check.real",
        "numpy.ma.core.min",
        "numpy.real",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.core.fromnumeric.sum",
        "numpy.min",
        "numpy.linalg.linalg.isComplexType",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.ma.sum",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.int",
        "numpy.sum",
        "numpy.linalg.linalg._multi_svd_norm",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.linalg.linalg.multi_dot": [
        "numpy.linalg.linalg._multi_dot_three",
        "numpy.linalg.linalg._multi_dot_matrix_chain_order",
        "numpy.core.fromnumeric.ndim",
        "numpy.linalg.linalg._assertRank2",
        "numpy.linalg.linalg._multi_dot",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.linalg.linalg._multi_dot_matrix_chain_order": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.core.fromnumeric.shape",
        "numpy.ma.core.shape"
    ],
    "numpy.linalg.linalg._multi_dot": [
        "numpy.linalg.linalg._multi_dot"
    ],
    "numpy.linalg.setup.configuration": [
        "numpy.core.defchararray.chararray.join",
        "numpy.distutils.misc_util.Configuration",
        "numpy.core.defchararray.join",
        "numpy.distutils.misc_util.Configuration.add_data_dir",
        "numpy.distutils.system_info.get_info",
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.distutils.system_info",
        "numpy.distutils.misc_util",
        "numpy.distutils.misc_util.Configuration.add_extension",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.linalg.setup.configuration.get_lapack_lite_sources",
        "numpy.char.join"
    ],
    "numpy.linalg.setup.configuration.get_lapack_lite_sources": [
        "numpy.distutils.misc_util.Configuration.paths",
        "numpy.distutils.system_info.get_info"
    ],
    "make_lite.FortranRoutine.dependencies": [
        "fortran.getDependencies"
    ],
    "make_lite.UnknownFortranRoutine": [
        "make_lite.FortranRoutine"
    ],
    "make_lite.UnknownFortranRoutine.__init__": [
        "make_lite.FortranRoutine.__init__"
    ],
    "make_lite.FortranLibrary._findRoutine": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "make_lite.UnknownFortranRoutine",
        "numpy.core.defchararray.join",
        "make_lite.FortranLibrary._newFortranRoutine",
        "make_lite.UnknownFortranRoutine.__init__",
        "numpy.char.join"
    ],
    "make_lite.FortranLibrary._newFortranRoutine": [
        "make_lite.FortranRoutine",
        "make_lite.FortranRoutine.__init__"
    ],
    "make_lite.FortranLibrary.addIgnorableRoutine": [
        "make_lite.UnknownFortranRoutine",
        "make_lite.UnknownFortranRoutine.__init__"
    ],
    "make_lite.FortranLibrary.addRoutine": [
        "make_lite.FortranLibrary.getRoutine"
    ],
    "make_lite.FortranLibrary.getRoutine": [
        "numpy.lib.arraysetops.unique",
        "numpy.unique",
        "numpy.lib.function_base.unique",
        "numpy.ma.extras.unique",
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get",
        "make_lite.FortranLibrary._findRoutine"
    ],
    "make_lite.FortranLibrary.allRoutineNames": [
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "make_lite.FortranLibrary.allRoutines": [
        "numpy.sctypes.values",
        "numpy.sctypeDict.values",
        "numpy.typeDict.values"
    ],
    "make_lite.FortranLibrary.resolveAllDependencies": [
        "clapack_scrub.LineQueue.add",
        "numpy.f2py.func2subr.createfuncwrapper.add",
        "numpy.ma.add",
        "numpy.add",
        "make_lite.FortranLibrary.allRoutineNames",
        "numpy.core.defchararray.add",
        "make_lite.FortranLibrary.getRoutine",
        "make_lite.FortranLibrary.addRoutine",
        "numpy.f2py.func2subr.createsubrwrapper.add"
    ],
    "make_lite.LapackLibrary": [
        "make_lite.FortranLibrary"
    ],
    "make_lite.LapackLibrary._newFortranRoutine": [
        "make_lite.FortranLibrary._newFortranRoutine"
    ],
    "make_lite.getLapackRoutines": [
        "numpy.core.defchararray.chararray.join",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.core.defchararray.join",
        "make_lite.FortranLibrary.resolveAllDependencies",
        "numpy.char.join",
        "make_lite.FortranLibrary.addIgnorableRoutine",
        "make_lite.FortranLibrary.addRoutine",
        "make_lite.LapackLibrary"
    ],
    "make_lite.getWrappedRoutineNames": [
        "numpy.core.defchararray.split",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.ma.append",
        "numpy.core.defchararray.chararray.split",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.chararray.strip",
        "numpy.append",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib.function_base.append",
        "numpy.lib._datasource.open",
        "numpy.ma.core.append"
    ],
    "make_lite.dumpRoutineNames": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "make_lite.concatenateRoutines": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "make_lite.runF2C": [
        "make_lite.F2CError"
    ],
    "make_lite.scrubF2CSource": [
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "clapack_scrub.scrubSource",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.distutils.command.config.GrabStdout.write"
    ],
    "make_lite.main": [
        "make_lite.runF2C",
        "make_lite.F2CError",
        "make_lite.scrubF2CSource",
        "numpy.lib._datasource.DataSource.exists",
        "make_lite.ensure_executable",
        "numpy.core.defchararray.join",
        "make_lite.getLapackRoutines",
        "make_lite.getWrappedRoutineNames",
        "numpy.char.join",
        "numpy.core.defchararray.chararray.join",
        "make_lite.dumpRoutineNames",
        "make_lite.concatenateRoutines"
    ],
    "clapack_scrub.LenSubsScanner": [
        "clapack_scrub.MyScanner",
        "clapack_scrub.LenSubsScanner.beginArgs",
        "clapack_scrub.sep_seq",
        "clapack_scrub.LenSubsScanner.endArgs"
    ],
    "clapack_scrub.LenSubsScanner.__init__": [
        "clapack_scrub.MyScanner.__init__"
    ],
    "clapack_scrub.LenSubsScanner.beginArgs": [
        "clapack_scrub.MyScanner.begin"
    ],
    "clapack_scrub.LenSubsScanner.endArgs": [
        "clapack_scrub.MyScanner.begin"
    ],
    "clapack_scrub.scrubFtnlen": [
        "clapack_scrub.LenSubsScanner",
        "clapack_scrub.runScanner"
    ],
    "clapack_scrub.LineQueue.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "clapack_scrub.LineQueue.add": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "clapack_scrub.LineQueue.flushTo": [
        "clapack_scrub.LineQueue.clear"
    ],
    "clapack_scrub.LineQueue.getValue": [
        "clapack_scrub.LineQueue.__init__",
        "clapack_scrub.LineQueue.clear",
        "clapack_scrub.LineQueue.flushTo"
    ],
    "clapack_scrub.CommentQueue": [
        "clapack_scrub.LineQueue"
    ],
    "clapack_scrub.CommentQueue.__init__": [
        "clapack_scrub.LineQueue.__init__"
    ],
    "clapack_scrub.CommentQueue.add": [
        "clapack_scrub.LineQueue.add",
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.core.defchararray.rstrip"
    ],
    "clapack_scrub.CommentQueue.flushTo": [
        "clapack_scrub.LineQueue.clear",
        "numpy.core.defchararray.chararray.rstrip",
        "numpy.core.defchararray.rstrip",
        "clapack_scrub.LineQueue.flushTo"
    ],
    "clapack_scrub.cleanComments": [
        "clapack_scrub.CommentQueue.flushTo",
        "clapack_scrub.LineQueue.__init__",
        "clapack_scrub.LineQueue.getValue",
        "clapack_scrub.cleanComments.SourceLines",
        "clapack_scrub.LineQueue",
        "clapack_scrub.CommentQueue"
    ],
    "clapack_scrub.cleanComments.SourceLines": [
        "clapack_scrub.LineQueue.add",
        "clapack_scrub.cleanComments.SourceLines",
        "clapack_scrub.cleanComments.isCommentLine",
        "clapack_scrub.cleanComments.HaveCommentLines"
    ],
    "clapack_scrub.cleanComments.HaveCommentLines": [
        "clapack_scrub.CommentQueue.flushTo",
        "clapack_scrub.cleanComments.HaveBlankLines",
        "clapack_scrub.LineQueue.add",
        "clapack_scrub.cleanComments.SourceLines",
        "clapack_scrub.cleanComments.isCommentLine",
        "clapack_scrub.cleanComments.HaveCommentLines",
        "clapack_scrub.LineQueue",
        "clapack_scrub.cleanComments.isBlank"
    ],
    "clapack_scrub.cleanComments.HaveBlankLines": [
        "clapack_scrub.cleanComments.HaveBlankLines",
        "clapack_scrub.LineQueue.add",
        "clapack_scrub.cleanComments.SourceLines",
        "clapack_scrub.cleanComments.isCommentLine",
        "clapack_scrub.LineQueue.flushTo",
        "clapack_scrub.cleanComments.HaveCommentLines",
        "clapack_scrub.LineQueue",
        "clapack_scrub.cleanComments.isBlank",
        "clapack_scrub.CommentQueue"
    ],
    "clapack_scrub.removeHeader": [
        "clapack_scrub.LineQueue.__init__",
        "clapack_scrub.LineQueue",
        "clapack_scrub.removeHeader.LookingForHeader",
        "clapack_scrub.LineQueue.getValue"
    ],
    "clapack_scrub.removeHeader.LookingForHeader": [
        "clapack_scrub.LineQueue.add",
        "clapack_scrub.removeHeader.InHeader",
        "clapack_scrub.removeHeader.LookingForHeader"
    ],
    "clapack_scrub.removeHeader.InHeader": [
        "clapack_scrub.removeHeader.InHeader",
        "clapack_scrub.removeHeader.OutOfHeader"
    ],
    "clapack_scrub.removeHeader.OutOfHeader": [
        "clapack_scrub.LineQueue.add",
        "clapack_scrub.removeHeader.OutOfHeader"
    ],
    "clapack_scrub.removeSubroutinePrototypes": [
        "clapack_scrub.LineQueue.__init__",
        "clapack_scrub.LineQueue.add",
        "clapack_scrub.LineQueue",
        "clapack_scrub.LineQueue.getValue"
    ],
    "clapack_scrub.removeBuiltinFunctions": [
        "clapack_scrub.LineQueue.__init__",
        "clapack_scrub.removeBuiltinFunctions.LookingForBuiltinFunctions",
        "clapack_scrub.LineQueue",
        "clapack_scrub.LineQueue.getValue"
    ],
    "clapack_scrub.removeBuiltinFunctions.LookingForBuiltinFunctions": [
        "clapack_scrub.LineQueue.add",
        "clapack_scrub.removeBuiltinFunctions.InBuiltInFunctions",
        "clapack_scrub.removeBuiltinFunctions.LookingForBuiltinFunctions"
    ],
    "clapack_scrub.removeBuiltinFunctions.InBuiltInFunctions": [
        "clapack_scrub.removeBuiltinFunctions.InBuiltInFunctions",
        "clapack_scrub.removeBuiltinFunctions.LookingForBuiltinFunctions"
    ],
    "clapack_scrub.replaceDlamch": [
        "clapack_scrub.replaceDlamch.repl"
    ],
    "clapack_scrub.scrubSource": [
        "clapack_scrub.removeBuiltinFunctions",
        "clapack_scrub.scrubFtnlen",
        "clapack_scrub.replaceDlamch",
        "clapack_scrub.cleanComments",
        "clapack_scrub.removeHeader",
        "clapack_scrub.cleanSource",
        "clapack_scrub.removeSubroutinePrototypes"
    ],
    "fortran.isLabel": [
        "numpy.core.defchararray.isdigit",
        "numpy.core.defchararray.chararray.isdigit"
    ],
    "fortran.lineType": [
        "fortran.isContinuation",
        "fortran.isBlank",
        "fortran.isLabel",
        "fortran.isComment"
    ],
    "fortran.LineIterator": [
        "fortran.LineIterator.__next__"
    ],
    "fortran.LineIterator.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "fortran.LineIterator.__next__": [
        "npy_tempita.compat3.next",
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "fortran.LineIterator.__next__"
    ],
    "fortran.PushbackIterator": [
        "fortran.PushbackIterator.__next__"
    ],
    "fortran.PushbackIterator.__init__": [
        "numpy.lib.function_base.vectorize.__init__",
        "numpy.ma.timer_comparison.ModuleTester.__init__",
        "numpy.lib._iotools.LineSplitter.__init__",
        "numpy.lib.user_array.container.__init__",
        "numpy.distutils.misc_util.InstallableLib.__init__",
        "numpy.lib._iotools.NameValidator.__init__",
        "numpy.testing._private.pytesttester.PytestTester.__init__",
        "numpy.ma.extras._fromnxfunction.__init__",
        "numpy.lib.index_tricks.nd_grid.__init__",
        "numpy.ma.core._MaskedUFunc.__init__",
        "npy_tempita._looper.looper_iter.__init__",
        "numpy.lib.index_tricks.AxisConcatenator.__init__",
        "numpy.core.tests.test_ufunc.TestUfunc.test_custom_array_like.MyThing.__init__",
        "track_allocations.AllocationTracker.__init__",
        "npy_tempita._looper.loop_pos.__init__",
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.tests.test_function_base.TestLinspace.test_array_interface.Arrayish.__init__",
        "numpy.distutils.pathccompiler.PathScaleCCompiler.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Intent.__init__",
        "testSuperTensor.SuperTensorTestCase.__init__",
        "numpy.lib.index_tricks.ndenumerate.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "testFlat.FlatTestCase.__init__",
        "numpy.distutils.environment.EnvironmentConfig.__init__",
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.distutils.cpuinfo.SunOSCPUInfo.__init__",
        "numpy.ma.tests.test_subclassing.CSAIterator.__init__",
        "numpy.core.setup.CallOnceOnly.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.distutils.cpuinfo.IRIXCPUInfo.__init__",
        "numpy.distutils.cpuinfo.DarwinCPUInfo.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.testing._private.utils.WarningMessage.__init__",
        "numpy.testing._private.utils.WarningManager.__init__",
        "numpy.core.tests.test_multiarray.TestBinop.test_pow_array_object_dtype.SomeClass.__init__",
        "numpy.distutils.npy_pkg_config.FormatError.__init__",
        "numpy.distutils.npy_pkg_config.PkgNotFound.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stdout.__init__",
        "numpy.distutils.cpuinfo.Win32CPUInfo.__init__",
        "numpy.distutils.npy_pkg_config.LibraryInfo.__init__",
        "numpy.distutils.tests.test_exec_command.redirect_stderr.__init__",
        "numpy.distutils.cpuinfo.LinuxCPUInfo.__init__",
        "testVector.VectorTestCase.__init__",
        "numpy.distutils.tests.test_exec_command.emulate_nonposix.__init__",
        "numpy.core.numeric.errstate.__init__",
        "numpy.distutils.npy_pkg_config.VariableSet.__init__",
        "numpy.core.tests.test_multiarray.test_array_interface.Foo.__init__",
        "numpy.testing._private.utils.clear_and_catch_warnings.__init__",
        "numpy.distutils.system_info.system_info.__init__",
        "numpy.testing._private.utils.suppress_warnings.__init__",
        "numpy.testing._private.nosetester.NoseTester.__init__",
        "c_coverage_report.FunctionHtmlFormatter.__init__",
        "numpy.distutils.intelccompiler.IntelCCompiler.__init__",
        "numpy.core.code_generators.genapi.TypeApi.__init__",
        "numpy.f2py.tests.test_array_from_pyobj.Array.__init__",
        "numpy.testing.tests.test_utils.TestAssertNoGcCycles.test_fails.ReferenceCycleInDel.__init__",
        "numpy.distutils.intelccompiler.IntelEM64TCCompiler.__init__",
        "numpy.core.code_generators.genapi.GlobalVarApi.__init__",
        "numpy.ma.extras.mr_class.__init__",
        "numpy.lib.utils._Deprecate.__init__",
        "numpy.core.code_generators.genapi.BoolValuesApi.__init__",
        "numpy.distutils.msvc9compiler.MSVCCompiler.__init__",
        "numpy.lib.tests.test_io.TextIO.__init__",
        "numpy.lib.utils.SafeEval.__init__",
        "fortran.LineIterator.__init__",
        "numpy.core.code_generators.genapi.FunctionApi.__init__",
        "testTensor.TensorTestCase.__init__",
        "numpy._import_tools.PackageLoader.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.core.code_generators.generate_umath.FuncNameSuffix.__init__",
        "numpy.core.arrayprint.FloatingFormat.__init__",
        "numpy.core._internal.AxisError.__init__",
        "numpy.lib.polynomial.poly1d.__init__",
        "numpy.core.code_generators.generate_umath.TypeDescription.__init__",
        "numpy.core.code_generators.generate_umath.Ufunc.__init__",
        "numpy.core.arrayprint.IntegerFormat.__init__",
        "numpy.core.tests.test_scalarmath.TestMultiply.test_no_seq_repeat_basic_array_like.ArrayLike.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_no_len_object_type.Point2.__init__",
        "numpy.lib._datasource.DataSource.__init__",
        "numpy.lib.arrayterator.Arrayterator.__init__",
        "numpy.core.tests.test_multiarray.TestCreation.test_failed_len_sequence.A.__init__",
        "numpy.testing._private.parameterized.parameterized.__init__",
        "numpy.fft.helper._FFTCache.__init__",
        "numpy.core.records.format_parser.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.core.tests.test_multiarray.TestDot.test_vecobject.Vec.__init__",
        "numpy.tests.test_warnings.FindFuncs.__init__",
        "numpy.core.arrayprint.BoolFormat.__init__",
        "c_coverage_report.SourceFile.__init__",
        "numpy.core._internal.dummy_ctype.__init__",
        "numpy.testing._private.noseclasses.NumpyDocTestCase.__init__",
        "numpy.core.arrayprint.ComplexFloatingFormat.__init__",
        "npy_tempita.bunch.__init__",
        "c_coverage_report.SourceFiles.__init__",
        "numpy.distutils.msvccompiler.MSVCCompiler.__init__",
        "numpy.core.arrayprint._TimelikeFormat.__init__",
        "numpy.core._internal._ctypes.__init__",
        "numpy.distutils.command.config.GrabStdout.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray.__init__",
        "numpy.distutils.extension.Extension.__init__",
        "numpy.core.code_generators.genapi.StealRef.__init__",
        "numpy.lib.npyio.savetxt.WriteWrap.__init__",
        "numpy.core.tests.test_mem_overlap.test_non_ndarray_inputs.MyArray2.__init__",
        "numpy.core.code_generators.genapi.NonNull.__init__",
        "clapack_scrub.MyScanner.__init__",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.core.code_generators.genapi.Function.__init__",
        "numpy.core.machar.MachAr.__init__",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core.arrayprint.SubArrayFormat.__init__",
        "npy_tempita.html.__init__",
        "numpy.testing.print_coercion_tables.GenericObject.__init__",
        "numpy.testing._private.noseclasses.Unplugger.__init__",
        "numpy.core.arrayprint.StructuredVoidFormat.__init__",
        "numpy.core.code_generators.genapi.ParseError.__init__",
        "testFortran.FortranTestCase.__init__",
        "clapack_scrub.LineQueue.__init__",
        "numpy.core._internal._dtype_from_pep3118.Stream.__init__",
        "npy_tempita._looper.looper.__init__",
        "numpy.lib._iotools.StringConverter.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.lib.stride_tricks.DummyArray.__init__",
        "numpy.distutils.misc_util.Configuration.__init__",
        "numpy.distutils.numpy_distribution.NumpyDistribution.__init__",
        "numpy.distutils.mingw32ccompiler.Mingw32CCompiler.__init__",
        "numpy.polynomial._polybase.ABCPolyBase.__init__",
        "npy_tempita.TemplateDef.__init__",
        "numpy.f2py.auxfuncs.throw_error.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.lib._version.NumpyVersion.__init__",
        "npy_tempita.TemplateError.__init__",
        "npy_tempita.TemplateObject.__init__",
        "numpy.lib.tests.test_mixins.ArrayLike.__init__",
        "npy_tempita.TemplateObjectGetter.__init__",
        "numpy.ma.core.MaskedIterator.__init__",
        "numpy.lib.npyio.BagObj.__init__",
        "make_lite.FortranRoutine.__init__",
        "numpy.lib.npyio.NpzFile.__init__",
        "make_lite.FortranLibrary.__init__",
        "numpy.ma.core._convert2ma.__init__",
        "testMatrix.MatrixTestCase.__init__"
    ],
    "fortran.PushbackIterator.__next__": [
        "numpy.core._internal._dtype_from_pep3118.Stream.next",
        "fortran.PushbackIterator.__next__",
        "npy_tempita.compat3.next"
    ],
    "fortran.PushbackIterator.pushback": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "fortran.fortranSourceLines": [
        "numpy.ma.append",
        "fortran.lineType",
        "fortran.LineIterator",
        "fortran.PushbackIterator",
        "fortran.LineIterator.__init__",
        "fortran.PushbackIterator.__init__",
        "numpy.append",
        "fortran.PushbackIterator.pushback",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "fortran.getDependencies": [
        "numpy.lib.npyio.NpzFile.close",
        "numpy.core.defchararray.split",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.split",
        "fortran.fortranSourceLines",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "numpy.lib._datasource.open"
    ],
    "numpy.linalg.tests.test_build.FindDependenciesLdd.grep_dependencies": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.ma.append",
        "numpy.append",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.get_dependencies",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.linalg.tests.test_build.TestF77Mismatch": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.linalg.tests.test_build.TestF77Mismatch.test_lapack": [
        "numpy.linalg.tests.test_build.FindDependenciesLdd.__init__",
        "numpy.testing.assert_",
        "numpy.linalg.tests.test_build.FindDependenciesLdd.grep_dependencies",
        "numpy.linalg.tests.test_build.FindDependenciesLdd"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_eig_build": [
        "numpy.arange",
        "numpy.float64",
        "numpy.linalg.eig",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_eigh_build": [
        "numpy.linalg.eigh",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_svd_build": [
        "numpy.zeros",
        "numpy.transpose",
        "numpy.linalg.svd",
        "numpy.dot",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_norm_vector_badarg": [
        "numpy.linalg.norm",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_lapack_endian": [
        "numpy.linalg.cholesky",
        "numpy.array",
        "numpy.testing.assert_array_equal"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_large_svd_32bit": [
        "numpy.linalg.linalg.svd",
        "numpy.linalg.svd",
        "numpy.eye"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_svd_no_uv": [
        "numpy.absolute",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.count_nonzero",
        "numpy.linalg.norm",
        "numpy.linalg.svd",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.linalg.matrix_rank",
        "numpy.ones",
        "numpy.linalg.linalg.matrix_rank",
        "numpy.ma.core.shape",
        "numpy.linalg.linalg.norm"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_norm_object_array": [
        "numpy.linalg.norm",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_regression.TestRegression.test_lstsq_complex_larger_rhs": [
        "numpy.matlib.randn",
        "numpy.dot",
        "numpy.linalg.lstsq",
        "numpy.random.randn",
        "numpy.core.multiarray.dot",
        "numpy.ma.core.dot",
        "numpy.core.fromnumeric.size",
        "numpy.ma.core.MaskedArray.dot",
        "numpy.size",
        "numpy.ma.core.size"
    ],
    "numpy.linalg.tests.test_linalg.consistent_subclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.assert_almost_equal": [
        "numpy.testing.assert_almost_equal",
        "numpy.single",
        "numpy.csingle"
    ],
    "numpy.linalg.tests.test_linalg.get_real_dtype": [
        "numpy.csingle",
        "numpy.double",
        "numpy.cdouble",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.get_complex_dtype": [
        "numpy.csingle",
        "numpy.double",
        "numpy.cdouble",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.get_rtol": [
        "numpy.csingle",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.LinalgCase.__init__": [
        "numpy.testing.assert_"
    ],
    "numpy.linalg.tests.test_linalg._make_generalized_cases": [
        "numpy.core.fromnumeric.reshape",
        "numpy.core.fromnumeric.shape",
        "numpy.ndarray",
        "numpy.shape",
        "numpy.ma.append",
        "numpy.array",
        "numpy.lib.function_base.append",
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.ma.core.reshape",
        "numpy.ma.core.shape",
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.linalg.tests.test_linalg.LinalgCase",
        "numpy.linalg.tests.test_linalg.apply_tag",
        "numpy.append",
        "numpy.ma.core.append",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.linalg.tests.test_linalg._stride_comb_iter": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.lib.stride_tricks.as_strided",
        "numpy.ma.masked.view",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.empty",
        "numpy.all"
    ],
    "numpy.linalg.tests.test_linalg._make_strided_cases": [
        "numpy.linalg.tests.test_linalg.LinalgCase.__init__",
        "numpy.linalg.tests.test_linalg._make_generalized_cases",
        "numpy.linalg.tests.test_linalg._stride_comb_iter",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.append",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.linalg.tests.test_linalg.LinalgCase",
        "numpy.append",
        "numpy.ma.core.reshape",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append",
        "numpy.reshape"
    ],
    "numpy.linalg.tests.test_linalg.LinalgTestCase": [
        "numpy.linalg.tests.test_linalg._make_strided_cases"
    ],
    "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases": [
        "numpy.linalg.tests.test_linalg.SolveCases.do",
        "numpy.linalg.tests.test_linalg.TestEighCases.do",
        "numpy.linalg.tests.test_linalg.SVDCases.do",
        "numpy.linalg.tests.test_linalg.PinvCases.do",
        "numpy.linalg.tests.test_linalg.EigCases.do",
        "numpy.linalg.tests.test_linalg._make_strided_cases",
        "numpy.linalg.tests.test_linalg.InvCases.do",
        "numpy.linalg.tests.test_linalg.CondCases.do",
        "numpy.linalg.tests.test_linalg.DetCases.do",
        "numpy.linalg.tests.test_linalg.EigvalsCases.do",
        "numpy.linalg.tests.test_linalg.TestEigvalshCases.do",
        "numpy.linalg.tests.test_linalg.LstsqCases.do"
    ],
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase"
    ],
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase.test_sq_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.LinalgSquareTestCase.test_empty_sq_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase"
    ],
    "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_nonsq_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase.test_empty_nonsq_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.HermitianTestCase": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase"
    ],
    "numpy.linalg.tests.test_linalg.HermitianTestCase.test_herm_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.HermitianTestCase.test_empty_herm_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase.test_generalized_sq_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase.test_generalized_empty_sq_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_nonsq_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase.test_generalized_empty_nonsq_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase",
        "numpy.testing._private.decorators.slow"
    ],
    "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_herm_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase.test_generalized_empty_herm_cases": [
        "numpy.linalg.tests.test_linalg.LinalgTestCase.check_cases"
    ],
    "numpy.linalg.tests.test_linalg.dot_generalized": [
        "numpy.common_type",
        "numpy.dot",
        "numpy.asarray",
        "numpy.empty"
    ],
    "numpy.linalg.tests.test_linalg.identity_like_generalized": [
        "numpy.identity",
        "numpy.asarray",
        "numpy.empty"
    ],
    "numpy.linalg.tests.test_linalg.SolveCases": [
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.SolveCases.do": [
        "numpy.testing.assert_",
        "numpy.linalg.tests.test_linalg.consistent_subclass",
        "numpy.linalg.tests.test_linalg.dot_generalized",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestSolve": [
        "numpy.linalg.tests.test_linalg.SolveCases"
    ],
    "numpy.linalg.tests.test_linalg.TestSolve.test_types.check": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestSolve.test_types": [
        "numpy.csingle",
        "numpy.double",
        "numpy.cdouble",
        "numpy.single",
        "numpy.linalg.tests.test_linalg.TestSolve.test_types.check"
    ],
    "numpy.linalg.tests.test_linalg.TestSolve.test_0_size.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.TestSolve.test_0_size": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.linalg.tests.test_linalg.TestSolve.test_0_size.ArraySubclass",
        "numpy.core.fromnumeric.reshape",
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.linalg.tests.test_linalg.TestSolve.test_0_size_k.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.TestSolve.test_0_size_k": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.core.fromnumeric.reshape",
        "numpy.linalg.tests.test_linalg.TestSolve.test_0_size_k.ArraySubclass",
        "numpy.ma.masked.view",
        "numpy.testing.assert_array_equal",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.ma.core.reshape",
        "numpy.reshape",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.linalg.tests.test_linalg.InvCases": [
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.InvCases.do": [
        "numpy.testing.assert_",
        "numpy.linalg.inv",
        "numpy.linalg.tests.test_linalg.consistent_subclass",
        "numpy.linalg.tests.test_linalg.dot_generalized",
        "numpy.linalg.tests.test_linalg.identity_like_generalized",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestInv": [
        "numpy.linalg.tests.test_linalg.InvCases"
    ],
    "numpy.linalg.tests.test_linalg.TestInv.test_types.check": [
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestInv.test_types": [
        "numpy.csingle",
        "numpy.double",
        "numpy.linalg.tests.test_linalg.TestInv.test_types.check",
        "numpy.cdouble",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.TestInv.test_0_size.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.TestInv.test_0_size": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.complex64",
        "numpy.linalg.tests.test_linalg.TestInv.test_0_size.ArraySubclass",
        "numpy.linalg.inv",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.float64",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.linalg.tests.test_linalg.EigvalsCases": [
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.EigvalsCases.do": [
        "numpy.linalg.eig",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvals": [
        "numpy.linalg.tests.test_linalg.EigvalsCases"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvals.test_types.check": [
        "numpy.linalg.tests.test_linalg.get_complex_dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvals.test_types": [
        "numpy.csingle",
        "numpy.double",
        "numpy.cdouble",
        "numpy.linalg.tests.test_linalg.TestEigvals.test_types.check",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvals.test_0_size.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvals.test_0_size": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.complex64",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.linalg.tests.test_linalg.TestEigvals.test_0_size.ArraySubclass",
        "numpy.float64",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.linalg.tests.test_linalg.EigCases": [
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.EigCases.do": [
        "numpy.testing.assert_",
        "numpy.linalg.tests.test_linalg.consistent_subclass",
        "numpy.linalg.tests.test_linalg.get_rtol",
        "numpy.asarray",
        "numpy.linalg.eig",
        "numpy.linalg.tests.test_linalg.dot_generalized"
    ],
    "numpy.linalg.tests.test_linalg.TestEig": [
        "numpy.linalg.tests.test_linalg.EigCases"
    ],
    "numpy.linalg.tests.test_linalg.TestEig.test_types.check": [
        "numpy.linalg.tests.test_linalg.get_complex_dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.linalg.eig",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.linalg.linalg.eig"
    ],
    "numpy.linalg.tests.test_linalg.TestEig.test_types": [
        "numpy.csingle",
        "numpy.double",
        "numpy.cdouble",
        "numpy.single",
        "numpy.linalg.tests.test_linalg.TestEig.test_types.check"
    ],
    "numpy.linalg.tests.test_linalg.TestEig.test_0_size.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.TestEig.test_0_size": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.complex64",
        "numpy.ma.masked.view",
        "numpy.linalg.eig",
        "numpy.testing.assert_equal",
        "numpy.linalg.tests.test_linalg.TestEig.test_0_size.ArraySubclass",
        "numpy.float64",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.linalg.tests.test_linalg.SVDCases": [
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.SVDCases.do": [
        "numpy.testing.assert_",
        "numpy.linalg.tests.test_linalg.consistent_subclass",
        "numpy.linalg.svd",
        "numpy.linalg.tests.test_linalg.get_rtol",
        "numpy.asarray",
        "numpy.linalg.tests.test_linalg.dot_generalized"
    ],
    "numpy.linalg.tests.test_linalg.TestSVD": [
        "numpy.linalg.tests.test_linalg.SVDCases"
    ],
    "numpy.linalg.tests.test_linalg.TestSVD.test_types.check": [
        "numpy.linalg.tests.test_linalg.get_real_dtype",
        "numpy.linalg.svd",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestSVD.test_types": [
        "numpy.csingle",
        "numpy.linalg.tests.test_linalg.TestSVD.test_types.check",
        "numpy.double",
        "numpy.cdouble",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.TestSVD.test_0_size": [
        "numpy.zeros",
        "numpy.linalg.svd",
        "numpy.complex64"
    ],
    "numpy.linalg.tests.test_linalg.CondCases": [
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.CondCases.do": [
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.MaskedArray.max",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.linalg.inv",
        "numpy.linalg.svd",
        "numpy.ma.core.min",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.core.fromnumeric.sum",
        "numpy.min",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.ma.sum",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.core.getlimits.iinfo.max",
        "numpy.sqrt",
        "numpy.sum",
        "numpy.linalg.linalg.inv",
        "numpy.matrixlib.defmatrix.matrix.sum",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestCond": [
        "numpy.linalg.tests.test_linalg.CondCases"
    ],
    "numpy.linalg.tests.test_linalg.TestCond.test_basic_nonsvd": [
        "numpy.sqrt",
        "numpy.linalg.tests.test_linalg.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestCond.test_singular": [
        "numpy.zeros",
        "numpy.testing.assert_",
        "numpy.ones"
    ],
    "numpy.linalg.tests.test_linalg.TestCond.test_nan": [
        "numpy.isnan",
        "numpy.testing.assert_",
        "numpy.ones",
        "numpy.float_"
    ],
    "numpy.linalg.tests.test_linalg.TestCond.test_stacked_singular": [
        "numpy.isfinite",
        "numpy.matlib.rand",
        "numpy.testing.assert_",
        "numpy.testing._private.utils.rand",
        "numpy.lib.tests.test_regression.TestRegression.test_refcount_vectorize.p",
        "numpy.random.seed",
        "numpy.random.rand",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.PinvCases": [
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedNonsquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.PinvCases.do": [
        "numpy.testing.assert_",
        "numpy.linalg.tests.test_linalg.consistent_subclass",
        "numpy.linalg.tests.test_linalg.dot_generalized",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestPinv": [
        "numpy.linalg.tests.test_linalg.PinvCases"
    ],
    "numpy.linalg.tests.test_linalg.DetCases": [
        "numpy.linalg.tests.test_linalg.LinalgGeneralizedSquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.DetCases.do": [
        "numpy.lib.user_array.container.astype",
        "numpy.multiply.reduce",
        "numpy.testing.assert_equal",
        "numpy.single",
        "numpy.atleast_1d",
        "numpy.exp",
        "numpy.linalg.slogdet",
        "numpy.double",
        "numpy.cdouble",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestDet": [
        "numpy.linalg.tests.test_linalg.DetCases"
    ],
    "numpy.linalg.tests.test_linalg.TestDet.test_zero": [
        "numpy.double",
        "numpy.testing.assert_equal",
        "numpy.linalg.slogdet",
        "numpy.cdouble"
    ],
    "numpy.linalg.tests.test_linalg.TestDet.test_types.check": [
        "numpy.linalg.tests.test_linalg.get_real_dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.linalg.slogdet",
        "numpy.linalg.linalg.slogdet"
    ],
    "numpy.linalg.tests.test_linalg.TestDet.test_types": [
        "numpy.csingle",
        "numpy.double",
        "numpy.cdouble",
        "numpy.linalg.tests.test_linalg.TestDet.test_types.check",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.TestDet.test_0_size": [
        "numpy.testing.assert_equal",
        "numpy.float32",
        "numpy.testing.assert_",
        "numpy.zeros",
        "numpy.linalg.slogdet",
        "numpy.complex64",
        "numpy.float64"
    ],
    "numpy.linalg.tests.test_linalg.LstsqCases": [
        "numpy.linalg.tests.test_linalg.LinalgNonsquareTestCase",
        "numpy.linalg.tests.test_linalg.LinalgSquareTestCase"
    ],
    "numpy.linalg.tests.test_linalg.LstsqCases.do": [
        "numpy.ma.core.MaskedArray.view",
        "numpy.asarray",
        "numpy.ndarray.sum",
        "numpy.linalg.svd",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.issubdtype",
        "numpy.dot",
        "numpy.core.fromnumeric.sum",
        "numpy.linalg.lstsq",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.sum",
        "numpy.ma.mrecords.MaskedRecords.view",
        "numpy.linalg.tests.test_linalg.assert_almost_equal",
        "numpy.sum",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.linalg.tests.test_linalg.consistent_subclass",
        "numpy.matrixlib.defmatrix.matrix.sum"
    ],
    "numpy.linalg.tests.test_linalg.TestLstsq": [
        "numpy.linalg.tests.test_linalg.LstsqCases"
    ],
    "numpy.linalg.tests.test_linalg.TestLstsq.test_future_rcond": [
        "numpy.linalg.lstsq",
        "numpy.testing.assert_",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower": [
        "numpy.polynomial._polybase.ABCPolyBase.copy",
        "numpy.ma.mrecords.MaskedRecords.copy",
        "numpy.lib.function_base.copy",
        "numpy.ma.copy",
        "numpy.distutils.fcompiler.FCompiler.copy",
        "numpy.identity",
        "numpy.lib.user_array.container.copy",
        "numpy.ma.core.MaskedConstant.copy",
        "numpy.copy",
        "numpy.ma.masked.copy",
        "numpy.array",
        "numpy.True_.copy"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.test_large_power": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.test_large_power_trailing_zero": [
        "numpy.array",
        "numpy.testing.assert_equal",
        "numpy.identity"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_zero.tz": [
        "numpy.linalg.tests.test_linalg.identity_like_generalized",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_zero": [
        "numpy.identity",
        "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_zero.tz",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_one.tz": [
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_one": [
        "numpy.identity",
        "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_one.tz",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_two.tz": [
        "numpy.matmul",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_two": [
        "numpy.identity",
        "numpy.array",
        "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_two.tz"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_invert.tz": [
        "numpy.matmul",
        "numpy.linalg.tests.test_linalg.identity_like_generalized",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_invert": [
        "numpy.identity",
        "numpy.array",
        "numpy.linalg.tests.test_linalg.TestMatrixPower.testip_invert.tz"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.test_invert_noninvertible": [
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixPower.test_invalid": [
        "numpy.array",
        "numpy.ones"
    ],
    "numpy.linalg.tests.test_linalg.TestBoolPower.test_square": [
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvalshCases": [
        "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase",
        "numpy.linalg.tests.test_linalg.HermitianTestCase"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvalshCases.do": [
        "numpy.linalg.eigvalsh",
        "numpy.linalg.tests.test_linalg.get_rtol",
        "numpy.linalg.eig"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvalsh.test_types.check": [
        "numpy.linalg.tests.test_linalg.get_real_dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.testing.assert_equal",
        "numpy.linalg.eigvalsh",
        "numpy.array",
        "numpy.linalg.linalg.eigvalsh"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvalsh.test_types": [
        "numpy.csingle",
        "numpy.double",
        "numpy.cdouble",
        "numpy.linalg.tests.test_linalg.TestEigvalsh.test_types.check",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvalsh.test_invalid": [
        "numpy.linalg.eigvalsh",
        "numpy.float32",
        "numpy.array",
        "numpy.linalg.linalg.eigvalsh"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvalsh.test_UPLO": [
        "numpy.linalg.eigvalsh",
        "numpy.double",
        "numpy.linalg.linalg.eigvalsh",
        "numpy.linalg.tests.test_linalg.get_rtol",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvalsh.test_0_size.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.TestEigvalsh.test_0_size": [
        "numpy.ndarray",
        "numpy.float32",
        "numpy.ma.core.MaskedArray.view",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.linalg.eigvalsh",
        "numpy.float64",
        "numpy.testing.assert_",
        "numpy.linalg.tests.test_linalg.TestEigvalsh.test_0_size.ArraySubclass",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.linalg.tests.test_linalg.TestEighCases": [
        "numpy.linalg.tests.test_linalg.HermitianGeneralizedTestCase",
        "numpy.linalg.tests.test_linalg.HermitianTestCase"
    ],
    "numpy.linalg.tests.test_linalg.TestEighCases.do": [
        "numpy.linalg.eigh",
        "numpy.linalg.tests.test_linalg.get_rtol",
        "numpy.linalg.tests.test_linalg.dot_generalized",
        "numpy.linalg.eig",
        "numpy.asarray",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestEigh.test_types.check": [
        "numpy.linalg.tests.test_linalg.get_real_dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_duck.DummyComplexArray.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_pandas_duck.DummyPd.dtype",
        "numpy.lib.tests.test_type_check.TestIscomplexobj.test_custom_dtype_duck.MyArray.dtype",
        "numpy.dtype",
        "numpy.linalg.eigh",
        "numpy.testing.assert_equal",
        "numpy.array",
        "numpy.linalg.linalg.eigh"
    ],
    "numpy.linalg.tests.test_linalg.TestEigh.test_types": [
        "numpy.csingle",
        "numpy.double",
        "numpy.cdouble",
        "numpy.linalg.tests.test_linalg.TestEigh.test_types.check",
        "numpy.single"
    ],
    "numpy.linalg.tests.test_linalg.TestEigh.test_invalid": [
        "numpy.float32",
        "numpy.array",
        "numpy.linalg.eigh",
        "numpy.linalg.linalg.eigh"
    ],
    "numpy.linalg.tests.test_linalg.TestEigh.test_UPLO": [
        "numpy.double",
        "numpy.linalg.eigh",
        "numpy.linalg.tests.test_linalg.get_rtol",
        "numpy.linalg.linalg.eigh",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestEigh.test_0_size.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.TestEigh.test_0_size": [
        "numpy.ndarray",
        "numpy.float32",
        "numpy.ma.core.MaskedArray.view",
        "numpy.complex64",
        "numpy.linalg.eigh",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.float64",
        "numpy.testing.assert_",
        "numpy.linalg.tests.test_linalg.TestEigh.test_0_size.ArraySubclass",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.linalg.tests.test_linalg._TestNormGeneral": [
        "numpy.linalg.tests.test_linalg._TestNormBase"
    ],
    "numpy.linalg.tests.test_linalg._TestNormGeneral.test_empty": [
        "numpy.linalg.norm",
        "numpy.atleast_2d",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector_return_type": [
        "numpy.linalg.norm",
        "numpy.testing.assert_",
        "numpy.array",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector._test": [
        "numpy.linalg.norm",
        "numpy.testing._private.utils.assert_almost_equal",
        "numpy.testing.assert_almost_equal",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector": [
        "npy_tempita.compat3.b",
        "numpy.linalg.tests.test_linalg._TestNormGeneral.test_vector._test",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg._TestNormGeneral.test_axis": [
        "numpy.core.fromnumeric.reshape",
        "numpy.linalg.norm",
        "numpy.array",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.core.fromnumeric.ndim",
        "numpy.linalg.tests.test_linalg.assert_almost_equal",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.reshape"
    ],
    "numpy.linalg.tests.test_linalg._TestNormGeneral.test_keepdims": [
        "numpy.core.fromnumeric.reshape",
        "numpy.linalg.norm",
        "numpy.squeeze",
        "numpy.ma.core.MaskedArray.reshape",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.reshape",
        "numpy.ma.core.ndim",
        "numpy.ndim",
        "numpy.reshape"
    ],
    "numpy.linalg.tests.test_linalg._TestNorm2D": [
        "numpy.linalg.tests.test_linalg._TestNormBase",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_empty": [
        "numpy.linalg.norm",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_return_type": [
        "numpy.linalg.norm",
        "numpy.testing._private.utils.assert_almost_equal",
        "numpy.testing.assert_",
        "numpy.ma.testutils.assert_almost_equal",
        "numpy.testing.assert_almost_equal",
        "numpy.linalg.tests.test_linalg.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_2x2": [
        "numpy.linalg.norm",
        "numpy.linalg.tests.test_linalg.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg._TestNorm2D.test_matrix_3x3": [
        "numpy.linalg.norm",
        "numpy.linalg.tests.test_linalg.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg._TestNorm2D.test_bad_args": [
        "numpy.linalg.norm",
        "numpy.AxisError",
        "numpy.ma.core.reshape",
        "numpy.array",
        "numpy.core.fromnumeric.reshape",
        "numpy.reshape",
        "numpy.lib.polynomial.poly1d.order",
        "numpy.ma.core.MaskedArray.reshape"
    ],
    "numpy.linalg.tests.test_linalg._TestNorm": [
        "numpy.linalg.tests.test_linalg._TestNorm2D",
        "numpy.linalg.tests.test_linalg._TestNormGeneral"
    ],
    "numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_longdouble_norm": [
        "numpy.testing.assert_almost_equal",
        "numpy.linalg.norm",
        "numpy.longdouble",
        "numpy.arange"
    ],
    "numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_intmin": [
        "numpy.testing.assert_almost_equal",
        "numpy.linalg.norm",
        "numpy.int32",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestNorm_NonSystematic.test_complex_high_ord": [
        "numpy.linalg.norm",
        "numpy.complex128",
        "numpy.linalg.linalg.norm",
        "numpy.clongdouble",
        "numpy.complex64",
        "numpy.empty",
        "numpy.testing.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg._TestNormDoubleBase": [
        "numpy.double",
        "numpy.linalg.tests.test_linalg._TestNormBase"
    ],
    "numpy.linalg.tests.test_linalg._TestNormSingleBase": [
        "numpy.linalg.tests.test_linalg._TestNormBase",
        "numpy.float32"
    ],
    "numpy.linalg.tests.test_linalg._TestNormInt64Base": [
        "numpy.linalg.tests.test_linalg._TestNormBase",
        "numpy.int64"
    ],
    "numpy.linalg.tests.test_linalg.TestNormDouble": [
        "numpy.linalg.tests.test_linalg._TestNorm",
        "numpy.linalg.tests.test_linalg._TestNormDoubleBase"
    ],
    "numpy.linalg.tests.test_linalg.TestNormSingle": [
        "numpy.linalg.tests.test_linalg._TestNormSingleBase",
        "numpy.linalg.tests.test_linalg._TestNorm"
    ],
    "numpy.linalg.tests.test_linalg.TestNormInt64": [
        "numpy.linalg.tests.test_linalg._TestNormInt64Base",
        "numpy.linalg.tests.test_linalg._TestNorm"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixRank.test_matrix_rank": [
        "numpy.zeros",
        "numpy.linalg.matrix_rank",
        "numpy.eye",
        "numpy.array",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestMatrixRank.test_symmetric_rank": [
        "numpy.zeros",
        "numpy.ones",
        "numpy.linalg.matrix_rank",
        "numpy.eye",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.test_reduced_rank": [
        "numpy.linalg.matrix_rank",
        "numpy.random.RandomState",
        "numpy.testing.assert_equal",
        "numpy.random.normal"
    ],
    "numpy.linalg.tests.test_linalg.TestQR": [
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestQR.check_qr": [
        "numpy.triu",
        "numpy.ma.core.MaskedArray.min",
        "numpy.ma.core.min",
        "numpy.eye",
        "numpy.min",
        "numpy.conj",
        "numpy.testing.assert_",
        "numpy.matrixlib.defmatrix.matrix.min",
        "numpy.core.getlimits.iinfo.min",
        "numpy.dot",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestQR.test_qr_empty": [
        "numpy.zeros"
    ],
    "numpy.linalg.tests.test_linalg.TestQR.test_mode_raw": [
        "numpy.testing.assert_",
        "numpy.double",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestQR.test_mode_all_but_economic": [
        "numpy.linalg.tests.test_linalg.TestQR.check_qr",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestQR.test_0_size": [
        "numpy.zeros"
    ],
    "numpy.linalg.tests.test_linalg.TestCholesky.test_basic_property": [
        "numpy.random.randn",
        "numpy.conj",
        "numpy.float32",
        "numpy.matmul",
        "numpy.linalg.cholesky",
        "numpy.complex128",
        "numpy.complex64",
        "numpy.asarray",
        "numpy.issubdtype",
        "numpy.random.seed",
        "numpy.linalg.linalg.cholesky",
        "numpy.matlib.randn",
        "numpy.float64"
    ],
    "numpy.linalg.tests.test_linalg.TestCholesky.test_0_size.ArraySubclass": [
        "numpy.ndarray"
    ],
    "numpy.linalg.tests.test_linalg.TestCholesky.test_0_size": [
        "numpy.ndarray",
        "numpy.ma.core.MaskedArray.view",
        "numpy.complex64",
        "numpy.linalg.tests.test_linalg.TestCholesky.test_0_size.ArraySubclass",
        "numpy.ma.masked.view",
        "numpy.testing.assert_equal",
        "numpy.linalg.cholesky",
        "numpy.float64",
        "numpy.testing.assert_",
        "numpy.ma.mrecords.MaskedRecords.view"
    ],
    "numpy.linalg.tests.test_linalg.test_byteorder_check": [
        "numpy.float32",
        "numpy.testing.assert_array_equal",
        "numpy.linalg.inv",
        "numpy.float64",
        "numpy.lib.user_array.container.byteswap",
        "numpy.eye",
        "numpy.testing.assert_equal"
    ],
    "numpy.linalg.tests.test_linalg.test_generalized_raise_multiloop": [
        "numpy.zeros",
        "numpy.linalg.linalg.inv",
        "numpy.array",
        "numpy.linalg.inv",
        "numpy.linalg.linalg.LinAlgError"
    ],
    "numpy.linalg.tests.test_linalg.test_xerbla_override": [
        "numpy.linalg.lapack_lite.dorgqr",
        "numpy.linalg.lapack_lite.xerbla",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_three_arguments": [
        "numpy.dot",
        "numpy.random.random",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestMultiDot.test_basic_function_with_dynamic_programing_optimization": [
        "numpy.core.multiarray.dot",
        "numpy.ma.core.dot",
        "numpy.ma.core.MaskedArray.dot",
        "numpy.dot",
        "numpy.random.random",
        "numpy.linalg.tests.test_linalg.assert_almost_equal"
    ],
    "numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_first_argument": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.random.random",
        "numpy.ma.core.shape"
    ],
    "numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_last_argument": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.random.random",
        "numpy.ma.core.shape"
    ],
    "numpy.linalg.tests.test_linalg.TestMultiDot.test_vector_as_first_and_last_argument": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.testing.assert_equal",
        "numpy.core.fromnumeric.shape",
        "numpy.random.random",
        "numpy.ma.core.shape"
    ],
    "numpy.linalg.tests.test_linalg.TestMultiDot.test_dynamic_programming_logic": [
        "numpy.int",
        "numpy.linalg.linalg._multi_dot_matrix_chain_order",
        "numpy.triu",
        "numpy.random.random",
        "numpy.linalg.tests.test_linalg.assert_almost_equal",
        "numpy.array"
    ],
    "numpy.linalg.tests.test_linalg.TestMultiDot.test_too_few_input_arrays": [
        "numpy.random.random"
    ],
    "numpy.linalg.tests.test_deprecations.test_qr_mode_full_future_warning": [
        "numpy.linalg.linalg.qr",
        "numpy.eye"
    ],
    "numpy.doc.constants.add_newdoc": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.tests.test_scripts.test_f2py": [
        "numpy.tests.test_scripts.run_command",
        "numpy.testing.assert_",
        "numpy.testing.assert_equal"
    ],
    "numpy.tests.test_ctypeslib.TestLoadLibrary": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic": [
        "numpy.ctypeslib.load_library"
    ],
    "numpy.tests.test_ctypeslib.TestLoadLibrary.test_basic2": [
        "numpy.ctypeslib.load_library",
        "numpy.distutils.misc_util.get_shared_lib_extension"
    ],
    "numpy.tests.test_ctypeslib.TestNdpointer.test_dtype": [
        "numpy.zeros",
        "numpy.ctypeslib.ndpointer",
        "numpy.testing.assert_",
        "numpy.dtype",
        "numpy.float64",
        "numpy.array"
    ],
    "numpy.tests.test_ctypeslib.TestNdpointer.test_ndim": [
        "numpy.testing.assert_",
        "numpy.ctypeslib.ndpointer",
        "numpy.array"
    ],
    "numpy.tests.test_ctypeslib.TestNdpointer.test_shape": [
        "numpy.testing.assert_",
        "numpy.ctypeslib.ndpointer",
        "numpy.array"
    ],
    "numpy.tests.test_ctypeslib.TestNdpointer.test_flags": [
        "numpy.testing.assert_",
        "numpy.ctypeslib.ndpointer",
        "numpy.array"
    ],
    "numpy.tests.test_ctypeslib.TestNdpointer.test_cache": [
        "numpy.ctypeslib.ndpointer",
        "numpy.float64",
        "numpy.testing.assert_"
    ],
    "numpy.tests.test_matlib.test_empty": [
        "numpy.lib.arrayterator.Arrayterator.shape",
        "numpy.shape",
        "numpy.matlib.empty",
        "numpy.core.fromnumeric.shape",
        "numpy.matrix",
        "numpy.testing.assert_",
        "numpy.empty",
        "numpy.ma.core.shape"
    ],
    "numpy.tests.test_matlib.test_ones": [
        "numpy.matrix",
        "numpy.testing.assert_array_equal",
        "numpy.ones",
        "numpy.matlib.ones",
        "numpy.core.numeric.ones",
        "numpy.ma.ones"
    ],
    "numpy.tests.test_matlib.test_zeros": [
        "numpy.zeros",
        "numpy.matrix",
        "numpy.ma.zeros",
        "numpy.testing.assert_array_equal",
        "numpy.matlib.zeros"
    ],
    "numpy.tests.test_matlib.test_identity": [
        "numpy.int",
        "numpy.matrix",
        "numpy.testing.assert_array_equal",
        "numpy.identity",
        "numpy.matlib.identity",
        "numpy.core.numeric.identity",
        "numpy.polynomial._polybase.ABCPolyBase.identity"
    ],
    "numpy.tests.test_matlib.test_eye": [
        "numpy.int",
        "numpy.matrix",
        "numpy.lib.twodim_base.eye",
        "numpy.testing.assert_array_equal",
        "numpy.eye",
        "numpy.matlib.eye"
    ],
    "numpy.tests.test_matlib.test_rand": [
        "numpy.matlib.rand",
        "numpy.testing._private.utils.rand",
        "numpy.random.rand",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.tests.test_matlib.test_randn": [
        "numpy.matlib.randn",
        "numpy.random.randn",
        "numpy.testing.assert_",
        "numpy.core.fromnumeric.ndim",
        "numpy.ma.core.ndim",
        "numpy.ndim"
    ],
    "numpy.tests.test_matlib.test_repmat": [
        "numpy.testing.assert_array_equal",
        "numpy.arange",
        "numpy.matlib.repmat",
        "numpy.array"
    ],
    "numpy.tests.test_warnings.ParseCall.visit_Attribute": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.tests.test_warnings.ParseCall.visit_Name": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "numpy.tests.test_warnings.FindFuncs.visit_Call": [
        "numpy.tests.test_warnings.ParseCall",
        "numpy.tests.test_warnings.ParseCall.__init__",
        "numpy.lib.utils.SafeEval.visit"
    ],
    "numpy.tests.test_warnings.test_warning_calls": [
        "numpy.lib.utils.SafeEval.visit"
    ],
    "numpy.tests.test_numpy_version.test_valid_numpy_version": [
        "numpy.testing.assert_"
    ],
    "numpy.tests.test_reloading.test_numpy_reloading": [
        "numpy._globals.VisibleDeprecationWarning",
        "numpy.testing.assert_",
        "numpy._globals",
        "numpy._globals.ModuleDeprecationWarning",
        "numpy"
    ],
    "numpy.tests.test_reloading.test_novalue": [
        "numpy.testing.assert_",
        "numpy.testing.assert_equal"
    ],
    "postprocess.main": [
        "postprocess.process_html",
        "postprocess.process_tex"
    ],
    "postprocess.process_tex": [
        "numpy.ma.append",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "summarize.main": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.core.defchararray.join",
        "numpy.core.defchararray.chararray.join",
        "numpy.ma.append",
        "summarize.format_in_columns",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.char.join",
        "numpy.ma.core.append",
        "summarize.check_numpy"
    ],
    "summarize.check_numpy": [
        "numpy.lib._iotools.StringConverter.update",
        "numpy.core.defchararray.join",
        "numpy.lib.npyio.NpzFile.keys",
        "numpy.fft.fft",
        "numpy",
        "*.ctypeslib",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.chararray.join",
        "summarize.get_undocumented",
        "numpy.random.random",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.random",
        "numpy.fft.fftpack.fft",
        "numpy.char.join",
        "numpy.lib._datasource._FileOpeners.keys"
    ],
    "summarize.format_in_columns": [
        "numpy.ma.core.MaskedArray.max",
        "numpy.ma.core.max",
        "numpy.max",
        "numpy.ma.append",
        "numpy.matrixlib.defmatrix.matrix.max",
        "numpy.core.getlimits.iinfo.max",
        "numpy.append",
        "numpy.lib.function_base.append",
        "numpy.ma.core.append"
    ],
    "build_index.render": [
        "numpy.core.defchararray.split",
        "numpy.lib.shape_base.split",
        "numpy.split",
        "build_index.render",
        "numpy.core.defchararray.chararray.split"
    ],
    "build_index.nep_metadata": [
        "numpy.lib.npyio.NpzFile.items",
        "numpy.core.defchararray.strip",
        "numpy.lib._datasource.DataSource.open",
        "numpy.core.defchararray.chararray.strip",
        "numpy.int",
        "numpy.lib._datasource.open"
    ],
    "numpyfilter.main": [
        "numpy.lib.npyio.NpzFile.close",
        "numpyfilter.save_cache",
        "numpy.lib.tests.test_format.BytesIOSRandomSize.read",
        "numpy.core.defchararray.strip",
        "numpy.lib.tests.test_io.TestSaveTxt.test_custom_writer.CustomWriter.write",
        "numpy.lib._datasource.DataSource.open",
        "numpyfilter.load_cache",
        "numpy.core.defchararray.chararray.strip",
        "numpy.lib.tests.test_io.TextIO.write",
        "numpy.distutils.command.config.GrabStdout.write",
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.savetxt.WriteWrap.write",
        "numpy.lib._datasource.open"
    ],
    "numpyfilter.filter_comment": [
        "numpyfilter.render_html",
        "numpy.core.defchararray.startswith",
        "numpy.core.defchararray.strip",
        "numpy.core.defchararray.chararray.startswith",
        "numpy.core.defchararray.chararray.strip"
    ],
    "numpyfilter.process_match": [
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_subclass.sub",
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_0d_object_subclass.sub",
        "numpy.core.tests.test_arrayprint.TestArrayRepr.test_object_subclass.sub",
        "npy_tempita.sub",
        "numpyfilter.filter_comment"
    ],
    "numpyfilter.load_cache": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.exists",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpyfilter.save_cache": [
        "numpy.lib.npyio.savetxt.WriteWrap.close",
        "numpy.lib.npyio.NpzFile.close",
        "numpy.lib._datasource.DataSource.open",
        "numpy.lib._datasource.open"
    ],
    "numpyfilter.render_html": [
        "numpy.core.defchararray.chararray.encode",
        "numpy.core.defchararray.encode"
    ],
    "conf.linkcode_resolve": [
        "numpy.core.code_generators.ufunc_docstrings.get",
        "numpy.distutils.environment.EnvironmentConfig.get"
    ]
}